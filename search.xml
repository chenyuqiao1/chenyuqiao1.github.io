<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GATK mutation filter的工具</title>
    <url>/2019/11/23/GATK_Filter/</url>
    <content><![CDATA[<h2 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h2><p><strong>这些开源的工具筛选突变是有一定困难的。这个时候就需要我自己写一些简单的代码去解决困难了。</strong>后面只是我的一些尝试的过程，希望自己以后不再走弯路。</p>
<a id="more"></a>

<h3 id="GATK-FilterMutectCalls将Mutect2得到的vcf-文件进行帅选"><a href="#GATK-FilterMutectCalls将Mutect2得到的vcf-文件进行帅选" class="headerlink" title="GATK_FilterMutectCalls将Mutect2得到的vcf 文件进行帅选"></a>GATK_FilterMutectCalls将Mutect2得到的vcf 文件进行帅选</h3><p>这里可以有很多的参数，但是，没有看到具体的可参考命令，只能自己读原始的文件了</p>
<p><a href="https://software.broadinstitute.org/gatk/documentation/tooldocs/4.0.6.0/org_broadinstitute_hellbender_tools_walkers_mutect_FilterMutectCalls.php" target="_blank" rel="noopener">GATK官网关于FilerMutectCalls的参考指南</a></p>
<blockquote>
<p>下面的筛选太初步了</p>
</blockquote>
<p><img src="/2019/11/23/GATK_Filter/1574409586993.png" alt="1574409586993"></p>
<h2 id="GATK-VariantFiltration"><a href="#GATK-VariantFiltration" class="headerlink" title="GATK_VariantFiltration"></a>GATK_VariantFiltration</h2><p>按照一定的筛选标准进行筛选</p>
<p>GATK 后用这种方式去筛选</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">gatk VariantFiltration \</span><br><span class="line">-V P174635_LN_filter.snp.vcf \</span><br><span class="line">--filter-expression "CONTQ&lt;93 || DP &lt; 300 " \</span><br><span class="line">--filter-name "yuqiao_PASS" \</span><br><span class="line">-G-filter "AF &lt; 0.02" \</span><br><span class="line">-G-filter-name "AF_low" \</span><br><span class="line">-O P174635_LN_filter.snp.filter.vcf</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat P174635_LN_filter.snp.filter.vcf|grep -v '##' |head -10</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/23/GATK_Filter/1574482290210.png" alt="1574482290210"></p>
<p>但是问题是：两个样本有两个不同的MMQ数值，那又该如何运行呢？</p>
<blockquote>
<p>这些都是尝试的错误代码，</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup \</span><br><span class="line">gatk VariantFiltration \</span><br><span class="line">-V P174635_LN_filter.snp.vcf \</span><br><span class="line">--filter-expression " MMQ&gt; [60, 60] || DP &lt; 300 " \</span><br><span class="line">--filter-name "yuqiao_PASS" \</span><br><span class="line">-G-filter "AF &lt; 0.02" \</span><br><span class="line">-G-filter-name "AF_low" \</span><br><span class="line">-O ABC.snp.filter.vcf \</span><br><span class="line">&amp;</span><br><span class="line">cat ABC.snp.filter.vcf|grep -v '##' |head -50</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DNAseq</category>
      </categories>
      <tags>
        <tag>gatk</tag>
        <tag>mutation_filters</tag>
        <tag>vcf</tag>
      </tags>
  </entry>
  <entry>
    <title>R语言基础补足</title>
    <url>/2019/12/19/R_error/</url>
    <content><![CDATA[<p>将dataframe的chr改为numberic报错</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">options(stringsAsFactors = <span class="literal">F</span>)</span><br><span class="line">a&lt;- c(<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>)</span><br><span class="line">b&lt;- c(<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>)</span><br><span class="line">c&lt;- data.frame(a=a,b=b)</span><br><span class="line">d&lt;- as.numeric(c)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>报错：错误: (串列)对象不能强制改变成’double’种类</p>
</blockquote>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">options(stringsAsFactors = <span class="literal">F</span>)</span><br><span class="line">a&lt;- c(<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>)</span><br><span class="line">b&lt;- c(<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>)</span><br><span class="line">c&lt;- data.frame(a=a,b=b)</span><br><span class="line">d&lt;- as.matrix(c)</span><br><span class="line">d&lt;- as.numeric(d)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果先转为matrix进行计算，就会导致d为一个数列，而不是一个数据框。</p>
</blockquote>
<blockquote>
<p><img src="/2019/12/19/R_error/1577515271454.png" alt="1577515271454"></p>
</blockquote>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R报错</tag>
      </tags>
  </entry>
  <entry>
    <title>食管鳞癌的胚系突变和体细胞突变</title>
    <url>/2019/11/22/ESCC_DNA_notes1/</url>
    <content><![CDATA[<h3 id="食管鳞癌的胚系突变和体细胞突变–阅读笔记"><a href="#食管鳞癌的胚系突变和体细胞突变–阅读笔记" class="headerlink" title="食管鳞癌的胚系突变和体细胞突变–阅读笔记"></a>食管鳞癌的胚系突变和体细胞突变–阅读笔记</h3><p>参考文献</p>
<ol>
<li><p>Gao YB, Chen ZL, Li JG, Hu XD, Shi XJ, Sun ZM, et al. Genetic landscape of esophageal squamous cell carcinoma. Nat Genet. 2014;46(10):1097-102.</p>
</li>
<li><p>Zhang L, Zhou Y, Cheng C, Cui H, Cheng L, Kong P, et al. Genomic analyses reveal mutational signatures and frequently altered genes in esophageal squamous cell carcinoma. Am J Hum Genet. 2015;96(4):597-611.</p>
</li>
<li><p>Lin DC, Hao JJ, Nagata Y, Xu L, Shang L, Meng X, et al. Genomic and molecular characterization of esophageal squamous cell carcinoma. Nat Genet. 2014;46(5):467-73.</p>
</li>
<li><p>Song Y, Li L, Ou Y, Gao Z, Li E, Li X, et al. Identification of genomic alterations in oesophageal squamous cell cancer. Nature. 2014;509(7498):91-5.</p>
</li>
<li><p>Secrier M, Li X, de Silva N, Eldridge MD, Contino G, Bornschein J, et al. Mutational signatures in esophageal adenocarcinoma define etiologically distinct subgroups with therapeutic relevance. Nat Genet. 2016;48(10):1131-41.</p>
</li>
<li><p>Guo J, Huang J, Zhou Y, Zhou Y, Yu L, Li H, et al. Germline and somatic variations influence the somatic mutational signatures of esophageal squamous cell carcinomas in a Chinese population. BMC Genomics. 2018;19(1):538.</p>
</li>
</ol>
<blockquote>
<p>自己只做了9例测序，还有300例是别人数据库的文章</p>
</blockquote>
<a id="more"></a>

<p><img src="/2019/11/22/ESCC_DNA_notes1/1574384069467.png" alt="1574384069467"></p>
<p><img src="/2019/11/22/ESCC_DNA_notes1/1566729894146.png" alt="1566729894146"></p>
<blockquote>
<p>可以看到GATK 主要是进行胚系突变的寻找，而VarScan2主要是进行somatic mutation</p>
</blockquote>
<blockquote>
<p><a href="http://www.biotrainee.com/thread-2207-1-1.html" target="_blank" rel="noopener">http://www.biotrainee.com/thread-2207-1-1.html</a></p>
<p><strong>使用bcftools、freebayes和varscan2 call SNV</strong></p>
</blockquote>
<h4 id="方法学"><a href="#方法学" class="headerlink" title="方法学"></a>方法学</h4><ol>
<li><h5 id="测序"><a href="#测序" class="headerlink" title="测序"></a>测序</h5></li>
</ol>
<p>自己只有9个厦门中山医院的数据。</p>
<ol start="2">
<li><h5 id="Somatic-mutation-analysis-and-genotyping"><a href="#Somatic-mutation-analysis-and-genotyping" class="headerlink" title="Somatic mutation analysis and genotyping"></a>Somatic mutation analysis and genotyping</h5></li>
</ol>
<p>302个数据，BWA进行比对，Picard mark duplicate ，VarScan2 帅选somatic and germline 突变，阈值mapping quality 大于30，coverage 大于10。得到的突变进一步筛选标准，allele depth大于10。</p>
<p>此外，还使用了GATK Haploytype Caller call germline 突变。</p>
<p>germline突变取交集。</p>
<p>为了确定胚系突变的基因型，筛选标准是，mapping quality 大于30，coverage of alternate 大于5，total coverage 大于20. </p>
<p>We then determined the genotype based on alternate allele coverage rate (ACR) as the followings: (1)<br>ACR ≤ 0.1, homozygote of the reference allele; (2) 0.2 ≤ ACR ≤ 0.8, heterozygote; (3) ACR ≥ 0.9, homozygote of the alternate allele.  </p>
<p>也即是coverage of alternate/ total coverage</p>
<p>此外</p>
<p><img src="/2019/11/22/ESCC_DNA_notes1/1574385729496.png" alt="1574385729496"></p>
<p><img src="/2019/11/22/ESCC_DNA_notes1/1574385464648.png" alt="Fig S3"></p>
<blockquote>
<p>CHB: Han Chinese in Beijing;</p>
<p>CHS: Southern Han Chinese; </p>
<p>TGP: The 1000 Genomes Project;  </p>
</blockquote>
<p>Population stratification of 302 ESCC patients. Two hundred eight genotyped reference individuals are<br>obtained from TGP including 103 CHB and 105 CHS. After filtering 20 outliers, the remaining 282 samples are classified into CHB and CHS at a threshold level of 0 for PC2. </p>
<p>也就是将千人计划中的103 北京汉族人口和105南方汉族的汉族人口和分析的302的食管癌患者，总共510个患者的germline mutation 进行PCA分析。</p>
<ol start="3">
<li><h5 id="somatic-mutational-signature"><a href="#somatic-mutational-signature" class="headerlink" title="somatic mutational signature"></a>somatic mutational signature</h5></li>
</ol>
<p>使用pmsignature 这个R包对mutation的signature和COSMIC 数据库做对比分析</p>
<ol start="4">
<li><h5 id="somatic-CNV"><a href="#somatic-CNV" class="headerlink" title="somatic CNV"></a>somatic CNV</h5></li>
</ol>
<p>同样使用的是Varscan2这个软件，筛选标准是coverage 大于20，base quality 大于20，mapping quality 大于20。  </p>
<p>The breakpoints were defined based on significant change of the ratio-of-depth between the tumor and the matched normal (p &lt; 0.05 with Fisher’s Exact Test).  </p>
<p>We obtained the autosomal segments of copy-number changes using circular binary segmentation (CBS) and determined the somatic copy-number status of each segment by the log2-adjusted ratio-of-depth.  </p>
<p>gain 是指的是大于0.5，lose指的是这个值小于-0.5</p>
<p>JISTIC was used to find the significant regions and genes of SCNAs [50] </p>
<p>这是一款注释软件；</p>
<p>软件下载地址<a href="https://systemsbiology.columbia.edu/center-for-computational-biology-and-bioinformatics-c2b2" target="_blank" rel="noopener">https://systemsbiology.columbia.edu/center-for-computational-biology-and-bioinformatics-c2b2</a></p>
<ol start="5">
<li><h5 id="关于突变基因的注释"><a href="#关于突变基因的注释" class="headerlink" title="关于突变基因的注释"></a>关于突变基因的注释</h5></li>
</ol>
<p>The somatic mutations were annotated using Oncotator (v1.5.1.0) [51]. </p>
<p>Then we evaluated the enrichment of the non-synonymous somatic mutations (SMGs are FDR &lt; 0.1) in each gene using MutSigCV (v1.4) [52]. </p>
<p>We analyzed the pathways of genes that are either significantly frequently mutated (MutSigCV p &lt; 0.05) and strongly associated with SCNAs using HotNet2 [53]. </p>
<blockquote>
<p>这里用到了三个软件，第一个是Oncotator 这个软件进行注</p>
<p>MutSigCV 这个软件最显著突变的寻找</p>
<p>HotNet2 用来寻找最显著突变且和SCNA相关的gene的通路。</p>
</blockquote>
<p>这部分关于注释的方法学，还是值得参考的</p>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><ol>
<li><h5 id="somatic-mutation"><a href="#somatic-mutation" class="headerlink" title="somatic mutation"></a>somatic mutation</h5></li>
</ol>
<p><img src="/2019/11/22/ESCC_DNA_notes1/1574389190298.png" alt="1574389190298"></p>
<blockquote>
<p>是关于mutation signature 和 COSMIC signature 相似性分析</p>
</blockquote>
<p><img src="/2019/11/22/ESCC_DNA_notes1/1574389501110.png" alt="1574389501110"></p>
<p><img src="/2019/11/22/ESCC_DNA_notes1/1574390146934.png" alt="1574390146934"></p>
<blockquote>
<p>突变全景图，首选是聚类，对mutational signature 进行聚类分析，看看是够可以通过聚类方式，对食管癌进行分类。可以看到分类后，有一些临床特征和食管癌类型相关</p>
</blockquote>
<table>
<thead>
<tr>
<th>FIg2</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2019/11/22/ESCC_DNA_notes1/1574390638657.png" alt="1574390638657"></td>
<td><img src="/2019/11/22/ESCC_DNA_notes1/1574390674688.png" alt="1574390674688"></td>
</tr>
</tbody></table>
<p>We further assessed the association between other risk factors and the activity of the mutational signatures.  </p>
<blockquote>
<p>千人计划的分析结果</p>
</blockquote>
<h5 id="FIg3"><a href="#FIg3" class="headerlink" title="FIg3"></a>FIg3</h5><p>和显著突变相关（SMG_MUTsigCV得到）的突变特征</p>
<p> <img src="/2019/11/22/ESCC_DNA_notes1/1574391079014.png" alt="1574391079014"></p>
<table>
<thead>
<tr>
<th>Fig4</th>
<th>Fig5</th>
</tr>
</thead>
<tbody><tr>
<td>ZNF750 相关的突变特征</td>
<td>CDC27突变相关的突变特征</td>
</tr>
<tr>
<td><img src="/2019/11/22/ESCC_DNA_notes1/1574391286243.png" alt="1574391286243"></td>
<td><img src="/2019/11/22/ESCC_DNA_notes1/1574391312214.png" alt="1574391312214"></td>
</tr>
</tbody></table>
<p>不断更新…</p>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>ESCC</tag>
        <tag>DNAseq</tag>
      </tags>
  </entry>
  <entry>
    <title>黑科技软件之快速搜索工具——Listary_and_Quick_eye</title>
    <url>/2019/12/27/Listary/</url>
    <content><![CDATA[<h2 id="quick-eye"><a href="#quick-eye" class="headerlink" title="quick_eye"></a>quick_eye</h2><h4 id="需要翻墙才能下载"><a href="#需要翻墙才能下载" class="headerlink" title="需要翻墙才能下载"></a>需要翻墙才能下载</h4><p><img src="/2019/12/27/Listary/1577461061572.png" alt="1577461061572"></p>
<h1 id="黑科技软件之快速搜索工具——Listary"><a href="#黑科技软件之快速搜索工具——Listary" class="headerlink" title="黑科技软件之快速搜索工具——Listary"></a>黑科技软件之快速搜索工具——Listary</h1><p>Listary是一款适用于Windows的革命性搜索工具，可以为休闲和高级用户提供快速查找文件和快速启动应用程序的功能！</p>
<h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h1><p>Listary 官网下载：<a href="https://www.listary.com/download" target="_blank" rel="noopener">https://www.listary.com/download</a></p>
<h1 id="2-入门使用"><a href="#2-入门使用" class="headerlink" title="2.入门使用"></a><strong>2.入门使用</strong></h1><ul>
<li><strong>启动应用</strong></li>
</ul>
<p>您可以随时<strong>按Ctrl或者Alt + Q</strong>两次以激活Listary以搜索所有应用和文件。</p>
<p>当您的搜索查询<strong>不包含空格时</strong>，Listary会首先列出应用程序。如果您只想搜索文件，只需在搜索查询中的任意位置<strong>添加空格</strong>即可。</p>
<a id="more"></a>



<p><img src="/2019/12/27/Listary/13517568-10178a0978169b05.webp" alt="img"></p>
<p>黑科技软件之快速搜索工具——Listary</p>
<p>启动应用</p>
<ul>
<li><strong>Listary的2种模式</strong></li>
</ul>
<p>您可能已经注意到Listary有两种模式。当您使用find-as-you-type激活它时，它会弹出<em>Explorer的右下角</em>。这是<strong>文件管理器模式</strong>。使用Ctrl X 2热键激活Listary时，它会<em>在屏幕中间</em>弹出。这是<strong>启动器模式</strong>。</p>
<ul>
<li><strong>文件管理器模式</strong>：此模式侧重于文件搜索。列表搜索栏显示在当前文件管理器窗口（例如资源管理器）中。文件夹在当前文件管理器窗口中打开。应用启动，网络搜索等功能已<em>停用</em>。</li>
<li><strong>启动器模式</strong>：此模式下提供所有功能。列表搜索栏显示在屏幕中间。文件夹在新文件管理器窗口中打开。</li>
</ul>
<h2 id="基本热键"><a href="#基本热键" class="headerlink" title="基本热键"></a><strong>基本热键</strong></h2><ul>
<li>直接在Explorer中输入：激活Listary进行搜索。</li>
<li>按两次Ctrl键：随时随地手动激活Listary。</li>
<li>Esc：隐藏列表搜索栏/退出操作。</li>
<li>Down ↓或Ctrl + N：选择下一个项目。</li>
<li>Up ↑或Ctrl + P：选择上一个项目。</li>
<li>Right →或Ctrl + O：输入所选搜索结果的“操作”菜单。</li>
</ul>
<p>查看此页面以获取完整的热键列表。</p>
<ul>
<li><strong>网络搜索</strong></li>
</ul>
<p>键入gg php tutorial以搜索php tutorial使用Google。打开列表选项 - 关键字 - 用于检查支持的搜索引擎或添加自己的搜索引擎的Web。</p>
<p>此功能仅适用于<strong>启动器模式</strong>。</p>
<p><img src="/2019/12/27/Listary/13517568-740c4850740029e2.webp" alt="img"></p>
<p>黑科技软件之快速搜索工具——Listary</p>
<p>搜索界面</p>
<ul>
<li><strong>使用鼠标</strong></li>
</ul>
<p>Listary主要用于与键盘一起使用，但使用鼠标使用它也非常方便。</p>
<p>您可以在资源管理器或桌面<strong>上双击空白区域</strong>以显示Listary弹出菜单。</p>
<p><img src="/2019/12/27/Listary/13517568-69a683c9f8a54fef.webp" alt="img"></p>
<p>黑科技软件之快速搜索工具——Listary</p>
<p>弹出菜单</p>
<h1 id="3-热键"><a href="#3-热键" class="headerlink" title="3.热键"></a><strong>3.热键</strong></h1><ul>
<li><strong>热键激活Listary</strong></li>
<li>按Ctrl twice（推荐，适用于所有Windows版本）</li>
<li>按Ctrl twice（Windows 10）</li>
<li>Win + G （Windows 8）</li>
<li>Win + S （Windows 7 / XP）</li>
</ul>
<p>您可以在列表选项 - 热键中更改它。</p>
<ul>
<li><strong>搜索结果热键</strong></li>
</ul>
<p>您可以使用这些热键来导航搜索结果。在列表选项 - 热键中更改它们。</p>
<ul>
<li>Down arrow或Ctrl + N：选择下一个项目。</li>
<li>Up arrow或Ctrl + P：选择上一个项目。</li>
<li>Right arrow或Ctrl + O：输入所选搜索结果的“操作”菜单。</li>
<li>Esc：隐藏列表搜索栏/退出操作。</li>
<li><strong>命令热键</strong></li>
</ul>
<p>以下热键在以下情况下工作：</p>
<ol>
<li>可以看到列表搜索栏或菜单。您可以直接在文件对话框中使用这些热键，因为默认情况下可以看到列表搜索栏。</li>
<li>或者在列表选项 - <em>当前应用程序的应用程序</em>设置中选中“启用列表热键”设置。默认情况下会对Windows资源管理器进行检查，因此您可以直接在资源管理器中使用这些热键，而无需先激活Listary。</li>
</ol>
<ul>
<li>Ctrl + G：让文件对话框导航到资源管理器中的当前文件夹。</li>
<li>Ctrl + Shift + C：将Explorer中所选文件的路径复制到剪贴板。</li>
<li>Ctrl + Shift + R：打开当前文件夹的命令提示符。</li>
<li>Ctrl + Shift + X：显示/隐藏文件扩展名。</li>
<li>Ctrl + Shift + H：显示/隐藏隐藏文件。</li>
<li>Ctrl + Shift + O：让文件对话框在资源管理器中打开所选文件。</li>
<li>Ctrl + Shift + E：为当前文件夹打开一个新的资源管理器窗口。</li>
</ul>
<p>您可以在列表选项 - 菜单 - 命令中更改这些热键（从下拉菜单中选择它）。</p>
<ul>
<li><strong>动作热键</strong></li>
</ul>
<p>后<strong>选择一个搜索结果</strong>中Listary，您可以使用以下热键：</p>
<ul>
<li>Ctrl + Enter：打开此搜索结果的父文件夹。</li>
<li>Ctrl + Shift + C：将此搜索结果的路径复制到剪贴板。</li>
<li>Ctrl + C：将此搜索结果复制到剪贴板（文件格式）。</li>
<li>Alt + S：打开<em>发送</em>到此结果的菜单。</li>
<li>Alt + O：打开“ <em>打开”，</em>显示此结果的菜单。</li>
</ul>
<p>您可以在列表选项 - 操作中更改它们。</p>
<p>而这仅仅是一个开始……</p>
<p>Listary包含一个强大的功能集，可以让您的工作生活变得如此轻松，</p>
<p>您将为自己浪费这么多时间而努力！</p>
<p>停止浪费时间一劳永逸地</p>
<p>消除工作流中断</p>
<h1 id="掌控资源管理器和电源应用程序"><a href="#掌控资源管理器和电源应用程序" class="headerlink" title="掌控资源管理器和电源应用程序"></a>掌控资源管理器和电源应用程序</h1><h3 id="所以你可以回到"><a href="#所以你可以回到" class="headerlink" title="所以你可以回到"></a>所以你可以回到</h3><h3 id="快速完成工作的重要任务！"><a href="#快速完成工作的重要任务！" class="headerlink" title="快速完成工作的重要任务！"></a>快速完成工作的重要任务！</h3>]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>电脑使用技巧</tag>
        <tag>quick eye</tag>
        <tag>quick look</tag>
        <tag>listary</tag>
        <tag>search</tag>
        <tag>搜索软件</tag>
      </tags>
  </entry>
  <entry>
    <title>RNA-seq全流程数据分析精简版</title>
    <url>/2019/12/17/Project_RNA_seq_SRP219564/</url>
    <content><![CDATA[<h4 id="step1-下载数据"><a href="#step1-下载数据" class="headerlink" title="step1 下载数据"></a>step1 下载数据</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#####可以使用循环下载</span></span></span><br><span class="line">cat SRR_Acc_List.txt |  while read id; do (nohup prefetch $&#123;id&#125; -O ./original_data 1&gt;log.txt 2&gt;&amp;1 &amp;) ;done</span><br></pre></td></tr></table></figure>

<h4 id="step2-sra2fastq"><a href="#step2-sra2fastq" class="headerlink" title="step2 sra2fastq"></a>step2 sra2fastq</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 处理SRP219564</span></span></span><br><span class="line"></span><br><span class="line">cd ~/project/SRP219564/</span><br><span class="line">cat SraRunTable.txt |awk '&#123;print $12,$14&#125;'|sed '1d'  &gt;sra2case.txt</span><br><span class="line">cd ~/project/SRP219564/original_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim multi_sra2fastq.sh</span><br><span class="line"></span><br><span class="line">cat ../sra2case.txt | while read id;</span><br><span class="line">do 	</span><br><span class="line">	arr=($id)</span><br><span class="line">	file=$&#123;arr[0]&#125;</span><br><span class="line">	sample=$&#123;arr[1]&#125;</span><br><span class="line">	sra=$&#123;file&#125;.sra</span><br><span class="line">	nohup fastq-dump --gzip --split-3 -O ../fastq/ $&#123;sra&#125; 1&gt;log.txt 2&gt;&amp;1 &amp;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">bash multi_sra2fastq.sh</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="step3-trim-galore"><a href="#step3-trim-galore" class="headerlink" title="step3 trim_galore"></a>step3 trim_galore</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/project/SRP219564/3.clean</span><br><span class="line">cd ~/project/SRP219564/fastq</span><br><span class="line">vim trim_galore.sh</span><br><span class="line"></span><br><span class="line">cat $1 | while read id; </span><br><span class="line">do</span><br><span class="line">	arr=($id)</span><br><span class="line">	sample_id=$&#123;arr[0]&#125;</span><br><span class="line">	fq1=$&#123;sample_id&#125;_1.fastq.gz    </span><br><span class="line">	fq2=$&#123;sample_id&#125;_2.fastq.gz    </span><br><span class="line">	nohup trim_galore  --paired -q 28 --phred33 --length 30 --stringency 3 --gzip -o ../3.clean  $fq1  $fq2 &gt;&gt; trimgalore.log 2&gt;&amp;1 &amp;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">bash trim_galore.sh ../sra2case.txt</span><br></pre></td></tr></table></figure>









<h4 id="step4-下载NCBI参考基因组"><a href="#step4-下载NCBI参考基因组" class="headerlink" title="step4 下载NCBI参考基因组"></a>step4 下载NCBI参考基因组</h4><p><a href="https://ftp.ncbi.nlm.nih.gov/genomes/genbank/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/" target="_blank" rel="noopener">https://ftp.ncbi.nlm.nih.gov/genomes/genbank/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/</a></p>
<p><img src="/2019/12/17/Project_RNA_seq_SRP219564/1567921966164.png" alt="1567921966164"></p>
<h5 id="构建索引"><a href="#构建索引" class="headerlink" title="构建索引"></a>构建索引</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先解压</span></span><br><span class="line">gzip -d GCA_000001405.15_GRCh38_full_analysis_set.fna.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nohup hisat2-build -p 11 ~/my_disk/reference/NCBI/GCA/GCA_000001405.15_GRCh38_full_analysis_set.fna ~/my_disk/reference/NCBI/GCA/index/hisat2/hg38 &amp;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>构建索引的时候回反复退出，多次运行同一个代码，可以完成构建。</p>
</blockquote>
<p>或者下载索引文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup wget ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/GCA_000001405.15_GRCh38_full_analysis_set.fna.hisat2_index.tar.gz &amp;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>windows 容易下载失败，但linux 就可以解决这个问题</p>
</blockquote>
<p><img src="/2019/12/17/Project_RNA_seq_SRP219564/1567929925567.png" alt="1567929925567"></p>
<h4 id="step5-mapping"><a href="#step5-mapping" class="headerlink" title="step5 mapping"></a>step5 mapping</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/project/SRP219564/3.clean</span><br><span class="line"></span><br><span class="line">vim NCBI_mapping.sh</span><br><span class="line"></span><br><span class="line">cat $1 |while read id</span><br><span class="line">do</span><br><span class="line">	arr=($id)</span><br><span class="line">	file=$&#123;arr[0]&#125;</span><br><span class="line">	sample=$&#123;arr[1]&#125;</span><br><span class="line">	fq1=$&#123;file&#125;_1_val_1.fq.gz         </span><br><span class="line">	fq2=$&#123;file&#125;_2_val_2.fq.gz </span><br><span class="line"><span class="meta">	#</span><span class="bash"> fq1=<span class="variable">$&#123;id&#125;</span>.read1_val_1.fq.gz         </span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> fq2=<span class="variable">$&#123;id&#125;</span>.read2_val_2.fq.gz</span></span><br><span class="line">	ref='~/my_disk/reference/NCBI/GCA/index/hisat2/GCA_000001405.15_GRCh38_full_analysis_set'</span><br><span class="line">	hisat2 -p 8 -x $ref \</span><br><span class="line">	-1 $fq1 \</span><br><span class="line">	-2 $fq2 2&gt;$&#123;file&#125;.log \</span><br><span class="line">	| samtools sort -@ 4 -m 3G  -o ../4.align/$&#123;sample&#125;.bam - 1&gt;$&#123;sample&#125;_bam.log</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">nohup bash NCBI_mapping.sh ../sra2case.txt &amp;</span><br></pre></td></tr></table></figure>



<h4 id="step6-Featurecounts"><a href="#step6-Featurecounts" class="headerlink" title="step6 Featurecounts"></a>step6 Featurecounts</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/project/SRP219564/</span><br><span class="line"></span><br><span class="line">mkdir ~/project/SRP219564/featurecounts</span><br><span class="line"></span><br><span class="line">vim ncbi_feature_counts.sh</span><br><span class="line"></span><br><span class="line">cat $1 |while read id</span><br><span class="line">do</span><br><span class="line">	arr=($id)</span><br><span class="line">	file=$&#123;arr[0]&#125;</span><br><span class="line">	sample=$&#123;arr[1]&#125;</span><br><span class="line">	featureCounts -T 11 -p -t exon -g gene \</span><br><span class="line">	-a ~/my_disk/reference/NCBI/GCA/GCA_000001405.15_GRCh38_full_analysis_set.refseq_annotation.gff.gz \</span><br><span class="line">	-o ../featurecounts/$&#123;sample&#125;.counts.txt \</span><br><span class="line">	./$&#123;sample&#125;.bam \</span><br><span class="line"><span class="meta">	2&gt;</span><span class="bash">./<span class="variable">$&#123;sample&#125;</span>.featurecounts.log</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">nohup bash ncbi_feature_counts.sh ../sra2case.txt &amp;</span><br></pre></td></tr></table></figure>





<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">vim expr_Counts.sh </span><br><span class="line">cat $1 |while read id</span><br><span class="line">do</span><br><span class="line">	arr=($id)</span><br><span class="line">	sample=$&#123;arr[1]&#125;</span><br><span class="line">	echo $id</span><br><span class="line">	cat $&#123;sample&#125;.counts.txt|cut -f 1,7 &gt; $&#123;sample&#125;.txt</span><br><span class="line">	echo 'OK'</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bash expr_Counts.sh ../sra2case.txt &amp;</span><br></pre></td></tr></table></figure>







<h4 id="last-step-整理好注释信息"><a href="#last-step-整理好注释信息" class="headerlink" title="last step: 整理好注释信息"></a>last step: 整理好注释信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcat GCA_000001405.15_GRCh38_full_analysis_set.refseq_annotation.gff.gz |grep -v '#'|cut -f 9|awk '/gene_biotype/&#123;print $0&#125;'|awk -F ';' '&#123;for(i=1;i&lt;=NF;i++)&#123;if($i ~/^gene_biotype=/)&#123;print $i&#125;&#125;&#125;' |awk -F '=' '&#123;print$2&#125;'  &gt;gene_type</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 找到有gene_biotype的行，并将这一行中的以gene_biotype=为开头的列找出来</span></span></span><br><span class="line">zcat GCA_000001405.15_GRCh38_full_analysis_set.refseq_annotation.gff.gz |grep -v '#'|cut -f 9|awk '/gene_biotype/&#123;print $0&#125;'|awk -F ';' '&#123;for(i=1;i&lt;=NF;i++)&#123;if($i ~/^gene=/)&#123;print $i&#125;&#125;&#125;' |awk -F '=' '&#123;print$2&#125;'  &gt;gene_name</span><br><span class="line">paste gene_name gene_type &gt;NCBI_ID_trans.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>awk 玩转NCBI下载下来的gff文件</p>
</blockquote>
<h3 id="ID-trans-ID-转换"><a href="#ID-trans-ID-转换" class="headerlink" title="ID_trans ID 转换"></a>ID_trans ID 转换</h3><h4 id="导入数据-运用lapply-和-do-call"><a href="#导入数据-运用lapply-和-do-call" class="headerlink" title="导入数据 运用lapply 和 do.call"></a>导入数据 运用lapply 和 do.call</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rm(list = ls())</span><br><span class="line">dir=<span class="string">'./Rdata/'</span></span><br><span class="line">options(stringsAsFactors = <span class="literal">F</span>)</span><br><span class="line"><span class="comment"># library(data.table) </span></span><br><span class="line">all_fiels=list.files(path = dir ,pattern=<span class="string">'*.txt$'</span>,recursive=<span class="literal">T</span>)</span><br><span class="line">cl = lapply(all_fiels, <span class="keyword">function</span>(x)&#123;</span><br><span class="line">              tmp &lt;- read.table(file = file.path(dir,x), comment.char=<span class="string">"#"</span>)[,<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line">              <span class="keyword">return</span>(tmp)</span><br><span class="line">            &#125;)</span><br><span class="line">expr&lt;- as.data.frame(t(do.call(cbind,cl)))</span><br><span class="line">expr[<span class="number">1</span>:<span class="number">10</span>,<span class="number">1</span>:<span class="number">20</span>]</span><br><span class="line">colnames(expr)&lt;- expr[<span class="number">1</span>,]</span><br><span class="line">expr&lt;- expr[seq(<span class="number">2</span>,nrow(expr),by = <span class="number">2</span>),]</span><br><span class="line">expr[<span class="number">1</span>:<span class="number">6</span>,<span class="number">1</span>:<span class="number">20</span>]</span><br><span class="line"><span class="keyword">library</span>(stringr)</span><br><span class="line"></span><br><span class="line">rownames(expr)&lt;- all_fiels</span><br><span class="line">expr&lt;- expr[,-<span class="number">1</span>]</span><br><span class="line">expr[<span class="number">1</span>:<span class="number">6</span>,<span class="number">1</span>:<span class="number">6</span>]</span><br><span class="line">class(expr)</span><br><span class="line">class(expr[<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">expr&lt;- apply(noquote(expr),<span class="number">2</span>,as.numeric)</span><br><span class="line">expr[<span class="number">1</span>:<span class="number">6</span>,<span class="number">1</span>:<span class="number">6</span>]</span><br><span class="line"><span class="comment"># 这里就把rownames 删除掉了，并且数据格式变为了matrix</span></span><br><span class="line"></span><br><span class="line">class(expr)</span><br><span class="line">expr&lt;- as.data.frame(t(expr))</span><br><span class="line">colnames(expr)&lt;- all_fiels</span><br><span class="line">save(expr,file = <span class="string">'./Rdata/expr.Rdata'</span>)</span><br></pre></td></tr></table></figure>





<h4 id="ID-转换"><a href="#ID-转换" class="headerlink" title="ID 转换"></a>ID 转换</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">##### 下面的代码是将gene_symbol 从ID_trans 这个文件转到expr</span></span><br><span class="line">rm(list=ls())</span><br><span class="line">load(file=<span class="string">'./Rdata/expr.Rdata'</span>)</span><br><span class="line">ID_trans &lt;- read.delim(<span class="string">"D:/annotation/ID_trans.txt"</span>, header=<span class="literal">FALSE</span>)</span><br><span class="line"><span class="keyword">library</span>(stringr)</span><br><span class="line">ENSG&lt;- str_split(ID_trans$V1,pattern = <span class="string">'ENSG'</span>, simplify = <span class="literal">T</span>)[,<span class="number">2</span>]</span><br><span class="line"><span class="comment"># ENSG&lt;- str_split(ENSG,pattern = '\\.', simplify = T)[,1]</span></span><br><span class="line">head(ENSG)</span><br><span class="line">ENSG&lt;- str_c(<span class="string">'ENSG'</span>,ENSG)</span><br><span class="line">ID&lt;- data.frame(ensg=ENSG,SYMBOL=ID_trans$V2)</span><br><span class="line"></span><br><span class="line">expr&lt;- expr[row.names(expr)%<span class="keyword">in</span>%ID$ensg,]</span><br><span class="line">ID&lt;- ID[ID$ensg%<span class="keyword">in</span>%row.names(expr),]</span><br><span class="line">ID&lt;- ID[match(row.names(expr),ID$ensg),]</span><br><span class="line">match(ID$ensg,row.names(expr))</span><br><span class="line">expr&lt;- cbind(ID,expr)</span><br><span class="line">expr[<span class="number">1</span>:<span class="number">6</span>,<span class="number">1</span>:<span class="number">6</span>]</span><br><span class="line">expr$SYMBOL&lt;- str_split(expr$SYMBOL,pattern = <span class="string">'\\-'</span>, simplify = <span class="literal">T</span>)[,<span class="number">1</span>]</span><br><span class="line">expr&lt;- expr[,-c(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 实在是不会基础代码，下方的代码我也没有能力理解，所以，我这里将行号看做是probe_id 然后expr$SYMBOL看做是symbol</span></span><br><span class="line">probe_id&lt;- as.character(<span class="number">1</span>:nrow(expr))</span><br><span class="line">ids&lt;- data.frame(probe_id=probe_id,symbol=expr[,<span class="number">1</span>])</span><br><span class="line">expr&lt;- expr[,-<span class="number">1</span>]</span><br><span class="line">exprSet&lt;- expr</span><br><span class="line">exprSet[<span class="number">1</span>:<span class="number">6</span>,<span class="number">1</span>:<span class="number">6</span>]</span><br><span class="line">row.names(exprSet)&lt;-  as.character(<span class="number">1</span>:nrow(exprSet))</span><br><span class="line">exprSet&lt;- as.data.frame(exprSet)</span><br><span class="line"></span><br><span class="line">str(ids)</span><br><span class="line">str(rownames(exprSet))</span><br><span class="line">match(rownames(exprSet),ids$probe_id)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 下面这些话是理解这个by 函数具体做了什么</span></span><br><span class="line"><span class="comment"># exprSet[ids[,2]=='A2M',]</span></span><br><span class="line"><span class="comment"># x= exprSet[ids[,2]=='A2M',]</span></span><br><span class="line"><span class="comment"># row.names(x)</span></span><br><span class="line"><span class="comment"># rowMeans(x)</span></span><br><span class="line"><span class="comment"># which.max(rowMeans(x))</span></span><br><span class="line"><span class="comment"># 按照ids 分类</span></span><br><span class="line"><span class="comment"># by是分类汇总，这步求的是基因表达量的均值</span></span><br><span class="line">tmp= by(exprSet,ids$symbol,<span class="keyword">function</span>(x)rownames(x)[which.max(rowMeans(x))])</span><br><span class="line">probes&lt;- as.character(tmp)</span><br><span class="line">dim(exprSet)</span><br><span class="line">exprSet= exprSet[rownames(exprSet)%<span class="keyword">in</span>%probes,]</span><br><span class="line">dim(exprSet)</span><br><span class="line">exprSet$probe_id&lt;- row.names(exprSet)</span><br><span class="line">new_exprSet&lt;- merge(ids,exprSet,by=<span class="string">'probe_id'</span>)</span><br><span class="line">rownames(new_exprSet)&lt;- new_exprSet[,<span class="number">2</span>]</span><br><span class="line">new_exprSet[<span class="number">1</span>:<span class="number">8</span>,<span class="number">1</span>:<span class="number">8</span>]</span><br><span class="line">new_exprSet&lt;- new_exprSet[,-c(<span class="number">1</span>,<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 去掉sample2 和 sample3 表达量为0 的gene</span></span><br><span class="line">tmp&lt;- new_exprSet[rowMeans(new_exprSet)&gt;<span class="number">10</span>,]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">save(tmp,new_exprSet,file = <span class="string">'./Rdata/step0_idtransed.Rdata'</span>)</span><br></pre></td></tr></table></figure>





<p>DEGs 如果只有两个sample 没法做统计</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">### ---------------</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### Firstly run DESeq2 </span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### ---------------</span></span><br><span class="line">load(file = <span class="string">'./Rdata/step0_idtransed.Rdata'</span>)</span><br><span class="line">exprSet&lt;- new_exprSet</span><br><span class="line">group_list&lt;- c(<span class="string">"control1"</span>,<span class="string">"control1"</span>,<span class="string">"control2"</span>,<span class="string">"control2"</span>,<span class="string">"resistance"</span>,<span class="string">"resistance"</span>)</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">T</span>)&#123;</span><br><span class="line">  <span class="keyword">library</span>(DESeq2)</span><br><span class="line">  </span><br><span class="line">  (colData &lt;- data.frame(row.names=colnames(exprSet), </span><br><span class="line">                         group_list=group_list) )</span><br><span class="line">  dds &lt;- DESeqDataSetFromMatrix(countData = exprSet,</span><br><span class="line">                                colData = colData,</span><br><span class="line">                                design = ~ group_list)</span><br><span class="line">  dds &lt;- DESeq(dds)</span><br><span class="line">  resultsNames(dds)</span><br><span class="line">  <span class="comment"># save(dds,file = './Rdata/tmp_f')</span></span><br><span class="line">  <span class="comment"># load(file = './Rdata/tmp_f')</span></span><br><span class="line">  res1 &lt;- results(dds, </span><br><span class="line">                 contrast=c(<span class="string">"group_list"</span>,<span class="string">"control1"</span>,<span class="string">"resistance"</span>))</span><br><span class="line">  res2 &lt;- results(dds, </span><br><span class="line">                 contrast=c(<span class="string">"group_list"</span>,<span class="string">"control2"</span>,<span class="string">"resistance"</span>))</span><br><span class="line"><span class="comment">##############</span></span><br><span class="line"><span class="comment">##  </span></span><br><span class="line"><span class="comment">#请在此处调整分组信息</span></span><br><span class="line"><span class="comment">## </span></span><br><span class="line"><span class="comment">##############</span></span><br><span class="line">  res&lt;- res1</span><br><span class="line">  resOrdered &lt;- res[order(res$padj),]</span><br><span class="line">  head(resOrdered)</span><br><span class="line">  DEG =as.data.frame(resOrdered)</span><br><span class="line">  DESeq2_DEG = na.omit(DEG)</span><br><span class="line">  </span><br><span class="line">  nrDEG=DESeq2_DEG[,c(<span class="number">2</span>,<span class="number">6</span>)]</span><br><span class="line">  colnames(nrDEG)=c(<span class="string">'log2FoldChange'</span>,<span class="string">'pvalue'</span>)  </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="作图"><a href="#作图" class="headerlink" title="作图"></a>作图</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">draw_h_v &lt;- <span class="keyword">function</span>(exprSet,need_DEG,n=<span class="string">'DEseq2'</span>,group_list,logFC_cutoff)&#123;</span><br><span class="line">  <span class="comment">## we only need two columns of DEG, which are log2FoldChange and pvalue</span></span><br><span class="line">  <span class="comment">## heatmap</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">library</span>(pheatmap)</span><br><span class="line">  choose_gene=head(rownames(need_DEG),<span class="number">50</span>) <span class="comment">## 50 maybe better</span></span><br><span class="line">  choose_matrix=exprSet[choose_gene,]</span><br><span class="line">  choose_matrix[<span class="number">1</span>:<span class="number">4</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">  choose_matrix=t(scale(t(log2(choose_matrix+<span class="number">1</span>)))) </span><br><span class="line">  <span class="comment">## http://www.bio-info-trainee.com/1980.html</span></span><br><span class="line">  annotation_col = data.frame( group_list=group_list  )</span><br><span class="line">  rownames(annotation_col)=colnames(exprSet)</span><br><span class="line">  pheatmap(choose_matrix,show_colnames = <span class="literal">F</span>,annotation_col = annotation_col,</span><br><span class="line">           filename = paste0(n,<span class="string">'_need_DEG_top50_heatmap.png'</span>))</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">library</span>(ggfortify)</span><br><span class="line">  df=as.data.frame(t(choose_matrix))</span><br><span class="line">  df$group=group_list</span><br><span class="line">  png(paste0(n,<span class="string">'_DEG_top50_pca.png'</span>),res=<span class="number">120</span>)</span><br><span class="line">  p=autoplot(prcomp( df[,<span class="number">1</span>:(ncol(df)-<span class="number">1</span>)] ), data=df,colour = <span class="string">'group'</span>)+theme_bw()</span><br><span class="line">  print(p)</span><br><span class="line">  dev.off()</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(! logFC_cutoff)&#123;</span><br><span class="line">    logFC_cutoff &lt;- with(need_DEG,mean(abs( log2FoldChange)) + <span class="number">2</span>*sd(abs( log2FoldChange)) )</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># logFC_cutoff=1</span></span><br><span class="line">  </span><br><span class="line">  need_DEG$change = as.factor(ifelse(need_DEG$pvalue &lt; <span class="number">0.05</span> &amp; abs(need_DEG$log2FoldChange) &gt; logFC_cutoff,</span><br><span class="line">                                     ifelse(need_DEG$log2FoldChange &gt; logFC_cutoff ,<span class="string">'UP'</span>,<span class="string">'DOWN'</span>),<span class="string">'NOT'</span>)</span><br><span class="line">  )</span><br><span class="line">  this_tile &lt;- paste0(<span class="string">'Cutoff for logFC is '</span>,round(logFC_cutoff,<span class="number">3</span>),</span><br><span class="line">                      <span class="string">'\nThe number of up gene is '</span>,nrow(need_DEG[need_DEG$change ==<span class="string">'UP'</span>,]) ,</span><br><span class="line">                      <span class="string">'\nThe number of down gene is '</span>,nrow(need_DEG[need_DEG$change ==<span class="string">'DOWN'</span>,])</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">library</span>(ggplot2)</span><br><span class="line">  g = ggplot(data=need_DEG, </span><br><span class="line">             aes(x=log2FoldChange, y=-log10(pvalue), </span><br><span class="line">                 color=change)) +</span><br><span class="line">    geom_point(alpha=<span class="number">0.4</span>, size=<span class="number">1.75</span>) +</span><br><span class="line">    theme_set(theme_set(theme_bw(base_size=<span class="number">20</span>)))+</span><br><span class="line">    xlab(<span class="string">"log2 fold change"</span>) + ylab(<span class="string">"-log10 p-value"</span>) +</span><br><span class="line">    ggtitle( this_tile ) + theme(plot.title = element_text(size=<span class="number">15</span>,hjust = <span class="number">0.5</span>))+</span><br><span class="line">    scale_colour_manual(values = c(<span class="string">'blue'</span>,<span class="string">'black'</span>,<span class="string">'red'</span>)) <span class="comment">## corresponding to the levels(res$change)</span></span><br><span class="line">  print(g)</span><br><span class="line">  ggsave(g,filename = paste0(n,<span class="string">'_volcano.png'</span>))</span><br><span class="line">  dev.off()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> draw_h_v(exprSet,nrDEG,<span class="string">'DEseq2'</span>,group_list,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>RNA-seq</category>
        <category>project</category>
      </categories>
      <tags>
        <tag>RNA-seq</tag>
        <tag>NCBI数据下载</tag>
        <tag>featurecount</tag>
      </tags>
  </entry>
  <entry>
    <title>肿瘤临床相关性分析</title>
    <url>/2019/12/02/clinical_relevent_analysis/</url>
    <content><![CDATA[<h2 id="基因于肿瘤TNM分期相关性（包括四个表卡方检验-annovar检验或t-检验）"><a href="#基因于肿瘤TNM分期相关性（包括四个表卡方检验-annovar检验或t-检验）" class="headerlink" title="基因于肿瘤TNM分期相关性（包括四个表卡方检验+annovar检验或t-检验）"></a>基因于肿瘤TNM分期相关性（包括四个表卡方检验+annovar检验或t-检验）</h2><a id="more"></a>

<h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><h4 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">phe_table&lt;- table(phe$Sex,phe$`N stage`)</span><br><span class="line">phe_table</span><br><span class="line">chisq.test(phe_table)</span><br><span class="line">fisher.test(phe_table)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/12/02/clinical_relevent_analysis/1575530397574.png" alt="1575530397574"></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">##### 卡方检验 N 相关</span></span><br><span class="line">rm(list = ls())</span><br><span class="line">load(file = <span class="string">'./Rdata/!step0_cleaned_cancer_sample.Rdata'</span>)</span><br><span class="line"><span class="comment"># gene_name&lt;- c('GPD1L')</span></span><br><span class="line">gene_name&lt;- c(<span class="string">'GPD1L'</span>)</span><br><span class="line">match(colnames(exprSet),phe$GSM_ID)</span><br><span class="line">phe$N_stage&lt;- factor(phe$`N stage`)</span><br><span class="line">phe$N_stage&lt;- ifelse(phe$N_stage==<span class="string">'N0'</span>,<span class="string">'N+'</span>,<span class="string">'N0'</span>)</span><br><span class="line">phe$group=ifelse(exprSet[gene_name,]&gt;quantile(exprSet[gene_name,],<span class="number">0.5</span>),<span class="string">'high'</span>,<span class="string">'low'</span>)</span><br><span class="line">phe_table&lt;- table(phe$N_stage,phe$group)</span><br><span class="line">phe_table</span><br><span class="line">chisq.test(phe_table)</span><br><span class="line">fisher.test(phe_table)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/12/02/clinical_relevent_analysis/13817032-be725d3c7fa64b69.webp" alt="img"></p>
<p>N0 vs N+ 表达量的卡方检验</p>
<h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#######################################  整理数据</span></span><br><span class="line">rm(list = ls())</span><br><span class="line">load(file = <span class="string">'./Rdata/!step0_cleaned_cancer_sample.Rdata'</span>)</span><br><span class="line"></span><br><span class="line">exprSet[<span class="number">1</span>:<span class="number">4</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">gene_name&lt;- c(<span class="string">'SPP1'</span>)</span><br><span class="line"><span class="keyword">library</span>(ggpubr)</span><br><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(reshape2)</span><br><span class="line">gene_expression&lt;- as.data.frame(exprSet[gene_name,])</span><br><span class="line">names(gene_expression)&lt;- gene_name</span><br><span class="line">match(colnames(exprSet),phe$GSM_ID)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gene_expression$group&lt;- factor(phe$`T stage`)</span></span><br><span class="line"><span class="comment"># gene_expression$group&lt;- ifelse(gene_expression$group== 'T1'|gene_expression$group=='T2','T1-2','T3-4')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gene_expression$group&lt;- factor(phe$`N stage`)</span><br><span class="line"><span class="comment"># gene_expression$group&lt;- ifelse(gene_expression$group!='N0','N+','N0')</span></span><br><span class="line"><span class="comment"># gene_expression$samlple&lt;- rownames(gene_expression)</span></span><br><span class="line">exprSet_L&lt;- melt(gene_expression,id.vars = c(<span class="string">'group'</span>))</span><br><span class="line">names(exprSet_L)[<span class="number">2</span>]&lt;- c(<span class="string">'sample'</span>)</span><br><span class="line">p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_boxplot()+ </span><br><span class="line">  stat_compare_means(method = <span class="string">"aov"</span>,label=<span class="string">"p.signif"</span>)</span><br><span class="line">print(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ggsave('./figure/ggplot_boxplot_T.pdf',p,width = 40, height = 20, units = "cm")</span></span><br><span class="line"><span class="comment"># ggsave('./figure/ggplot_boxplot_N.pdf',p,width = 40, height = 20, units = "cm")</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>临床相关性</tag>
        <tag>R</tag>
        <tag>四个表检验</tag>
        <tag>卡方检验</tag>
        <tag>annovar检验</tag>
        <tag>t检验</tag>
      </tags>
  </entry>
  <entry>
    <title>vcf_filter工具之一vcftools</title>
    <url>/2019/11/23/Vcftools/</url>
    <content><![CDATA[<h2 id="Vcftools"><a href="#Vcftools" class="headerlink" title="Vcftools"></a>Vcftools</h2><p>帮助文档的examples：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># EXAMPLES</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Output allele frequency <span class="keyword">for</span> all sites <span class="keyword">in</span> the input vcf file from chromosome 1</span></span><br><span class="line">vcftools --gzvcf input_file.vcf.gz --freq --chr 1 --out chr1_analysis</span><br><span class="line"><span class="meta">#</span><span class="bash"> Output a new vcf file from the input vcf file that removes any indel sites</span></span><br><span class="line">vcftools --vcf input_file.vcf --remove-indels --recode --recode-INFO-all --out SNPs_only</span><br><span class="line"><span class="meta">#</span><span class="bash"> Output file comparing the sites <span class="keyword">in</span> two vcf files</span></span><br><span class="line">vcftools --gzvcf input_file1.vcf.gz --gzdiff input_file2.vcf.gz --diff-site --out in1_v_in2</span><br><span class="line"><span class="meta">#</span><span class="bash"> Output a new vcf file to standard out without any sites that have a filter tag, <span class="keyword">then</span> compress it with gzip</span></span><br><span class="line">vcftools --gzvcf input_file.vcf.gz --remove-filtered-all --recode --stdout | gzip -c &gt; output_PASS_only.vcf.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> Output a Hardy-Weinberg p-value <span class="keyword">for</span> every site <span class="keyword">in</span> the bcf file that does not have any missing genotypes</span></span><br><span class="line">vcftools --bcf input_file.bcf --hardy --max-missing 1.0 --out output_noMissing</span><br><span class="line"><span class="meta">#</span><span class="bash"> Output nucleotide diversity at a list of positions</span></span><br><span class="line">zcat input_file.vcf.gz | vcftools --vcf - --site-pi --positions SNP_list.txt --out nucleotide_diversity</span><br></pre></td></tr></table></figure>

<blockquote>
<p>能理解这几句很重要,90%的内容就都可以理解了。</p>
</blockquote>
<p><a href="https://vcftools.github.io/man_latest.html" target="_blank" rel="noopener">vcftools官方帮助文档</a></p>
<a id="more"></a>



<h4 id="下载vcftools"><a href="#下载vcftools" class="headerlink" title="下载vcftools"></a>下载vcftools</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install vcftools</span><br></pre></td></tr></table></figure>



<h4 id="查看VCF文件"><a href="#查看VCF文件" class="headerlink" title="查看VCF文件"></a>查看VCF文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ABC.raw.vcf |grep -v '##' |head -50</span><br><span class="line"><span class="meta">#</span><span class="bash"> DP</span></span><br><span class="line">grep -v '#' ABC.raw.vcf |cut -f 8|cut -d ';' -f 3|head -10</span><br><span class="line">grep -v '#' ABC.raw.vcf |cut -f 8|cut -d ';' -f 6|head -10</span><br><span class="line"><span class="meta">#</span><span class="bash"> QUAL</span></span><br><span class="line">grep -v '#' ABC.raw.vcf |cut -f 8|cut -d ';' -f 12|head -10</span><br><span class="line">grep -v '#' XXX.raw.vcf |cut -f 8|head -10| grep 'insertion'</span><br></pre></td></tr></table></figure>



<h4 id="平均测序深度"><a href="#平均测序深度" class="headerlink" title="平均测序深度"></a>平均测序深度</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools --vcf ABC.raw.vcf --depth  -c </span><br><span class="line">vcftools --vcf 卜金波_P14592_BC_1.raw.vcf --depth  -c</span><br></pre></td></tr></table></figure>



<h4 id="等位基因频率"><a href="#等位基因频率" class="headerlink" title="等位基因频率"></a>等位基因频率</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools --vcf ABC.raw.vcf --freq --out output</span><br></pre></td></tr></table></figure>



<h4 id="Indel-or-SNP"><a href="#Indel-or-SNP" class="headerlink" title="Indel or SNP"></a>Indel or SNP</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools --vcf ABC.raw.vcf --remove-indels --recode --recode-INFO-all --out SNPs_only</span><br><span class="line">vcftools --vcf SNPs_only.recode.vcf --depth  -c </span><br><span class="line"></span><br><span class="line">vcftools --vcf ABC.raw.vcf --keep-only-indels --recode --recode-INFO-all --out indel_only</span><br><span class="line">vcftools --vcf indel_only.recode.vcf --depth  -c</span><br></pre></td></tr></table></figure>



<h4 id="Output-file-comparing-the-sites-in-two-vcf-files"><a href="#Output-file-comparing-the-sites-in-two-vcf-files" class="headerlink" title="Output file comparing the sites in two vcf files"></a>Output file comparing the sites in two vcf files</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools --vcf XXX.raw.vcf --diff XXX_P14592_BC_1.raw.vcf --diff-site --out XXX_P14592_FFG_1_vs_XXX_P14592_BC_1</span><br><span class="line"></span><br><span class="line">cat XXX_P14592_FFG_1_vs_XXX_P14592_BC_1.diff.sites_in_files|head -20</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/23/Vcftools/1574426850037.png" alt="1574426850037"></p>
<h4 id="实战二"><a href="#实战二" class="headerlink" title="实战二"></a>实战二</h4><p>tumor vs normal 匹配的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools --vcf P174635_LN_filter.vcf --depth  -c</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/23/Vcftools/1574426951485.png" alt="1574426951485"></p>
<blockquote>
<p>同样的语句，可以计算出两个样本独立的测序深度</p>
</blockquote>
<p>GATK 后用这种方式去筛选</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat $1|while read id</span><br><span class="line">do    </span><br><span class="line">	arr=($&#123;id&#125;)    </span><br><span class="line">	T=$&#123;arr[1]&#125;</span><br><span class="line">	N=$&#123;arr[0]&#125; </span><br><span class="line"><span class="meta">	#</span><span class="bash"> [sample=$(basename <span class="string">"<span class="variable">$T</span>"</span> .sort.bam_bqsr.bam)</span></span><br><span class="line">	sample=$&#123;arr[2]&#125;</span><br><span class="line">	</span><br><span class="line">	gatk SelectVariants \</span><br><span class="line">	-select-type SNP \</span><br><span class="line">	-V $&#123;sample&#125;_filter.vcf  \</span><br><span class="line">	-O $&#123;sample&#125;_filter.snp.vcf</span><br><span class="line">	</span><br><span class="line">	gatk SelectVariants \</span><br><span class="line">	-select-type INDEL \</span><br><span class="line">	-V $&#123;sample&#125;_filter.vcf  \</span><br><span class="line">	-O $&#123;sample&#125;_filter.indel.vcf</span><br><span class="line">	</span><br><span class="line">	gatk VariantFiltration \</span><br><span class="line">	-V $&#123;sample&#125;_filter.snp.vcf \</span><br><span class="line">	--filter-expression "CONTQ&lt;93 || DP &lt; 300 " \</span><br><span class="line">	--filter-name "yuqiao_PASS" \</span><br><span class="line">	-G-filter "AF &lt; 0.02" \</span><br><span class="line">	-G-filter-name "AF_low" \</span><br><span class="line">	-O $&#123;sample&#125;_filter.snp.filter.vcf</span><br><span class="line"></span><br><span class="line">	gatk VariantFiltration \</span><br><span class="line">	-V $&#123;sample&#125;_filter.indel.vcf \</span><br><span class="line">	--filter-expression "CONTQ&lt;93  || DP &lt; 300 " \</span><br><span class="line">	--filter-name "yuqiao_PASS" \</span><br><span class="line">	-G-filter "AF &lt; 0.02" \</span><br><span class="line">	-G-filter-name "AF_low" \</span><br><span class="line">	-O $&#123;sample&#125;_filter.indel.filter.vcf</span><br><span class="line">	</span><br><span class="line">	gatk MergeVcfs       \</span><br><span class="line">	-I $&#123;sample&#125;_filter.snp.filter.vcf \</span><br><span class="line">	-I $&#123;sample&#125;_filter.indel.filter.vcf \</span><br><span class="line">	-O $&#123;sample&#125;_filter.pass.vcf</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/23/Vcftools/1574473851897.png" alt="1574473851897"></p>
<blockquote>
<p>通过有效的帅选就会得到如上的结果，如果gatk variantfilteration 筛选无效，这不会上述的结果，filter那一栏仍然会是只有PASS</p>
</blockquote>
<blockquote>
<p>帮助文档</p>
</blockquote>
<p><img src="/2019/11/23/Vcftools/1574474920413.png" alt="1574474920413"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat P174635_LN_filter.pass.vcf|grep -v '##' |head -10</span><br><span class="line">vcftools --vcf P174635_LN_filter.pass.vcf --remove-filtered yuqiao_PASS --recode  --out tmp</span><br><span class="line">vcftools --vcf P174635_LN_filter.pass.vcf --keep-filtered yuqiao_PASS --recode --out tmp</span><br><span class="line"><span class="meta">#</span><span class="bash"> vcftools --vcf P174635_LN_filter.pass.vcf --remove-filtered-all --recode --out tmp </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果都收PASS这种默认字样就可以使用--remove-filtered-all</span></span><br><span class="line">cat tmp.recode.vcf|grep -v '##' |head -10</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/23/Vcftools/1574474215684.png" alt="1574474215684"></p>
<p><img src="/2019/11/23/Vcftools/1574474620966.png" alt="1574474620966"></p>
<blockquote>
<p>–recode 也很重要，不然不会出现结果。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools --vcf P174635_LN_filter.pass.vcf --min-meanDP 300 --recode-INFO-all --recode --out tmp</span><br><span class="line"></span><br><span class="line">cat tmp.recode.vcf|grep -v '##' |head -10</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/23/Vcftools/1574475354566.png" alt="1574475354566"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools --vcf P174635_LN_filter.pass.vcf --min-meanDP 300 --recode-INFO CONTQ --recode --out tmp</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然我也可以只保留INFO中的一列</p>
</blockquote>
<p><img src="/2019/11/23/Vcftools/1574475423079.png" alt="1574475423079"></p>
<p>按照AF 进行刷选</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools --vcf P174635_LN_filter.pass.vcf --min-meanDP 300 --recode-INFO-all --recode --out tmp</span><br></pre></td></tr></table></figure>





<p><img src="/2019/11/23/Vcftools/1574477639094.png" alt="1574477639094"></p>
<blockquote>
<p>备注:</p>
<p>–maf 最小等位基因频率 minor allele frequency</p>
<p>–max-maf 最大等位基因频率</p>
<p>–mac 最小等位基因minor allele counts</p>
<p>–max-mac  最大等位基因counts</p>
<p>–min-alleles </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools --vcf P174635_LN_filter.pass.vcf --maf 0.05 --recode-INFO-all --recode --out tmp</span><br><span class="line">vcftools --vcf P174635_LN_filter.pass.vcf --maf 0.05 --recode --out tmp</span><br><span class="line"></span><br><span class="line">vcftools --vcf P174635_LN_filter.pass.vcf --non-ref-af-any 0.05 --recode-INFO-all --recode --out tmp</span><br><span class="line">cat tmp.recode.vcf|grep -v '##' |head -10</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最小等位基因频率0.05</p>
</blockquote>
<h4 id="筛选很多都是自己编写程序做的，很多开源的工具通用型没那么好。所以，我觉得这时候可能需要我自己写一些代码解决我的时间需要"><a href="#筛选很多都是自己编写程序做的，很多开源的工具通用型没那么好。所以，我觉得这时候可能需要我自己写一些代码解决我的时间需要" class="headerlink" title="筛选很多都是自己编写程序做的，很多开源的工具通用型没那么好。所以，我觉得这时候可能需要我自己写一些代码解决我的时间需要"></a>筛选很多都是自己编写程序做的，很多开源的工具通用型没那么好。所以，我觉得这时候可能需要我自己写一些代码解决我的时间需要</h4><h1 id="VCFtools-官方帮助文档"><a href="#VCFtools-官方帮助文档" class="headerlink" title="VCFtools 官方帮助文档"></a>VCFtools 官方帮助文档</h1><h2 id="NAME"><a href="#NAME" class="headerlink" title="NAME"></a>NAME</h2><p>vcftools v0.1.16 − Utilities for the variant call format (VCF) and binary variant call format (BCF)</p>
<h2 id="SYNOPSIS"><a href="#SYNOPSIS" class="headerlink" title="SYNOPSIS"></a>SYNOPSIS</h2><p><strong>vcftools</strong> [ <strong>–vcf</strong> FILE | <strong>–gzvcf</strong> FILE | <strong>–bcf</strong> FILE] [ <strong>–out</strong> OUTPUT PREFIX ] [ FILTERING OPTIONS ] [ OUTPUT OPTIONS ]</p>
<h2 id="DESCRIPTION"><a href="#DESCRIPTION" class="headerlink" title="DESCRIPTION"></a>DESCRIPTION</h2><p>vcftools is a suite of functions for use on genetic variation data in the form of VCF and BCF files. The tools provided will be used mainly to summarize data, run calculations on data, filter out data, and convert data into other useful file formats.</p>
<h2 id="EXAMPLES"><a href="#EXAMPLES" class="headerlink" title="EXAMPLES"></a>EXAMPLES</h2><p>Output allele frequency for all sites in the input vcf file from chromosome 1</p>
<p><strong>vcftools</strong> –gzvcf input_file.vcf.gz –freq –chr 1 –out chr1_analysis</p>
<p>Output a new vcf file from the input vcf file that removes any indel sites</p>
<p><strong>vcftools</strong> –vcf input_file.vcf –remove-indels –recode –recode-INFO-all –out SNPs_only</p>
<p>Output file comparing the sites in two vcf files</p>
<p><strong>vcftools</strong> –gzvcf input_file1.vcf.gz –gzdiff input_file2.vcf.gz –diff-site –out in1_v_in2</p>
<p>Output a new vcf file to standard out without any sites that have a filter tag, then compress it with gzip</p>
<p><strong>vcftools</strong> –gzvcf input_file.vcf.gz –remove-filtered-all –recode –stdout | gzip -c &gt; output_PASS_only.vcf.gz</p>
<p>Output a Hardy-Weinberg p-value for every site in the bcf file that does not have any missing genotypes</p>
<p><strong>vcftools</strong> –bcf input_file.bcf –hardy –max-missing 1.0 –out output_noMissing</p>
<p>Output nucleotide diversity at a list of positions</p>
<p>zcat input_file.vcf.gz | <strong>vcftools</strong> –vcf - –site-pi –positions SNP_list.txt –out nucleotide_diversity</p>
<h2 id="BASIC-OPTIONS"><a href="#BASIC-OPTIONS" class="headerlink" title="BASIC OPTIONS"></a>BASIC OPTIONS</h2><p>These options are used to specify the input and output files.</p>
<p><strong>INPUT FILE OPTIONS</strong></p>
<p><strong>–vcf</strong> *<input_filename>*</input_filename></p>
<p>This option defines the VCF file to be processed. VCFtools expects files in VCF format v4.0, v4.1 or v4.2. The latter two are supported with some small limitations. If the user provides a dash character ’-’ as a file name, the program expects a VCF file to be piped in through standard in.</p>
<p><strong>–gzvcf</strong> *<input_filename>*</input_filename></p>
<p>This option can be used in place of the –vcf option to read compressed (gzipped) VCF files directly.</p>
<p><strong>–bcf</strong> *<input_filename>*</input_filename></p>
<p>This option can be used in place of the –vcf option to read BCF2 files directly. You do not need to specify if this file is compressed with BGZF encoding. If the user provides a dash character ’-’ as a file name, the program expects a BCF2 file to be piped in through standard in.</p>
<p><strong>OUTPUT FILE OPTIONS</strong></p>
<p><strong>–out</strong> *<output_prefix>*</output_prefix></p>
<p>This option defines the output filename prefix for all files generated by vcftools. For example, if <prefix> is set to output_filename, then all output files will be of the form output_filename.*** . If this option is omitted, all output files will have the prefix “out.” in the current working directory.</prefix></p>
<p><strong>–stdout-c</strong></p>
<p>These options direct the vcftools output to standard out so it can be piped into another program or written directly to a filename of choice. However, a select few output functions cannot be written to standard out.</p>
<p><strong>–temp</strong> *<temporary_directory>*</temporary_directory></p>
<p>This option can be used to redirect any temporary files that vcftools creates into a specified directory.</p>
<h2 id="SITE-FILTERING-OPTIONS"><a href="#SITE-FILTERING-OPTIONS" class="headerlink" title="SITE FILTERING OPTIONS"></a>SITE FILTERING OPTIONS</h2><p>These options are used to include or exclude certain sites from any analysis being performed by the program.</p>
<p><strong>POSITION FILTERING</strong></p>
<p><strong>–chr</strong> *<chromosome><strong>*–not-chr</strong> *<chromosome>*</chromosome></chromosome></p>
<p>Includes or excludes sites with indentifiers matching <chromosome>. These options may be used multiple times to include or exclude more than one chromosome.</chromosome></p>
<p><strong>–from-bp</strong> *<integer><strong>*–to-bp</strong> *<integer>*</integer></integer></p>
<p>These options specify a lower bound and upper bound for a range of sites to be processed. Sites with positions less than or greater than these values will be excluded. These options can only be used in conjunction with a single usage of –chr. Using one of these does not require use of the other.</p>
<p><strong>–positions</strong> *<filename><strong>*–exclude-positions</strong> *<filename>*</filename></filename></p>
<p>Include or exclude a set of sites on the basis of a list of positions in a file. Each line of the input file should contain a (tab-separated) chromosome and position. The file can have comment lines that start with a “#”, they will be ignored.</p>
<p><strong>–positions-overlap</strong> *<filename><strong>*–exclude-positions-overlap</strong> *<filename>*</filename></filename></p>
<p>Include or exclude a set of sites on the basis of the reference allele overlapping with a list of positions in a file. Each line of the input file should contain a (tab-separated) chromosome and position. The file can have comment lines that start with a “#”, they will be ignored.</p>
<p><strong>–bed</strong> *<filename><strong>*–exclude-bed</strong> *<filename>*</filename></filename></p>
<p>Include or exclude a set of sites on the basis of a BED file. Only the first three columns (chrom, chromStart and chromEnd) are required. The BED file is expected to have a header line. A site will be kept or excluded if any part of any allele (REF or ALT) at a site is within the range of one of the BED entries.</p>
<p><strong>–thin</strong> *<integer>*</integer></p>
<p>Thin sites so that no two sites are within the specified distance from one another.</p>
<p><strong>–mask</strong> *<filename><strong>*–invert-mask</strong> *<filename><strong>*–mask-min</strong> *<integer>*</integer></filename></filename></p>
<p>These options are used to specify a FASTA-like mask file to filter with. The mask file contains a sequence of integer digits (between 0 and 9) for each position on a chromosome that specify if a site at that position should be filtered or not.<br>An example mask file would look like:</p>
<p><em>&gt;10000011111222…&gt;22222211111000…</em></p>
<p>In this example, sites in the VCF file located within the first 5 bases of the start of chromosome 1 would be kept, whereas sites at position 6 onwards would be filtered out. And sites after the 11th position on chromosome 2 would be filtered out as well.<br>The “–invert-mask” option takes the same format mask file as the “–mask” option, however it inverts the mask file before filtering with it.<br>And the “–mask-min” option specifies a threshold mask value between 0 and 9 to filter positions by. The default threshold is 0, meaning only sites with that value or lower will be kept.</p>
<p><strong>SITE ID FILTERING</strong></p>
<p><strong>–snp</strong> *<string>*</string></p>
<p>Include SNP(s) with matching ID (e.g. a dbSNP rsID). This command can be used multiple times in order to include more than one SNP.</p>
<p><strong>–snps</strong> *<filename><strong>*–exclude</strong> *<filename>*</filename></filename></p>
<p>Include or exclude a list of SNPs given in a file. The file should contain a list of SNP IDs (e.g. dbSNP rsIDs), with one ID per line. No header line is expected.</p>
<p><strong>VARIANT TYPE FILTERING</strong></p>
<p><strong>–keep-only-indels–remove-indels</strong></p>
<p>Include or exclude sites that contain an indel. For these options “indel” means any variant that alters the length of the REF allele.</p>
<p><strong>FILTER FLAG FILTERING</strong></p>
<p><strong>–remove-filtered-all</strong></p>
<p>Removes all sites with a FILTER flag other than PASS.</p>
<p><strong>–keep-filtered</strong> *<string>*</string></p>
<p><strong>–remove-filtered</strong> *<string>*</string></p>
<p>Includes or excludes all sites marked with a specific FILTER flag. These options may be used more than once to specify multiple FILTER flags.</p>
<p><strong>INFO FIELD FILTERING</strong></p>
<p><strong>–keep-INFO</strong> *<string>*</string></p>
<p><strong>–remove-INFO</strong> *<string>*</string></p>
<p>Includes or excludes all sites with a specific INFO flag. These options only filter on the presence of the flag and not its value. These options can be used multiple times to specify multiple INFO flags.</p>
<p><strong>ALLELE FILTERING</strong></p>
<p><strong>–maf</strong> *<float><strong>*–max-maf</strong> *<float>*</float></float></p>
<p>Include only sites with a Minor Allele Frequency greater than or equal to the “–maf” value and less than or equal to the “–max-maf” value. One of these options may be used without the other. Allele frequency is defined as the number of times an allele appears over all individuals at that site, divided by the total number of non-missing alleles at that site.</p>
<p><strong>–non-ref-af</strong> *<float><strong>*–max-non-ref-af</strong> *<float><strong>*–non-ref-ac</strong> *<integer><strong>*–max-non-ref-ac</strong> *<integer>*</integer></integer></float></float></p>
<p><strong>–non-ref-af-any</strong> *<float><strong>*–max-non-ref-af-any</strong> *<float><strong>*–non-ref-ac-any</strong> *<integer><strong>*–max-non-ref-ac-any</strong> *<integer>*</integer></integer></float></float></p>
<p>Include only sites with all Non-Reference (ALT) Allele Frequencies (af) or Counts (ac) within the range specified, and including the specified value. The default options require <strong>all</strong> alleles to meet the specified criteria, whereas the options appended with “any” require only one allele to meet the criteria. The Allele frequency is defined as the number of times an allele appears over all individuals at that site, divided by the total number of non-missing alleles at that site.</p>
<p><strong>–mac</strong> *<integer><strong>*–max-mac</strong> *<integer>*</integer></integer></p>
<p>Include only sites with Minor Allele Count greater than or equal to the “–mac” value and less than or equal to the “–max-mac” value. One of these options may be used without the other. Allele count is simply the number of times that allele appears over all individuals at that site.</p>
<p><strong>–min-alleles</strong> *<integer><strong>*–max-alleles</strong> *<integer>*</integer></integer></p>
<p>Include only sites with a number of alleles greater than or equal to the “–min-alleles” value and less than or equal to the “–max-alleles” value. One of these options may be used without the other.<br>For example, to include only bi-allelic sites, one could use:</p>
<p><strong>vcftools</strong> –vcf file1.vcf –min-alleles 2 –max-alleles 2</p>
<p><strong>GENOTYPE VALUE FILTERING</strong></p>
<p><strong>–min-meanDP</strong> *<float><strong>*–max-meanDP</strong> *<float>*</float></float></p>
<p>Includes only sites with mean depth values (over all included individuals) greater than or equal to the “–min-meanDP” value and less than or equal to the “–max-meanDP” value. One of these options may be used without the other. These options require that the “DP” FORMAT tag is included for each site.</p>
<p><strong>–hwe</strong> *<float>*</float></p>
<p>Assesses sites for Hardy-Weinberg Equilibrium using an exact test, as defined by Wigginton, Cutler and Abecasis (2005). Sites with a p-value below the threshold defined by this option are taken to be out of HWE, and therefore excluded.</p>
<p><strong>–max-missing</strong> *<float>*</float></p>
<p>Exclude sites on the basis of the proportion of missing data (defined to be between 0 and 1, where 0 allows sites that are completely missing and 1 indicates no missing data allowed).</p>
<p><strong>–max-missing-count</strong> *<integer>*</integer></p>
<p>Exclude sites with more than this number of missing genotypes over all individuals.</p>
<p><strong>–phased</strong></p>
<p>Excludes all sites that contain unphased genotypes.</p>
<p><strong>MISCELLANEOUS FILTERING</strong></p>
<p><strong>–minQ</strong> *<float>*</float></p>
<p>Includes only sites with Quality value above this threshold.</p>
<h2 id="INDIVIDUAL-FILTERING-OPTIONS"><a href="#INDIVIDUAL-FILTERING-OPTIONS" class="headerlink" title="INDIVIDUAL FILTERING OPTIONS"></a>INDIVIDUAL FILTERING OPTIONS</h2><p>These options are used to include or exclude certain individuals from any analysis being performed by the program.</p>
<p><strong>–indv</strong> *<string><strong>*–remove-indv</strong> *<string>*</string></string></p>
<p>Specify an individual to be kept or removed from the analysis. This option can be used multiple times to specify multiple individuals. If both options are specified, then the “–indv” option is executed before the “–remove-indv option”.</p>
<p><strong>–keep</strong> *<filename><strong>*–remove</strong> *<filename>*</filename></filename></p>
<p>Provide files containing a list of individuals to either include or exclude in subsequent analysis. Each individual ID (as defined in the VCF headerline) should be included on a separate line. If both options are used, then the “–keep” option is executed before the “–remove” option. When multiple files are provided, the union of individuals from all keep files subtracted by the union of individuals from all remove files are kept. No header line is expected.</p>
<p><strong>–max-indv</strong> *<integer>*</integer></p>
<p>Randomly thins individuals so that only the specified number are retained.</p>
<h2 id="GENOTYPE-FILTERING-OPTIONS"><a href="#GENOTYPE-FILTERING-OPTIONS" class="headerlink" title="GENOTYPE FILTERING OPTIONS"></a>GENOTYPE FILTERING OPTIONS</h2><p>These options are used to exclude genotypes from any analysis being performed by the program. If excluded, these values will be treated as missing.</p>
<p><strong>–remove-filtered-geno-all</strong></p>
<p>Excludes all genotypes with a FILTER flag not equal to “.” (a missing value) or PASS.</p>
<p><strong>–remove-filtered-geno</strong> *<string>*</string></p>
<p>Excludes genotypes with a specific FILTER flag.</p>
<p><strong>–minGQ</strong> *<float>*</float></p>
<p>Exclude all genotypes with a quality below the threshold specified. This option requires that the “GQ” FORMAT tag is specified for all sites.</p>
<p><strong>–minDP</strong> *<float><strong>*–maxDP</strong> *<float>*</float></float></p>
<p>Includes only genotypes greater than or equal to the “–minDP” value and less than or equal to the “–maxDP” value. This option requires that the “DP” FORMAT tag is specified for all sites.</p>
<h2 id="OUTPUT-OPTIONS"><a href="#OUTPUT-OPTIONS" class="headerlink" title="OUTPUT OPTIONS"></a>OUTPUT OPTIONS</h2><p>These options specify which analyses or conversions to perform on the data that passed through all specified filters.</p>
<p><strong>OUTPUT ALLELE STATISTICS</strong></p>
<p><strong>–freq–freq2</strong></p>
<p>Outputs the allele frequency for each site in a file with the suffix “.frq”. The second option is used to suppress output of any information about the alleles.</p>
<p><strong>–counts–counts2</strong></p>
<p>Outputs the raw allele counts for each site in a file with the suffix “.frq.count”. The second option is used to suppress output of any information about the alleles.</p>
<p><strong>–derived</strong></p>
<p>For use with the previous four frequency and count options only. Re-orders the output file columns so that the ancestral allele appears first. This option relies on the ancestral allele being specified in the VCF file using the AA tag in the INFO field.</p>
<p><strong>OUTPUT DEPTH STATISTICS</strong></p>
<p><strong>–depth</strong></p>
<p>Generates a file containing the mean depth per individual. This file has the suffix “.idepth”.</p>
<p><strong>–site-depth</strong></p>
<p>Generates a file containing the depth per site summed across all individuals. This output file has the suffix “.ldepth”.</p>
<p><strong>–site-mean-depth</strong></p>
<p>Generates a file containing the mean depth per site averaged across all individuals. This output file has the suffix “.ldepth.mean”.</p>
<p><strong>–geno-depth</strong></p>
<p>Generates a (possibly very large) file containing the depth for each genotype in the VCF file. Missing entries are given the value -1. The file has the suffix “.gdepth”.</p>
<p><strong>OUTPUT LD STATISTICS</strong></p>
<p><strong>–hap-r2</strong></p>
<p>Outputs a file reporting the r2, D, and D’ statistics using phased haplotypes. These are the traditional measures of LD often reported in the population genetics literature. The output file has the suffix “.hap.ld”. This option assumes that the VCF input file has phased haplotypes.</p>
<p><strong>–geno-r2</strong></p>
<p>Calculates the squared correlation coefficient between genotypes encoded as 0, 1 and 2 to represent the number of non-reference alleles in each individual. This is the same as the LD measure reported by PLINK. The D and D’ statistics are only available for phased genotypes. The output file has the suffix “.geno.ld”.</p>
<p><strong>–geno-chisq</strong></p>
<p>If your data contains sites with more than two alleles, then this option can be used to test for genotype independence via the chi-squared statistic. The output file has the suffix “.geno.chisq”.</p>
<p><strong>–hap-r2-positions</strong> *<positions list file><strong>*–geno-r2-positions</strong> *<positions list file>*</positions></positions></p>
<p>Outputs a file reporting the r2 statistics of the sites contained in the provided file verses all other sites. The output files have the suffix “.list.hap.ld” or “.list.geno.ld”, depending on which option is used.</p>
<p><strong>–ld-window</strong> *<integer>*</integer></p>
<p>This optional parameter defines the maximum number of SNPs between the SNPs being tested for LD in the “–hap-r2”, “–geno-r2”, and “–geno-chisq” functions.</p>
<p><strong>–ld-window-bp</strong> *<integer>*</integer></p>
<p>This optional parameter defines the maximum number of physical bases between the SNPs being tested for LD in the “–hap-r2”, “–geno-r2”, and “–geno-chisq” functions.</p>
<p><strong>–ld-window-min</strong> *<integer>*</integer></p>
<p>This optional parameter defines the minimum number of SNPs between the SNPs being tested for LD in the “–hap-r2”, “–geno-r2”, and “–geno-chisq” functions.</p>
<p><strong>–ld-window-bp-min</strong> *<integer>*</integer></p>
<p>This optional parameter defines the minimum number of physical bases between the SNPs being tested for LD in the “–hap-r2”, “–geno-r2”, and “–geno-chisq” functions.</p>
<p><strong>–min-r2</strong> *<float>*</float></p>
<p>This optional parameter sets a minimum value for r2, below which the LD statistic is not reported by the “–hap-r2”, “–geno-r2”, and “–geno-chisq” functions.</p>
<p><strong>–interchrom-hap-r2–interchrom-geno-r2</strong></p>
<p>Outputs a file reporting the r2 statistics for sites on different chromosomes. The output files have the suffix “.interchrom.hap.ld” or “.interchrom.geno.ld”, depending on the option used.</p>
<p><strong>OUTPUT TRANSITION/TRANSVERSION STATISTICS</strong></p>
<p><strong>–TsTv</strong> *<integer>*</integer></p>
<p>Calculates the Transition / Transversion ratio in bins of size defined by this option. Only uses bi-allelic SNPs. The resulting output file has the suffix “.TsTv”.</p>
<p><strong>–TsTv-summary</strong></p>
<p>Calculates a simple summary of all Transitions and Transversions. The output file has the suffix “.TsTv.summary”.</p>
<p><strong>–TsTv-by-count</strong></p>
<p>Calculates the Transition / Transversion ratio as a function of alternative allele count. Only uses bi-allelic SNPs. The resulting output file has the suffix “.TsTv.count”.</p>
<p><strong>–TsTv-by-qual</strong></p>
<p>Calculates the Transition / Transversion ratio as a function of SNP quality threshold. Only uses bi-allelic SNPs. The resulting output file has the suffix “.TsTv.qual”.</p>
<p><strong>–FILTER-summary</strong></p>
<p>Generates a summary of the number of SNPs and Ts/Tv ratio for each FILTER category. The output file has the suffix “.FILTER.summary”.</p>
<p><strong>OUTPUT NUCLEOTIDE DIVERGENCE STATISTICS</strong></p>
<p><strong>–site-pi</strong></p>
<p>Measures nucleotide divergency on a per-site basis. The output file has the suffix “.sites.pi”.</p>
<p><strong>–window-pi</strong> *<integer><strong>*–window-pi-step</strong> *<integer>*</integer></integer></p>
<p>Measures the nucleotide diversity in windows, with the number provided as the window size. The output file has the suffix “.windowed.pi”. The latter is an optional argument used to specify the step size in between windows.</p>
<p><strong>OUTPUT FST STATISTICS</strong></p>
<p><strong>–weir-fst-pop</strong> *<filename>*</filename></p>
<p>This option is used to calculate an Fst estimate from Weir and Cockerham’s 1984 paper. This is the preferred calculation of Fst. The provided file must contain a list of individuals (one individual per line) from the VCF file that correspond to one population. This option can be used multiple times to calculate Fst for more than two populations. These files will also be included as “–keep” options. By default, calculations are done on a per-site basis. The output file has the suffix “.weir.fst”.</p>
<p><strong>–fst-window-size</strong> *<integer><strong>*–fst-window-step</strong> *<integer>*</integer></integer></p>
<p>These options can be used with “–weir-fst-pop” to do the Fst calculations on a windowed basis instead of a per-site basis. These arguments specify the desired window size and the desired step size between windows.</p>
<p><strong>OUTPUT OTHER STATISTICS</strong></p>
<p><strong>–het</strong></p>
<p>Calculates a measure of heterozygosity on a per-individual basis. Specfically, the inbreeding coefficient, F, is estimated for each individual using a method of moments. The resulting file has the suffix “.het”.</p>
<p><strong>–hardy</strong></p>
<p>Reports a p-value for each site from a Hardy-Weinberg Equilibrium test (as defined by Wigginton, Cutler and Abecasis (2005)). The resulting file (with suffix “.hwe”) also contains the Observed numbers of Homozygotes and Heterozygotes and the corresponding Expected numbers under HWE.</p>
<p><strong>–TajimaD</strong> *<integer>*</integer></p>
<p>Outputs Tajima’s D statistic in bins with size of the specified number. The output file has the suffix “.Tajima.D”.</p>
<p><strong>–indv-freq-burden</strong></p>
<p>This option calculates the number of variants within each individual of a specific frequency. The resulting file has the suffix “.ifreqburden”.</p>
<p><strong>–LROH</strong></p>
<p>This option will identify and output Long Runs of Homozygosity. The output file has the suffix “.LROH”. This function is experimental, and will use a lot of memory if applied to large datasets.</p>
<p><strong>–relatedness</strong></p>
<p>This option is used to calculate and output a relatedness statistic based on the method of Yang et al, Nature Genetics 2010 (doi:10.1038/ng.608). Specifically, calculate the unadjusted Ajk statistic. Expectation of Ajk is zero for individuals within a populations, and one for an individual with themselves. The output file has the suffix “.relatedness”.</p>
<p><strong>–relatedness2</strong></p>
<p>This option is used to calculate and output a relatedness statistic based on the method of Manichaikul et al., BIOINFORMATICS 2010 (doi:10.1093/bioinformatics/btq559). The output file has the suffix “.relatedness2”.</p>
<p><strong>–site-quality</strong></p>
<p>Generates a file containing the per-site SNP quality, as found in the QUAL column of the VCF file. This file has the suffix “.lqual”.</p>
<p><strong>–missing-indv</strong></p>
<p>Generates a file reporting the missingness on a per-individual basis. The file has the suffix “.imiss”.</p>
<p><strong>–missing-site</strong></p>
<p>Generates a file reporting the missingness on a per-site basis. The file has the suffix “.lmiss”.</p>
<p><strong>–SNPdensity</strong> *<integer>*</integer></p>
<p>Calculates the number and density of SNPs in bins of size defined by this option. The resulting output file has the suffix “.snpden”.</p>
<p><strong>–kept-sites</strong></p>
<p>Creates a file listing all sites that have been kept after filtering. The file has the suffix “.kept.sites”.</p>
<p><strong>–removed-sites</strong></p>
<p>Creates a file listing all sites that have been removed after filtering. The file has the suffix “.removed.sites”.</p>
<p><strong>–singletons</strong></p>
<p>This option will generate a file detailing the location of singletons, and the individual they occur in. The file reports both true singletons, and private doubletons (i.e. SNPs where the minor allele only occurs in a single individual and that individual is homozygotic for that allele). The output file has the suffix “.singletons”.</p>
<p><strong>–hist-indel-len</strong></p>
<p>This option will generate a histogram file of the length of all indels (including SNPs). It shows both the count and the percentage of all indels for indel lengths that occur at least once in the input file. SNPs are considered indels with length zero. The output file has the suffix “.indel.hist”.</p>
<p><strong>–hapcount</strong> *<BED file>*</BED></p>
<p>This option will output the number of unique haplotypes within user specified bins, as defined by the BED file. The output file has the suffix “.hapcount”.</p>
<p><strong>–mendel</strong> *<PED file>*</PED></p>
<p>This option is use to report mendel errors identified in trios. The command requires a PLINK-style PED file, with the first four columns specifying a family ID, the child ID, the father ID, and the mother ID. The output of this command has the suffix “.mendel”.</p>
<p><strong>–extract-FORMAT-info</strong> *<string>*</string></p>
<p>Extract information from the genotype fields in the VCF file relating to a specfied FORMAT identifier. The resulting output file has the suffix “.<FORMAT_ID>.FORMAT”. For example, the following command would extract the all of the GT (i.e. Genotype) entries:</FORMAT_ID></p>
<p><strong>vcftools</strong> –vcf file1.vcf –extract-FORMAT-info GT</p>
<p><strong>–get-INFO</strong> *<string>*</string></p>
<p>This option is used to extract information from the INFO field in the VCF file. The <string> argument specifies the INFO tag to be extracted, and the option can be used multiple times in order to extract multiple INFO entries. The resulting file, with suffix “.INFO”, contains the required INFO information in a tab-separated table. For example, to extract the NS and DB flags, one would use the command:</string></p>
<p><strong>vcftools</strong> –vcf file1.vcf –get-INFO NS –get-INFO DB</p>
<p><strong>OUTPUT VCF FORMAT</strong></p>
<p><strong>–recode–recode-bcf</strong></p>
<p>These options are used to generate a new file in either VCF or BCF from the input VCF or BCF file after applying the filtering options specified by the user. The output file has the suffix “.recode.vcf” or “.recode.bcf”. By default, the INFO fields are removed from the output file, as the INFO values may be invalidated by the recoding (e.g. the total depth may need to be recalculated if individuals are removed). This behavior may be overriden by the following options. By default, BCF files are written out as BGZF compressed files.</p>
<p><strong>–recode-INFO</strong> *<string><strong>*–recode-INFO-all</strong></string></p>
<p>These options can be used with the above recode options to define an INFO key name to keep in the output file. This option can be used multiple times to keep more of the INFO fields. The second option is used to keep all INFO values in the original file.</p>
<p><strong>–contigs</strong> *<string>*</string></p>
<p>This option can be used in conjuction with the –recode-bcf when the input file does not have any contig declarations. This option expects a file name with one contig header per line. These lines are included in the output file.</p>
<p><strong>OUTPUT OTHER FORMATS</strong></p>
<p><strong>–012</strong></p>
<p>This option outputs the genotypes as a large matrix. Three files are produced. The first, with suffix “.012”, contains the genotypes of each individual on a separate line. Genotypes are represented as 0, 1 and 2, where the number represent that number of non-reference alleles. Missing genotypes are represented by -1. The second file, with suffix “.012.indv” details the individuals included in the main file. The third file, with suffix “.012.pos” details the site locations included in the main file.</p>
<p><strong>–IMPUTE</strong></p>
<p>This option outputs phased haplotypes in IMPUTE reference-panel format. As IMPUTE requires phased data, using this option also implies –phased. Unphased individuals and genotypes are therefore excluded. Only bi-allelic sites are included in the output. Using this option generates three files. The IMPUTE haplotype file has the suffix “.impute.hap”, and the IMPUTE legend file has the suffix “.impute.hap.legend”. The third file, with suffix “.impute.hap.indv”, details the individuals included in the haplotype file, although this file is not needed by IMPUTE.</p>
<p><strong>–ldhat–ldhat-geno</strong></p>
<p>These options output data in LDhat format. This option requires the “–chr” filter option to also be used. The first option outputs phased data only, and therefore also implies “–phased” be used, leading to unphased individuals and genotypes being excluded. The second option treats all of the data as unphased, and therefore outputs LDhat files in genotype/unphased format. Two output files are generated with the suffixes “.ldhat.sites” and “.ldhat.locs”, which correspond to the LDhat “sites” and “locs” input files respectively.</p>
<p><strong>–BEAGLE-GL–BEAGLE-PL</strong></p>
<p>These options output genotype likelihood information for input into the BEAGLE program. The VCF file is required to contain FORMAT fields with “GL” or “PL” tags, which can generally be output by SNP callers such as the GATK. Use of this option requires a chromosome to be specified via the “–chr” option. The resulting output file has the suffix “.BEAGLE.GL” or “.BEAGLE.PL” and contains genotype likelihoods for biallelic sites. This file is suitable for input into BEAGLE via the “like=” argument.</p>
<p><strong>–plink–plink-tped–chrom-map</strong></p>
<p>These options output the genotype data in PLINK PED format. With the first option, two files are generated, with suffixes “.ped” and “.map”. Note that only bi-allelic loci will be output. Further details of these files can be found in the PLINK documentation.<br>Note: The first option can be very slow on large datasets. Using the –chr option to divide up the dataset is advised, or alternatively use the –plink-tped option which outputs the files in the PLINK transposed format with suffixes “.tped” and “.tfam”.<br>For usage with variant sites in species other than humans, the –chrom-map option may be used to specify a file name that has a tab-delimited mapping of chromosome name to a desired integer value with one line per chromosome. This file must contain a mapping for every chromosome value found in the file.</p>
<h2 id="COMPARISON-OPTIONS-注释：两个vcf文档比较"><a href="#COMPARISON-OPTIONS-注释：两个vcf文档比较" class="headerlink" title="COMPARISON OPTIONS(注释：两个vcf文档比较)"></a>COMPARISON OPTIONS(注释：两个vcf文档比较)</h2><p>These options are used to compare the original variant file to another variant file and output the results. All of the diff functions require both files to contain the same chromosomes and that the files be sorted in the same order. If one of the files contains chromosomes that the other file does not, use the –not-chr filter to remove them from the analysis.</p>
<p><strong>DIFF VCF FILE</strong></p>
<p><strong>–diff</strong> *<filename><strong>*–gzdiff</strong> *<filename><strong>*–diff-bcf</strong> *<filename>*</filename></filename></filename></p>
<p>These options compare the original input file to this specified VCF, gzipped VCF, or BCF file. These options must be specified with one additional option described below in order to specify what type of comparison is to be performed. See the examples section for typical usage.</p>
<p><strong>DIFF OPTIONS</strong></p>
<p><strong>–diff-site</strong></p>
<p>Outputs the sites that are common / unique to each file. The output file has the suffix “.diff.sites_in_files”.</p>
<p><strong>–diff-indv</strong></p>
<p>Outputs the individuals that are common / unique to each file. The output file has the suffix “.diff.indv_in_files”.</p>
<p><strong>–diff-site-discordance</strong></p>
<p>This option calculates discordance on a site by site basis. The resulting output file has the suffix “.diff.sites”.</p>
<p><strong>–diff-indv-discordance</strong></p>
<p>This option calculates discordance on a per-individual basis. The resulting output file has the suffix “.diff.indv”.</p>
<p><strong>–diff-indv-map</strong> *<filename>*</filename></p>
<p>This option allows the user to specify a mapping of individual IDs in the second file to those in the first file. The program expects the file to contain a tab-delimited line containing an individual’s name in file one followed by that same individual’s name in file two with one mapping per line.</p>
<p><strong>–diff-discordance-matrix</strong></p>
<p>This option calculates a discordance matrix. This option only works with bi-allelic loci with matching alleles that are present in both files. The resulting output file has the suffix “.diff.discordance.matrix”.</p>
<p><strong>–diff-switch-error</strong></p>
<p>This option calculates phasing errors (specifically “switch errors”). This option creates an output file describing switch errors found between sites, with suffix “.diff.switch”.</p>
<h2 id="vcf文件与vcftools（一）"><a href="#vcf文件与vcftools（一）" class="headerlink" title="vcf文件与vcftools（一）"></a>vcf文件与vcftools（一）</h2><p>在用于存储reads比对结果的SAM/BAM格式提出之后（2009年），用于存储变异检测结果的格式VCF( variant call format )也被提出（2010年），与此同时作者还提供了配套的处理工具——vcftools。</p>
<h3 id="1-vcf文件"><a href="#1-vcf文件" class="headerlink" title="1. vcf文件"></a>1. vcf文件</h3><p>vcf主要包括两部分，以 <code>##</code>和 <code>#</code>开头的header信息，以及主体variation信息。</p>
<h5 id="1-1-header部分"><a href="#1-1-header部分" class="headerlink" title="1.1 header部分"></a>1.1 header部分</h5><p><img src="/2019/11/23/Vcftools/640-1574481259791.webp" alt="img"></p>
<p><img src="/2019/11/23/Vcftools/640-1574481259808.webp" alt="img"></p>
<p>以 <code>#</code>开头的一行（header部分的最后一行）是主体部分的列名，以 <code>##</code>开头的行是一些描述解释信息，比如主体中的”FILTER”, “FORMAT”, “INFO”都是什么意思，另外还能看到一些历史命令，通过这些命令可以知道这个vcf文件是如何得到的，比如，通过上面的图片可知，这个vcf是GATK和bcftools分别call variation之后取交集得到。</p>
<p>要完全理解vcf的每一列，每一个英文大写的缩写名词其实挺困难的，仅INFO就有很多名词，有的可能还需要高深的统计学知识，所以目前我只掌握的一些简单的。</p>
<p>下面我以我的vcf文件为例，尽可能多的理解一下vcf中字段的含义。</p>
<h5 id="1-2-variation部分"><a href="#1-2-variation部分" class="headerlink" title="1.2 variation部分"></a>1.2 variation部分</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT  sample1  sample2  sample3  sample4  sample5  sample6  sample7  sample8chrA01  895     .       T       A       101.53  PASS    AC&#x3D;2;AF&#x3D;0.125;AN&#x3D;16;BaseQRankSum&#x3D;-2.261;ClippingRankSum&#x3D;0;DP&#x3D;239;ExcessHet&#x3D;3.3099;FS&#x3D;4.905;MLEAC&#x3D;2;MLEAF&#x3D;0.125;MQ&#x3D;80.42;MQRankSum&#x3D;0;QD&#x3D;2.21;ReadPosRankSum&#x3D;-0.033;SOR&#x3D;1.609  GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;0:22,0:22:66:0|1:895_T_A:0,66,1689    0&#x2F;0:36,2:38:65:.:.:0,65,1576    0&#x2F;1:10,3:13:67:.:.:67,0,396  0&#x2F;0:19,0:19:51:.:.:0,51,765     0&#x2F;0:31,0:31:84:.:.:0,84,1260    0&#x2F;1:28,5:33:74:.:.:74,0,1087    0&#x2F;0:29,0:29:81:.:.:0,81,1215    0&#x2F;0:32,0:32:90:.:.:0,90,1350chrA01  912     .       G       A       181.85  PASS    AC&#x3D;3;AF&#x3D;0.188;AN&#x3D;16;BaseQRankSum&#x3D;-1.042;ClippingRankSum&#x3D;0;DP&#x3D;234;ExcessHet&#x3D;3.9794;FS&#x3D;2.43;MLEAC&#x3D;3;MLEAF&#x3D;0.188;MQ&#x3D;74.43;MQRankSum&#x3D;0;QD&#x3D;2.64;ReadPosRankSum&#x3D;-0.339;SOR&#x3D;0.857   GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;0:20,0:20:60:0|1:895_T_A:0,60,1619    0&#x2F;0:36,1:37:66:.:.:0,66,1496    0&#x2F;1:10,3:13:41:.:.:41,0,385  0&#x2F;0:16,0:16:42:.:.:0,42,630     0&#x2F;0:33,0:33:90:.:.:0,90,1350    0&#x2F;1:27,5:32:82:.:.:82,0,1046    0&#x2F;1:19,5:24:99:.:.:102,0,631    0&#x2F;0:35,0:35:99:.:.:0,99,1485chrA01  921     .       T       C       2635.31 PASS    AC&#x3D;6;AF&#x3D;0.375;AN&#x3D;16;BaseQRankSum&#x3D;1.9;ClippingRankSum&#x3D;0;DP&#x3D;221;ExcessHet&#x3D;2.98;FS&#x3D;0;MLEAC&#x3D;6;MLEAF&#x3D;0.375;MQ&#x3D;59.33;MQRankSum&#x3D;0;QD&#x3D;24.86;ReadPosRankSum&#x3D;1.15;SOR&#x3D;0.73     GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;1:10,7:17:99:1|0:895_T_A:264,0,724    0&#x2F;0:36,0:36:99:.:.:0,99,1485    0&#x2F;1:3,9:12:73:.:.:314,0,73   0&#x2F;1:10,7:17:99:0|1:921_T_C:286,0,361    1&#x2F;1:0,39:39:99:1|1:921_T_C:1751,117,0   0&#x2F;0:28,0:28:75:.:.:0,75,1125    0&#x2F;1:18,3:21:72:.:.:72,0,1015    0&#x2F;0:35,0:35:99:.:.:0,99,1485chrA01  931     .       A       G       3003.26 PASS    AC&#x3D;8;AF&#x3D;0.5;AN&#x3D;16;BaseQRankSum&#x3D;0.645;ClippingRankSum&#x3D;0;DP&#x3D;219;ExcessHet&#x3D;2.5225;FS&#x3D;2.735;MLEAC&#x3D;8;MLEAF&#x3D;0.5;MQ&#x3D;66.13;MQRankSum&#x3D;0;QD&#x3D;22.75;ReadPosRankSum&#x3D;-0.772;SOR&#x3D;0.929      GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;1:10,7:17:99:0|1:895_T_A:261,0,767    0&#x2F;0:34,1:35:60:.:.:0,60,1399    1&#x2F;1:0,11:11:33:.:.:464,33,0  0&#x2F;1:9,7:16:99:0|1:921_T_C:267,0,357     1&#x2F;1:0,41:41:99:1|1:921_T_C:1867,126,0   0&#x2F;1:24,3:27:54:.:.:54,0,974     0&#x2F;1:15,5:20:99:.:.:144,0,4730&#x2F;0:35,0:35:90:.:.:0,90,1350chrA01  1093    .       A       G       1117.16 PASS    AC&#x3D;3;AF&#x3D;0.188;AN&#x3D;16;BaseQRankSum&#x3D;-1.18;ClippingRankSum&#x3D;0;DP&#x3D;163;ExcessHet&#x3D;0.4576;FS&#x3D;11.522;MLEAC&#x3D;3;MLEAF&#x3D;0.188;MQ&#x3D;49.72;MQRankSum&#x3D;-1.559;QD&#x3D;29.67;ReadPosRankSum&#x3D;0.015;SOR&#x3D;1.008     GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;1:3,6:9:99:0|1:1093_A_G:243,0,108     0&#x2F;0:32,0:32:90:.:.:0,90,13500&#x2F;0:9,0:9:27:.:.:0,27,405        0&#x2F;0:13,0:13:36:.:.:0,36,540     1&#x2F;1:0,21:21:63:1|1:1093_A_G:923,63,0    0&#x2F;0:34,0:34:90:.:.:0,90,1350    0&#x2F;0:17,0:17:9:.:.:0,9,527   0&#x2F;0:25,0:25:72:.:.:0,72,1080chrA01  1103    .       C       T       1122.24 PASS    AC&#x3D;3;AF&#x3D;0.188;AN&#x3D;16;BaseQRankSum&#x3D;0.903;ClippingRankSum&#x3D;0;DP&#x3D;164;ExcessHet&#x3D;0.4576;FS&#x3D;10.474;MLEAC&#x3D;3;MLEAF&#x3D;0.188;MQ&#x3D;51.31;MQRankSum&#x3D;-1.383;QD&#x3D;34.04;ReadPosRankSum&#x3D;-0.319;SOR&#x3D;0.727    GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;1:3,7:10:99:0|1:1093_A_G:285,0,105    0&#x2F;0:29,0:29:81:.:.:0,81,12150&#x2F;0:11,0:11:33:.:.:0,33,456      0&#x2F;0:12,0:12:33:.:.:0,33,495     1&#x2F;1:0,20:20:60:1|1:1093_A_G:886,60,0    0&#x2F;0:35,0:35:99:.:.:0,99,1485    0&#x2F;0:18,0:18:8:.:.:0,8,557   0&#x2F;0:26,0:26:66:.:.:0,66,990</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/23/Vcftools/640-1574481259824.webp" alt="img"></p>
<h6 id="1-2-1-INFO"><a href="#1-2-1-INFO" class="headerlink" title="1.2.1 INFO"></a>1.2.1 INFO</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AC&#x3D;3;AF&#x3D;0.188;AN&#x3D;16;BaseQRankSum&#x3D;-0.601;ClippingRankSum&#x3D;0;DP&#x3D;209;ExcessHet&#x3D;0.4576;FS&#x3D;0;MLEAC&#x3D;3;MLEAF&#x3D;0.188;MQ&#x3D;56.28;MQRankSum&#x3D;0.319;QD&#x3D;34.04;ReadPosRankSum&#x3D;1.67;SOR&#x3D;0.569</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/23/Vcftools/640-1574481259840.webp" alt="img"></p>
<h6 id="1-2-2-FORMAT"><a href="#1-2-2-FORMAT" class="headerlink" title="1.2.2 FORMAT"></a>1.2.2 FORMAT</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#CHROM  POS     ID      REF     ALT     QUAL    FILTER  FORMAT  sample1</span><br><span class="line">chrA01  895     .       T       A       101.53  PASS    GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;0:22,0:22:66:0|1:895_T_A:0,66,1689chrA01  912     .       G       A       181.85  PASS    GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;0:20,0:20:60:0|1:895_T_A:0,60,1619</span><br><span class="line">chrA01  921     .       T       C       2635.31 PASS    GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;1:10,7:17:99:1|0:895_T_A:264,0,724</span><br><span class="line">chrA01  931     .       A       G       3003.26 PASS    GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;1:10,7:17:99:0|1:895_T_A:261,0,767</span><br><span class="line">chrA01  1093    .       A       G       1117.16 PASS    GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;1:3,6:9:99:0|1:1093_A_G:243,0,108</span><br><span class="line">chrA01  1103    .       C       T       1122.24 PASS    GT:AD:DP:GQ:PGT:PID:PL  0&#x2F;1:3,7:10:99:0|1:1093_A_G:285,0,105</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GT: Genotype, /分隔表示未定相, |表示已定相 PGT: phased Genotype, 邻近的位点是如何定相排列的，以最后两列为例：</p>
<p>chrA01 1093 A G 0|1 chrA01 1103 C T 0|1 竖线左边的碱基来源于一条染色体，竖线右边的碱基来源于另一条染色体，即A,C来自相同的染色体；G,T来源于另一条染色体。定相这一步需要结合多个样本的信息！</p>
<p>PID: 一个phasing group会有一个共用的group ID，并且这个ID是以第一个phased位点来定义的，比如上面两个phased位点组成的group的ID是1093AG。</p>
<p>AD: 每一个allele的深度 DP: 所有allele的总深度 GQ: Genotype Quality, -10*log10(基因型错误的概率) PL: 每种基因型的似然值，越小越可信，比如最后一列285,0,105，分别对应基因型0/0,0/1,1/1，说明0/1为可能的基因型。</p>
</blockquote>
<hr>
<h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p>The variant call format and VCFtools: <a href="https://academic.oup.com/bioinformatics/article/27/15/2156/402296" target="_blank" rel="noopener">https://academic.oup.com/bioinformatics/article/27/15/2156/402296</a> VCFtools–A set of tools written in Perl and C++ for working with VCF files: <a href="https://vcftools.github.io/man_latest.html#EXAMPLES" target="_blank" rel="noopener">https://vcftools.github.io/man_latest.html#EXAMPLES</a> VCFv4.2详解（英文版） <a href="https://samtools.github.io/hts-specs/VCFv4.2.pdf" target="_blank" rel="noopener">https://samtools.github.io/hts-specs/VCFv4.2.pdf</a></p>
<h2 id="vcf文件与vcftools（二）"><a href="#vcf文件与vcftools（二）" class="headerlink" title="vcf文件与vcftools（二）"></a>vcf文件与vcftools（二）</h2><p>vcftools是用来处理vcf和bcf文件的工具集，功能涵盖了过滤，数据格式转换，一些指标的统计计算，vcf文件之间变异信息的差异比较等等。这一篇重点讲几个基本使用示例以及如何过滤，剩下的遗传指标的计算后面有时间再写。</p>
<h5 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1.基本用法"></a>1.基本用法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools [ --vcf FILE | --gzvcf FILE | --bcf FILE] \</span><br><span class="line">[ --out OUTPUT PREFIX ] [ FILTERING OPTIONS ] [ OUTPUT OPTIONS ]</span><br></pre></td></tr></table></figure>

<h5 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h5><p>官网提供了几个常用示例，下面用我的vcf文件测试一下，我的vcf文件共249个样本，27012个SNP标记</p>
<h6 id="2-1-对来自chr1的每一个位点统计其基因频率"><a href="#2-1-对来自chr1的每一个位点统计其基因频率" class="headerlink" title="2.1 对来自chr1的每一个位点统计其基因频率"></a>2.1 对来自chr1的每一个位点统计其基因频率</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools --gzvcf combined200.vcf.gz --freq --chr chr1 --out chr1_analysis</span><br></pre></td></tr></table></figure>

<p>因为没有加任何过滤选项，所以没有过滤任何记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> less chr1_analysis.log | tail -n 4</span></span><br><span class="line">After filtering, kept 3453 out of a possible 27012 Sites </span><br><span class="line"><span class="meta">#</span><span class="bash">chr1上原本就有3453个SNP位点Run Time = 44.00 seconds</span></span><br></pre></td></tr></table></figure>

<p>第三列表示在所有样本中，该位点出现了几种碱基，大多数情况下为2，也可能是3、4；第四列表示该位点出现的碱基总数，一个样本贡献2个。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> head -n 5 chr1_analysis.frq</span></span><br><span class="line">CHROM    POS N_ALLELES   N_CHR   &#123;ALLELE:FREQ&#125;</span><br><span class="line">chr1    1146710 2   494 G:0.983806  A:0.0161943chr1    1146714 2   494 G:0.989879  A:0.0101215chr1    1146763 2   494 G:0.995951  A:0.00404858chr1    1146783 2   494 C:0.995951  T:0.00404858</span><br></pre></td></tr></table></figure>

<h6 id="2-2-过滤掉vcf文件中的InDel记录，只保留SNP记录"><a href="#2-2-过滤掉vcf文件中的InDel记录，只保留SNP记录" class="headerlink" title="2.2 过滤掉vcf文件中的InDel记录，只保留SNP记录"></a>2.2 过滤掉vcf文件中的InDel记录，只保留SNP记录</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --gzvcf combined200.vcf.gz --remove-indels --recode --recode-INFO-all --out SNPs_only--recode</span><br><span class="line">表示过滤之后会生成一个新文件，以.recode.vcf为后缀--recode-INFO-all因为在过滤之后，原先存在的INFO列的注释信息可能不对，比如剔除了一些样本，那么AN就需要重新计算。所以过滤之后默认情况下是不含有INFO列的。该选项表示将原来vcf文件中所有INFO信息保留下来。--recode-INFO &lt;string&gt; 比如--recode-INFO AC表示只将AC保留--keep-only-indels和--remove-indels作用相反</span><br></pre></td></tr></table></figure>



<p>根据vcf文件的FILTER列来过滤**</p>
<p>–remove-filtered-all 过滤掉FILTER列不是“PASS”的记录，这一步grep也能做。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --vcf combined3000_head3k.vcf --remove-filtered-all --recode --out SNPs_filter</span><br></pre></td></tr></table></figure>

<p><strong>–max-missing</strong></p>
<p>–max-missing的取值是0-1，为1时表示某个位点上所有的样本必须都有基因型，一个样本的基因型都不能缺。所以这个选项可以理解为：能分型的样本占总样本的比例至少为多少。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --gzvcf combined200.vcf.gz --max-missing 0.99 --recode --out output_noMissing</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有过滤操作都要加上–recode</p>
</blockquote>
<h6 id="2-3-比较两个vcf文件的变异位点"><a href="#2-3-比较两个vcf文件的变异位点" class="headerlink" title="2.3 比较两个vcf文件的变异位点"></a>2.3 比较两个vcf文件的变异位点</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --gzvcf combined200.vcf.gz --diff output_noMissing.recode.vcf --diff-site --out in1_v_in2</span><br></pre></td></tr></table></figure>

<p>下面的表头的1、2分别表示文件1、文件2，第4列1或2表示仅文件1或文件2有，B表示都有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ head in1_v_in2.diff.sites_in_files</span><br><span class="line">CHROM    POS1    POS2    IN_FILE REF1    REF2    ALT1    ALT2chr1    1146710 1146710 B   G   G   A   A</span><br><span class="line">chr1    1146714 1146714 B   G   G   A   Achr1    1146763 1146763 B   G   G   A   Achr1    1146783 1146783 B   C   C   T   T</span><br><span class="line">chr1    1146785 1146785 B   G   G   C   Cchr1    1146852 1146852 B   C   C   T   Tchr1    1146853 1146853 B   G   G   A   Achr1    1147062 .   1   G   .   A   .chr1    1147243 .   1   A   .   C   .</span><br></pre></td></tr></table></figure>

<h6 id="2-4-结合管道操作符"><a href="#2-4-结合管道操作符" class="headerlink" title="2.4 结合管道操作符"></a>2.4 结合管道操作符</h6><p>用–stdout代替–out即可结合管道进行其他处理</p>
<h6 id="2-5-计算Hardy-Weinberg-p-value"><a href="#2-5-计算Hardy-Weinberg-p-value" class="headerlink" title="2.5 计算Hardy-Weinberg p-value"></a>2.5 计算Hardy-Weinberg p-value</h6><p>Hardy-Weinberg遗传平衡检验用到的统计方法是卡方测验，详细过程参考：<a href="http://www.dxy.cn/bbs/thread/223387#223387以及https://wenku.baidu.com/view/9820fc2258fb770bf78a5571.html" target="_blank" rel="noopener">http://www.dxy.cn/bbs/thread/223387#223387以及https://wenku.baidu.com/view/9820fc2258fb770bf78a5571.html</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcftools --gzvcf combined200.vcf.gz --hardy --out each_site_hardy</span><br><span class="line"><span class="meta">#</span><span class="bash"> Only using biallelic SNPs</span></span><br></pre></td></tr></table></figure>

<p>第6列即为所求</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsx each_site_hardy.hwe | head -n 2</span></span><br><span class="line">CHR    POS OBS(HOM1/HET/HOM2)  E(HOM1/HET/HOM2)    ChiSq_HWE   P_HWE   P_HET_DEFICIT   P_HET_EXCESSchr1    1146710 239/8/0 239.06/7.87/0.06    6.692747e-02    1.000000e+00    1.000000e+00    9.440689e-01</span><br></pre></td></tr></table></figure>

<h5 id="3-其它参数说明"><a href="#3-其它参数说明" class="headerlink" title="3.其它参数说明"></a>3.其它参数说明</h5><h6 id="3-1-基本选项"><a href="#3-1-基本选项" class="headerlink" title="3.1 基本选项"></a>3.1 基本选项</h6><p>–vcf | –gzvcf | –bcf 输入格式，三选一即可 –out &lt;输出文件前缀&gt; –stdout 和 -c 输出到标准输出，能通过管道与其它命令结合</p>
<h6 id="3-2-过滤SNP的选项"><a href="#3-2-过滤SNP的选项" class="headerlink" title="3.2 过滤SNP的选项"></a>3.2 过滤SNP的选项</h6><p><strong>POSITION FILTERING</strong> </p>
<p>可以提供一些位置信息，或是能表示位置的文件，具体参数见官方文档</p>
<p><strong>ALLELE FILTERING</strong> </p>
<p>–maf 和 –max-maf用来限定最小等位基因频率(MAF)的范围 –mac 和 –max-mac和上面类似，用来限定最小等位基因的数量 –min-alleles 和 –max-alleles用来限定等位基因的数量，比如这条命令只会保留vcf文件ALT列只有一种碱基的情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --gzvcf combined200.vcf.gz --min-alleles 2 --max-alleles 2</span><br></pre></td></tr></table></figure>

<p><strong>GENOTYPE VALUE FILTERING</strong></p>
<p>–min-meanDP 和 –max-meanDP用来限定所有样本DP的平均值，DP表示某一个样本某一位点所有allele的总深度 –hwe <code>2.5计算Hardy-Weinbergp-value</code>讲到如何求p值，这个参数就是根据p值来过滤的，小于阈值则被过滤掉 –max-missing 前面已经举例；–max-missing-count 某个位点缺失样本个数多于某个阈值则过滤掉 –phased 某个位点如果含有未定相的基因型则过滤 –minQ 根据vcf文件的QUAL列来过滤，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --gzvcf combined200.vcf.gz --minQ 100 --recode --out minQ_100</span><br></pre></td></tr></table></figure>

<h6 id="3-3-过滤样本的选项"><a href="#3-3-过滤样本的选项" class="headerlink" title="3.3 过滤样本的选项"></a>3.3 过滤样本的选项</h6><p>–indv 和 –remove-indv保留或去除哪一个样本，后接样本ID –keep 和 –remove保留或去除哪些样本，后接文件名，文件中一行一个样本ID</p>
<h6 id="3-4-输出选项"><a href="#3-4-输出选项" class="headerlink" title="3.4 输出选项"></a>3.4 输出选项</h6><p><strong>等位基因统计</strong></p>
<p>–freq 和 –counts用于统计等位基因的频率和数量</p>
<p><strong>深度统计</strong></p>
<p>每个样本所有位点的平均深度、单个位点所有样本的深度加和（或平均）、每个样本每个位点基因型的深度。感觉没什么用</p>
<p><strong>LD统计</strong></p>
<p><strong>Ti/Tv统计</strong></p>
<p><strong>NUCLEOTIDE DIVERGENCE STATISTICS</strong></p>
<p><strong>FST STATISTICS</strong></p>
<p><strong>OTHER STATISTICS</strong></p>
<p><strong>格式转换</strong></p>
<h6 id="3-5-比较选项"><a href="#3-5-比较选项" class="headerlink" title="3.5 比较选项"></a>3.5 比较选项</h6><hr>
<h3 id="reference-1"><a href="#reference-1" class="headerlink" title="reference"></a>reference</h3><p>The variant call format and VCFtools: <a href="https://academic.oup.com/bioinformatics/article/27/15/2156/402296" target="_blank" rel="noopener">https://academic.oup.com/bioinformatics/article/27/15/2156/402296</a> VCFtools–A set of tools written in Perl and C++ for working with VCF files: <a href="https://vcftools.github.io/man_latest.html#EXAMPLES" target="_blank" rel="noopener">https://vcftools.github.io/man_latest.html#EXAMPLES</a></p>
<h2 id="Vcftools——小工具，大应用"><a href="#Vcftools——小工具，大应用" class="headerlink" title="Vcftools——小工具，大应用"></a>Vcftools——小工具，大应用</h2><p><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1574470116&ver=1991&signature=pk*E4WbHgk76FEbz-DfWAr5hJ*q6ijOELydLYbCa9IDxJrAiBaZNkX*V34UVWwl7bzXC1AdDntlR7qE-iQiwnrknOpxLdPBSP5n*mzzAIk1SEwnIdWdFofSEn6Fj9xht&new=1" target="_blank" rel="noopener">参考链接</a></p>
<p><strong>Vcftools</strong>是处理vcf文件格式的一款软件，主要功能是对遗传变异数据进行筛选、过滤、统计和数据格式转换等，此外还为群体遗传的分析提供了非常丰富的参数选择，极大地便捷了群体遗传多样性参数的计算。</p>
<p>下面从<strong>Vcftools的输入输出</strong>、<strong>数据过滤</strong>和<strong>具体应用</strong>三个方面进行介绍。</p>
<p><strong>01</strong></p>
<p><strong>Vcftools的输入和输出</strong></p>
<p><img src="/2019/11/23/Vcftools/640-1574470215311.webp" alt="img"></p>
<p><strong>使用示例：</strong></p>
<p>##提取一号染色体上的变异信息到filename.文件</p>
<p><img src="/2019/11/23/Vcftools/640-1574470215330.webp" alt="img"></p>
<p>##将一号染色体上的变异信息输出到屏幕</p>
<p><img src="/2019/11/23/Vcftools/640-1574470215340.webp" alt="img"></p>
<p>02</p>
<p><strong>Vcftools对SNP数据过滤</strong></p>
<p>在群体分析中，得到所有群体的SNP数据之后，首先要做的是数据的过滤。</p>
<p><strong>使用示例：</strong></p>
<p>##深度设置为2，SNP完整度设置为0.7，最小等位基因频率设置为0.05</p>
<p><img src="/2019/11/23/Vcftools/640-1574470215365.webp" alt="img"></p>
<p><img src="/2019/11/23/Vcftools/640-1574470215372.webp" alt="img"></p>
<p><strong>使用示例：</strong></p>
<p>##从所有样品中提取S1和S2</p>
<p><img src="/2019/11/23/Vcftools/640-1574470215392.webp" alt="img"></p>
<p>##从所有样品中批量提取样品</p>
<p><img src="/2019/11/23/Vcftools/640-1574470215413.webp" alt="img"></p>
<p>03</p>
<p><strong>Vcftools在群体遗传学中的应用</strong></p>
<p>在群体遗传学中，遗传多样性参数是衡量群体遗传多样性的重要指标，比如Fst、π、Tajima’s D等。</p>
<p><strong>1、Fst计算</strong></p>
<p>Fst是衡量群体间分化程度的重要参数，Fst越大，表明群体分化程度越高，受选择程度越高。基于Fst可以进行选择性消除分析。</p>
<p><strong>示例：</strong></p>
<p>##计算两个群体间fst值，S1.txt和S2.txt是包含了各群体的样品名</p>
<p><img src="/2019/11/23/Vcftools/640-1574470215419.webp" alt="img"></p>
<p><strong>2、核苷酸多态性统计</strong></p>
<p>核苷酸多样性π反映了群体的多态性。一般来说受选择程度越高的群体，遗传多样性越单一；野生群体遗传多样性较高。基于π可以进行选择性消除分析。</p>
<p><strong>示例：</strong></p>
<p>##计算核苷酸多态性</p>
<p><img src="/2019/11/23/Vcftools/640-1574470215425.webp" alt="img"></p>
<p>##计算单点的核苷酸多态性</p>
<p><img src="/2019/11/23/Vcftools/640.webp" alt="img"></p>
<p><strong>3、Tajima’s D计算</strong></p>
<p>Tajima’s D衡量群体中性进化理论的指标，越偏离0，受选择程度越高。</p>
<p><strong>示例：</strong></p>
<p>##计算Tajima’s D</p>
<p><img src="/2019/11/23/Vcftools/640.webp" alt="img"></p>
<p><img src="/2019/11/23/Vcftools/640.webp" alt="img"></p>
<p><strong>Vcftools作为一款强大的遗传变异分析工具，不仅在下机数据的质控、过滤、格式的转换过程中发挥作用，在群体的选择、分化方面也是强有力的助手。</strong>更多的参数选择，可以查看Vcftools使用文档或在linux命令行输入man vcftools查看使用文档。</p>
<p><strong>详细信息可见</strong></p>
<p>vcftools官网：<a href="https://vcftools.github.io/index.html" target="_blank" rel="noopener">https://vcftools.github.io/index.html</a></p>
<p>vcftools下载地址：<a href="https://github.com/vcftools/vcftools" target="_blank" rel="noopener">https://github.com/vcftools/vcftools</a></p>
<p>vcftools使用说明：<a href="https://vcftools.github.io/examples.html" target="_blank" rel="noopener">https://vcftools.github.io/examples.html</a></p>
<p><strong>引用</strong></p>
<p>1.The Variant Call Format and VCFtools, Petr Danecek, Adam Auton, Goncalo Abecasis, Cornelis A. Albers, Eric Banks, Mark A. DePristo, Robert Handsaker, Gerton Lunter, Gabor Marth, Stephen T. Sherry, Gilean McVean, Richard Durbin and 1000 Genomes Project Analysis Group, Bioinformatics, 2011</p>
<p>2.<a href="http://vcftools.github.io/" target="_blank" rel="noopener">http://vcftools.github.io/</a></p>
<p>3.<a href="https://github.com/vcftools/vcftools" target="_blank" rel="noopener">https://github.com/vcftools/vcftools</a></p>
<h1 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h1><h2 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h2><blockquote>
<ul>
<li>–vcf <input_filename> 支持v4.0、v4.1或者v4.2版本的VCF文件</input_filename></li>
<li>–gzvcf <input_filename> 通过gzipped压缩过的VCF文件</input_filename></li>
<li>–bcf <input_filename> BCF2文件</input_filename></li>
</ul>
</blockquote>
<h2 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h2><blockquote>
<ul>
<li>–out <output_prefix> 输出文件，后面直接对输出文件命名</output_prefix></li>
<li>–stdout 可接管道符对输出结果进行重新定向</li>
<li>–temp <temporary_directory> 指定结果的输出目录</temporary_directory></li>
</ul>
</blockquote>
<h2 id="过滤参数"><a href="#过滤参数" class="headerlink" title="过滤参数"></a>过滤参数</h2><h3 id="根据位置过滤"><a href="#根据位置过滤" class="headerlink" title="根据位置过滤"></a>根据位置过滤</h3><blockquote>
<ul>
<li>–chr <chromosome></chromosome></li>
<li>–not-chr <chromosome><br>包含或排除匹配的染色体位点</chromosome></li>
<li>–from-bp</li>
<li>–to-bp<br>这两个参数需要和–chr一起使用<br>指定要处理的一系列站点的下限和上限</li>
<li>–positions<filename></filename></li>
<li>–exclude-positions <filename><br>根据文件中的位置列表包括或排除一组位点。输入文件的每一行应包含（制表符分隔的）染色体和位置<br>······</filename></li>
</ul>
</blockquote>
<h3 id="根据位点过滤"><a href="#根据位点过滤" class="headerlink" title="根据位点过滤"></a>根据位点过滤</h3><blockquote>
<ul>
<li>–snp <string>字符串的名称可以匹配dbSNP的数据，适合人类基因组，该指令可多次使用</string></li>
<li>–snps<filename></filename></li>
<li>-exclude <filename><br>包括或排除文件中给出的SNP列表</filename></li>
</ul>
</blockquote>
<h3 id="变异类型过滤"><a href="#变异类型过滤" class="headerlink" title="变异类型过滤"></a>变异类型过滤</h3><blockquote>
<ul>
<li>–keep-only-indels 只保留indel标记</li>
<li>–remove-indels 删除indel标记</li>
</ul>
</blockquote>
<h3 id="根据flag过滤"><a href="#根据flag过滤" class="headerlink" title="根据flag过滤"></a>根据flag过滤</h3><blockquote>
<ul>
<li>–remove-filtered-all Removes all sites with a FILTER flag other than PASS.</li>
<li>–keep-filtered</li>
<li>–remove-filtered</li>
</ul>
</blockquote>
<h3 id="根据INFO过滤"><a href="#根据INFO过滤" class="headerlink" title="根据INFO过滤"></a>根据INFO过滤</h3><blockquote>
<ul>
<li>–keep-INFO<string></string></li>
<li>–remove-INFO<string></string></li>
</ul>
</blockquote>
<h3 id="根据ALLELE过滤"><a href="#根据ALLELE过滤" class="headerlink" title="根据ALLELE过滤"></a>根据ALLELE过滤</h3><blockquote>
<ul>
<li>–maf <float> MAF最小值过滤</float></li>
<li>–max-maf <float> MAF最大值过滤</float></li>
</ul>
</blockquote>
<p>此处省去很多参数，具体参见<a href="http://vcftools.sourceforge.net/man_latest.html" target="_blank" rel="noopener">vcftools官网</a></p>
<h3 id="根据基因型数值过滤"><a href="#根据基因型数值过滤" class="headerlink" title="根据基因型数值过滤"></a>根据基因型数值过滤</h3><blockquote>
<ul>
<li>–min-meanDP<float></float></li>
<li>–max-meanDP <float>根据测序深度进行过滤</float></li>
<li>–hwe<float></float></li>
<li>–max-missing <float>完整度，该参数介于0，1之间</float></li>
</ul>
</blockquote>
<h3 id="根据材料过滤"><a href="#根据材料过滤" class="headerlink" title="根据材料过滤"></a>根据材料过滤</h3><blockquote>
<ul>
<li>–indv</li>
<li>–remove-indv</li>
<li>–keep<filename></filename></li>
<li>–remove<filename></filename></li>
<li>–max-indv</li>
</ul>
</blockquote>
<h3 id="基因型过滤参数"><a href="#基因型过滤参数" class="headerlink" title="基因型过滤参数"></a>基因型过滤参数</h3><blockquote>
<ul>
<li>–remove-filtered-geno-all 排除flag不为’.’和’PASS’的基因型</li>
<li>–remove-filtered-geno <string>排除flag为string的基因型</string></li>
<li>–minGQ <float>排除GQ低于这个参数的基因型</float></li>
<li>–minDP<float></float></li>
<li>–maxDP<float></float></li>
</ul>
</blockquote>
<h2 id="计算统计"><a href="#计算统计" class="headerlink" title="计算统计"></a>计算统计</h2><h3 id="核算多样性统计"><a href="#核算多样性统计" class="headerlink" title="核算多样性统计"></a>核算多样性统计</h3><blockquote>
<ul>
<li>–site-pi 计算所有SNP</li>
<li>–window-pi</li>
<li>–window-pi-step</li>
</ul>
</blockquote>
<h3 id="FST计算"><a href="#FST计算" class="headerlink" title="FST计算"></a>FST计算</h3><blockquote>
<ul>
<li>–weir-fst-pop<filename></filename></li>
<li>–fst-window-size</li>
<li>–fst-window-step</li>
</ul>
</blockquote>
<h3 id="其它计算"><a href="#其它计算" class="headerlink" title="其它计算"></a>其它计算</h3><blockquote>
<ul>
<li>–het</li>
<li>–hardy</li>
<li>–site-quality 主要用于提取VCF文件中每个位点的QUAL信```</li>
<li>–missing-indv</li>
<li>–missing-site 计算每个位点的缺失率</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --vcf test.recode.vcf --missing-site  --out ms</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>–SNPdensity <integer>计算SNP在设定bin内的密度</integer></li>
</ul>
</blockquote>
<blockquote>
<p>…太多了详情见参考手册</p>
</blockquote>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><blockquote>
<ul>
<li>–recode</li>
<li>–recode-bcf</li>
<li>–recode-INFO</li>
<li>–recode-INFO-all</li>
<li>–contigs</li>
</ul>
</blockquote>
<h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><blockquote>
<ul>
<li>–012</li>
<li>–IMPUTE</li>
<li>–ldhat</li>
<li>–ldhat-geno</li>
<li>–BEAGLE-GL</li>
<li>–BEAGLE-PL</li>
<li>–plink</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --vcf all.filter.vcf --plink --out aa ;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>–plink-tped</li>
<li>–chrom-map</li>
</ul>
</blockquote>
<h2 id="比较选项"><a href="#比较选项" class="headerlink" title="比较选项"></a>比较选项</h2><blockquote>
<ul>
<li>DIFF VCF FILE</li>
<li>–diff<filename></filename></li>
<li>–gzdiff<filename></filename></li>
<li>–diff-bcf<filename></filename></li>
<li>–diff-site</li>
<li>–diff-indv</li>
<li>–diff-site-discordance</li>
<li>–diff-indv-discordance</li>
<li>–diff-indv-map<filename></filename></li>
<li>–diff-discordance-matrix</li>
<li>–diff-switch-error</li>
</ul>
</blockquote>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>1.输出来自染色体1的输入vcf文件中所有位点的等位基因频率</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --gzvcf input_file.vcf.gz --freq --chr 1 --out chr1_analysis</span><br></pre></td></tr></table></figure>

<p>2.从输入vcf文件输出新的vcf文件，该文件删除任何indel位点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --vcf input_file.vcf --remove-indels --recode --recode-INFO-all --out SNPs_only</span><br><span class="line">vcftools --vcf input_file.vcf --keep-only-indels --recode --recode-INFO-all --out indel_only</span><br></pre></td></tr></table></figure>

<p>3.输出文件比较两个vcf文件中的站点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --gzvcf input_file1.vcf.gz --gzdiff input_file2.vcf.gz --diff-site --out in1_v_in2</span><br></pre></td></tr></table></figure>

<p>4.将新的vcf文件输出到标准输出，没有任何具有过滤器标记的位点，然后使用gzip压缩它</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --gzvcf input_file.vcf.gz --remove-filtered-all --recode --stdout | gzip -c &gt; output_PASS_only.vcf.gz</span><br></pre></td></tr></table></figure>

<p>5.为bcf文件中的每个站点输出Hardy-Weinberg p值，该站点没有任何缺失的基因型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcftools --bcf input_file.bcf --hardy --max-missing 1.0 --out output_noMissing</span><br></pre></td></tr></table></figure>

<p>6.在一系列位置输出核苷酸多样性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zcat input_file.vcf.gz | vcftools --vcf - --site-pi --positions SNP_list.txt --out nucleotide_diversity</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>DNAseq</category>
      </categories>
      <tags>
        <tag>mutation_filters</tag>
        <tag>vcf</tag>
        <tag>vcftools</tag>
      </tags>
  </entry>
  <entry>
    <title>相关性分析</title>
    <url>/2020/04/08/correlation-analysis/</url>
    <content><![CDATA[<p>文件名-correlation analysis</p>
<a id="more"></a>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">expr_res&lt;- as.data.frame(t(exprSet))</span><br><span class="line"></span><br><span class="line">cor_rest&lt;- cor.test(expr_res$ZEB1,expr_res$CTNNA1,alternative = <span class="string">'two.sided'</span>,method = <span class="string">'pearson'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lm(expr_res$ZEB1~expr_res$CTNNA1)</span><br><span class="line">plot(expr_res$ZEB1,expr_res$CTNNA1)</span><br><span class="line">plot(expr_res$SNAI2,expr_res$ZEB1,type=<span class="string">'l'</span>, lwd=<span class="number">2</span>, col=<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?plot</span><br><span class="line"></span><br><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">p &lt;- ggplot(expr_res,aes(x=expr_res$LINC00551,y=expr_res$ZEB1)) + geom_point(shape=<span class="number">19</span>,color=<span class="string">'red'</span>)+</span><br><span class="line">  xlab(<span class="string">"LINC00551"</span>) + ylab(<span class="string">"Number of complexes"</span>) + </span><br><span class="line">  geom_smooth(method = lm)</span><br></pre></td></tr></table></figure>





<p><img src="/2020/04/08/correlation-analysis/image-20200408172041843.png" alt="image-20200408172041843"></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rm(list = ls())</span><br><span class="line">load(file = <span class="string">'MCPcounter_result.Rdata'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################Primary</span></span><br><span class="line"><span class="keyword">library</span>(dplyr)</span><br><span class="line"><span class="keyword">library</span>(corrplot)</span><br><span class="line"><span class="keyword">library</span>(RColorBrewer)</span><br><span class="line">P_result&lt;- as.data.frame(P_result)</span><br><span class="line">a&lt;- as.data.frame(t(P_result))</span><br><span class="line">a$Sample_ID&lt;- row.names(a)</span><br><span class="line">P_survival&lt;-  P_pheno_data2[,c(<span class="number">2</span>,<span class="number">8</span>)]</span><br><span class="line">c&lt;- merge(a, P_survival, by = <span class="string">'Sample_ID'</span>)</span><br><span class="line">c&lt;- c[,-<span class="number">1</span>]</span><br><span class="line">mcor&lt;- cor(c)</span><br><span class="line">cor&lt;- corrplot(mcor, method = <span class="string">'shade'</span>, shade.col = <span class="literal">NA</span>, tl.col = <span class="string">'black'</span>, tl.srt = <span class="number">45</span>)</span><br><span class="line"><span class="comment"># cor_rest&lt;- cor.test(c$`T cells`,c$PFS,alternative = 'two.sided',method = 'pearson')</span></span><br><span class="line"><span class="comment"># cor_rest</span></span><br><span class="line"><span class="comment"># tmp&lt;- lm(c$Neutrophils~c$PFS)</span></span><br><span class="line"><span class="comment"># summary(tmp)</span></span><br><span class="line"><span class="comment"># plot(c$Neutrophils,c$PFS)</span></span><br><span class="line"><span class="comment">#cor&lt;- corrplot(mcor, method = 'shade', shade.col = NA, tl.col = 'black', tl.srt = 45,order = "hclust")</span></span><br><span class="line"><span class="comment">####################################################Metasitsis</span></span><br><span class="line"></span><br><span class="line">M_result&lt;- as.data.frame(M_result)</span><br><span class="line">d&lt;- as.data.frame(t(M_result))</span><br><span class="line">d$Sample_ID&lt;- row.names(d)</span><br><span class="line">M_survival&lt;-  M_pheno_data2[,c(<span class="number">2</span>,<span class="number">8</span>)]</span><br><span class="line">e&lt;- merge(d, M_survival, by = <span class="string">'Sample_ID'</span>)</span><br><span class="line">e&lt;- e[,-<span class="number">1</span>]</span><br><span class="line">mcor2&lt;- cor(e)</span><br><span class="line">cor1&lt;- corrplot(mcor2, method = <span class="string">'shade'</span>, shade.col = <span class="literal">NA</span>, tl.col = <span class="string">'black'</span>, tl.srt = <span class="number">45</span>)</span><br><span class="line"><span class="comment">#cor1&lt;- corrplot(mcor2, method = "circle" , shade.col = NA, tl.col = 'black', tl.srt = 45, order = "FPC")</span></span><br><span class="line"><span class="comment">####################################################step4</span></span><br><span class="line">??corrplot</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/08/correlation-analysis/image-20200408172135695.png" alt="image-20200408172135695"></p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>ggplot2</tag>
        <tag>correlation</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>学会使用complexheatmap</title>
    <url>/2019/11/24/complexheatmap/</url>
    <content><![CDATA[<h4 id="最终发现要处理我自己的数据，用maftools-这种工具还是很难达到自己的客制化要求，所以需要使用complexheatmap进行作图"><a href="#最终发现要处理我自己的数据，用maftools-这种工具还是很难达到自己的客制化要求，所以需要使用complexheatmap进行作图" class="headerlink" title="最终发现要处理我自己的数据，用maftools 这种工具还是很难达到自己的客制化要求，所以需要使用complexheatmap进行作图"></a>最终发现要处理我自己的数据，用maftools 这种工具还是很难达到自己的客制化要求，所以需要使用complexheatmap进行作图</h4><p><a href="https://github.com/jokergoo/ComplexHeatmap" target="_blank" rel="noopener">complexheatmap的github</a></p>
<p>使用说明</p>
<p><a href="https://jokergoo.github.io/ComplexHeatmap-reference/book/" target="_blank" rel="noopener">https://jokergoo.github.io/ComplexHeatmap-reference/book/</a></p>
<h2 id="Chapter-7-OncoPrint"><a href="#Chapter-7-OncoPrint" class="headerlink" title="Chapter 7 OncoPrint"></a>Chapter 7 OncoPrint</h2><a id="more"></a>



<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rm(list = ls())   </span><br><span class="line">options()$repos </span><br><span class="line">options()$BioC_mirror</span><br><span class="line">options(BioC_mirror=<span class="string">"https://mirrors.ustc.edu.cn/bioc/"</span>)</span><br><span class="line">options(<span class="string">"repos"</span> = c(CRAN=<span class="string">"https://mirrors.tuna.tsinghua.edu.cn/CRAN/"</span>))</span><br><span class="line">options()$repos </span><br><span class="line">options()$BioC_mirror</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BiocManager::install(<span class="string">"ComplexHeatmap"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">library</span>(ComplexHeatmap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">library</span>(circlize)</span><br><span class="line">mat = read.table(system.file(<span class="string">"extdata"</span>, package = <span class="string">"ComplexHeatmap"</span>,    </span><br><span class="line">                             <span class="string">"tcga_lung_adenocarcinoma_provisional_ras_raf_mek_jnk_signalling.txt"</span>),     </span><br><span class="line">                 header = <span class="literal">TRUE</span>, stringsAsFactors = <span class="literal">FALSE</span>, sep = <span class="string">"\t"</span>)</span><br><span class="line">mat[is.na(mat)] = <span class="string">""</span></span><br><span class="line">rownames(mat) = mat[, <span class="number">1</span>]</span><br><span class="line">mat = mat[, -<span class="number">1</span>]</span><br><span class="line">mat=  mat[, -ncol(mat)]</span><br><span class="line">mat = t(as.matrix(mat))</span><br><span class="line">mat[<span class="number">1</span>:<span class="number">10</span>, <span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">col = c(<span class="string">"HOMDEL"</span> = <span class="string">"blue"</span>, <span class="string">"AMP"</span> = <span class="string">"red"</span>, <span class="string">"MUT"</span> = <span class="string">"#008000"</span>)</span><br><span class="line">alter_fun = list(    </span><br><span class="line">  background = <span class="keyword">function</span>(x, y, w, h) &#123;        </span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>),</span><br><span class="line">              gp = gpar(fill = <span class="string">"#CCCCCC"</span>, col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;,    </span><br><span class="line">  <span class="comment"># big blue    </span></span><br><span class="line">  HOMDEL = <span class="keyword">function</span>(x, y, w, h) &#123;        </span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>),             </span><br><span class="line">              gp = gpar(fill = col[<span class="string">"HOMDEL"</span>], col = <span class="literal">NA</span>))    </span><br><span class="line">  &#125;,    </span><br><span class="line">  <span class="comment"># bug red    </span></span><br><span class="line">  AMP = <span class="keyword">function</span>(x, y, w, h) &#123;        </span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>),             </span><br><span class="line">              gp = gpar(fill = col[<span class="string">"AMP"</span>], col = <span class="literal">NA</span>))    </span><br><span class="line">  &#125;,    </span><br><span class="line">  <span class="comment"># small green   </span></span><br><span class="line">  MUT = <span class="keyword">function</span>(x, y, w, h) &#123;        </span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h*<span class="number">0.33</span>,             </span><br><span class="line">              gp = gpar(fill = col[<span class="string">"MUT"</span>], col = <span class="literal">NA</span>))    </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">column_title = <span class="string">"OncoPrint for TCGA Lung Adenocarcinoma, genes in Ras Raf MEK JNK signalling"</span></span><br><span class="line">heatmap_legend_param = list(title = <span class="string">"Alternations"</span>, at = c(<span class="string">"HOMDEL"</span>, <span class="string">"AMP"</span>, <span class="string">"MUT"</span>),         </span><br><span class="line">                            labels = c(<span class="string">"Deep deletion"</span>, <span class="string">"Amplification"</span>, <span class="string">"Mutation"</span>))</span><br><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, </span><br><span class="line">          col = col, </span><br><span class="line">          column_title = column_title,</span><br><span class="line">          heatmap_legend_param = heatmap_legend_param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除空行和空列 remove_empty_columns = TRUE 和 remove_empty_rows = TRUE</span></span><br><span class="line"></span><br><span class="line">column_title = <span class="string">"OncoPrint for TCGA Lung Adenocarcinoma, genes in Ras Raf MEK JNK signalling"</span></span><br><span class="line">heatmap_legend_param = list(title = <span class="string">"Alternations"</span>, at = c(<span class="string">"HOMDEL"</span>, <span class="string">"AMP"</span>, <span class="string">"MUT"</span>),         labels = c(<span class="string">"Deep deletion"</span>, <span class="string">"Amplification"</span>, <span class="string">"Mutation"</span>))</span><br><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, col = col, column_title = column_title,</span><br><span class="line">          heatmap_legend_param = heatmap_legend_param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行和进行排序 row_order = 1:nrow(mat), column_order = sample_order</span></span><br><span class="line">sample_order = scan(paste0(system.file(<span class="string">"extdata"</span>, package = <span class="string">"ComplexHeatmap"</span>),     <span class="string">"/sample_order.txt"</span>), what = <span class="string">"character"</span>)</span><br><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, col = col,     </span><br><span class="line">          row_order = <span class="number">1</span>:nrow(mat), column_order = sample_order,   </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,    </span><br><span class="line">          column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行和列注释anno_oncoprint_barplot()可以对突变类型进行筛选绘制Bar图。</span></span><br><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, col = col,     </span><br><span class="line">          top_annotation = HeatmapAnnotation (column_barplot = anno_oncoprint_barplot(<span class="string">"MUT"</span>, border = <span class="literal">TRUE</span>, <span class="comment"># only MUT            </span></span><br><span class="line">                                                                                      height = unit(<span class="number">4</span>, <span class="string">"cm"</span>))),    </span><br><span class="line">          right_annotation = rowAnnotation(row_barplot = anno_oncoprint_barplot(c(<span class="string">"AMP"</span>, <span class="string">"HOMDEL"</span>),  <span class="comment"># only AMP and HOMDEL            </span></span><br><span class="line">                                                                                  border = <span class="literal">TRUE</span>, height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),            </span><br><span class="line">                                                                                  axis_param = list(side = <span class="string">"bottom"</span>, labels_rot = <span class="number">90</span>))),   </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,    column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 对行显示位置进行调整pct_side = “right”, row_names_side = “left”                                                                                                                                         </span></span><br><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, col = col,     </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,    </span><br><span class="line">          pct_side = <span class="string">"right"</span>, row_names_side = <span class="string">"left"</span>,    </span><br><span class="line">          column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加样品分组注释</span></span><br><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, col = col,     </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,   </span><br><span class="line">          top_annotation = HeatmapAnnotation(cbar = anno_oncoprint_barplot(),        </span><br><span class="line">                                             foo1 = <span class="number">1</span>:<span class="number">172</span>,       </span><br><span class="line">                                             bar1 = anno_points(<span class="number">1</span>:<span class="number">172</span>)), </span><br><span class="line">          left_annotation = rowAnnotation(foo2 = <span class="number">1</span>:<span class="number">26</span>),    </span><br><span class="line">          right_annotation = rowAnnotation(bar2 = anno_barplot(<span class="number">1</span>:<span class="number">26</span>)),    </span><br><span class="line">          column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br></pre></td></tr></table></figure>







<p><img src="/2019/11/24/complexheatmap/1574586617985.png" alt="1574586617985"></p>
<h2 id="资料一："><a href="#资料一：" class="headerlink" title="资料一："></a>资料一：</h2><p><strong>ComplexHeatmap</strong> <strong>R包是Zuguang Gu编写的，也是现在文章中利用的较多的R包。这个包能实现的功能很强大，今天给大家介绍一下利用ComplexHeatmap R包中的oncoprint绘制突变景观图。</strong></p>
<p><strong>一、文件格式</strong></p>
<p><strong>1、突变矩阵文件</strong></p>
<p><img src="/2019/11/24/complexheatmap/1574586032259.png" alt="1574586032259"></p>
<p><strong>2、排序文件</strong></p>
<p><img src="/2019/11/24/complexheatmap/1574586055324.png" alt="1574586055324"></p>
<p><strong>二、代码和绘图释义</strong></p>
<p>首先需要安装：打开网址<a href="http://www.bioconductor.org/packages/release/bioc/html/ComplexHeatmap.html，找到安装命令：" target="_blank" rel="noopener">http://www.bioconductor.org/packages/release/bioc/html/ComplexHeatmap.html，找到安装命令：</a></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!requireNamespace(<span class="string">"BiocManager"</span>, quietly = <span class="literal">TRUE</span>))    </span><br><span class="line">    install.packages(<span class="string">"BiocManager"</span>)</span><br><span class="line">BiocManager::install(<span class="string">"ComplexHeatmap"</span>)</span><br></pre></td></tr></table></figure>

<p>也可以将此R包下载下来进行本地安装。</p>
<p>安装成功后，输入加载命令</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(ComplexHeatmap)</span><br><span class="line"><span class="keyword">library</span>(circlize)</span><br><span class="line">mat = read.table(system.file(<span class="string">"extdata"</span>, package = <span class="string">"ComplexHeatmap"</span>,     <span class="string">"tcga_lung_adenocarcinoma_provisional_ras_raf_mek_jnk_signalling.txt"</span>),     header = <span class="literal">TRUE</span>, stringsAsFactors = <span class="literal">FALSE</span>, sep = <span class="string">"\t"</span>)</span><br><span class="line">mat[is.na(mat)] = <span class="string">""</span></span><br><span class="line">rownames(mat) = mat[, <span class="number">1</span>]</span><br><span class="line">mat = mat[, -<span class="number">1</span>]</span><br><span class="line">mat=  mat[, -ncol(mat)]</span><br><span class="line">mat = t(as.matrix(mat))</span><br><span class="line">mat[<span class="number">1</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p><strong>mat文件中含有: HOMDEL, AMP and MUT类型突变. 对突变进行颜色和突变分类定义</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">col = c(<span class="string">"HOMDEL"</span> = <span class="string">"blue"</span>, <span class="string">"AMP"</span> = <span class="string">"red"</span>, <span class="string">"MUT"</span> = <span class="string">"#008000"</span>)</span><br><span class="line">alter_fun = list(    </span><br><span class="line">    background = <span class="keyword">function</span>(x, y, w, h) &#123;        </span><br><span class="line">        grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>),</span><br><span class="line">                  gp = gpar(fill = <span class="string">"#CCCCCC"</span>, col = <span class="literal">NA</span>))</span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="comment"># big blue    </span></span><br><span class="line">    HOMDEL = <span class="keyword">function</span>(x, y, w, h) &#123;        </span><br><span class="line">        grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>),             </span><br><span class="line">                  gp = gpar(fill = col[<span class="string">"HOMDEL"</span>], col = <span class="literal">NA</span>))    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="comment"># bug red    </span></span><br><span class="line">    AMP = <span class="keyword">function</span>(x, y, w, h) &#123;        </span><br><span class="line">        grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>),             </span><br><span class="line">                  gp = gpar(fill = col[<span class="string">"AMP"</span>], col = <span class="literal">NA</span>))    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="comment"># small green   </span></span><br><span class="line">    MUT = <span class="keyword">function</span>(x, y, w, h) &#123;        </span><br><span class="line">        grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h*<span class="number">0.33</span>,             </span><br><span class="line">                  gp = gpar(fill = col[<span class="string">"MUT"</span>], col = <span class="literal">NA</span>))    </span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p><strong>column_title 和 heatmap_legend_param定义</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">column_title = <span class="string">"OncoPrint for TCGA Lung Adenocarcinoma, genes in Ras Raf MEK JNK signalling"</span></span><br><span class="line">heatmap_legend_param = list(title = <span class="string">"Alternations"</span>, at = c(<span class="string">"HOMDEL"</span>, <span class="string">"AMP"</span>, <span class="string">"MUT"</span>),         labels = c(<span class="string">"Deep deletion"</span>, <span class="string">"Amplification"</span>, <span class="string">"Mutation"</span>))</span><br><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, col = col, column_title = column_title,</span><br><span class="line">          heatmap_legend_param = heatmap_legend_param)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/complexheatmap/1574586320798.png" alt="1574586320798"></p>
<p><strong>删除空行和空列</strong></p>
<p><strong>remove_empty_columns = TRUE 和 remove_empty_rows = TRUE</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, col = col,     </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,    </span><br><span class="line">          column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/complexheatmap/1574586368264.png" alt="1574586368264"></p>
<p><strong>行和进行排序</strong></p>
<p><strong>row_order = 1:nrow(mat), column_order = sample_order</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sample_order = scan(paste0(system.file(<span class="string">"extdata"</span>, package = <span class="string">"ComplexHeatmap"</span>),     <span class="string">"/sample_order.txt"</span>), what = <span class="string">"character"</span>)</span><br><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, col = col,     </span><br><span class="line">          row_order = <span class="number">1</span>:nrow(mat), column_order = sample_order,   </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,    </span><br><span class="line">          column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574586469803.png" alt="1574586469803"></p>
<p><strong>行和列注释anno_oncoprint_barplot()可以对突变类型进行筛选绘制Bar图。</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, col = col,     </span><br><span class="line">          top_annotation = HeatmapAnnotation (column_barplot = anno_oncoprint_barplot(<span class="string">"MUT"</span>, border = <span class="literal">TRUE</span>, <span class="comment"># only MUT            </span></span><br><span class="line">                                                                                      height = unit(<span class="number">4</span>, <span class="string">"cm"</span>))),    </span><br><span class="line">          right_annotation = rowAnnotation(row_barplot = anno_oncoprint_barplot(c(<span class="string">"AMP"</span>, <span class="string">"HOMDEL"</span>),  <span class="comment"># only AMP and HOMDEL            </span></span><br><span class="line">                                                                                  border = <span class="literal">TRUE</span>, height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),            </span><br><span class="line">                                                                                  axis_param = list(side = <span class="string">"bottom"</span>, labels_rot = <span class="number">90</span>))),   </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,    column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br></pre></td></tr></table></figure>

<p><a href="https://plobimage.ybzhao.com/wp-content/uploads/2016/11/1573059732-3624-5OOTQibS6LBFcXAaou3AJNjf9StQ.jpg" target="_blank" rel="noopener"><img src="/2019/11/24/complexheatmap/1574586404856.png" alt="1574586404856"></a></p>
<p><strong>对行显示位置进行调整pct_side = “right”, row_names_side = “left”</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, col = col,     </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,    </span><br><span class="line">          pct_side = <span class="string">"right"</span>, row_names_side = <span class="string">"left"</span>,    </span><br><span class="line">          column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574586509998.png" alt="1574586509998"></p>
<p><strong>增加样品分组注释</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat,    </span><br><span class="line">          alter_fun = alter_fun, col = col,     </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,   </span><br><span class="line">          top_annotation = HeatmapAnnotation(cbar = anno_oncoprint_barplot(),        </span><br><span class="line">                                             foo1 = <span class="number">1</span>:<span class="number">172</span>,       </span><br><span class="line">                                             bar1 = anno_points(<span class="number">1</span>:<span class="number">172</span>)), </span><br><span class="line">          left_annotation = rowAnnotation(foo2 = <span class="number">1</span>:<span class="number">26</span>),    </span><br><span class="line">          right_annotation = rowAnnotation(bar2 = anno_barplot(<span class="number">1</span>:<span class="number">26</span>)),    </span><br><span class="line">          column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/complexheatmap/1574586559285.png" alt="1574586559285"></p>
<p><strong>绘制一张带有分组注释的突变景观图就完成了，同时还能对此图增加聚类热图来显示更多信息。</strong> </p>
<p><img src="/2019/11/24/complexheatmap/1574586579103.png" alt="1574586579103"></p>
<p><strong>最后自己用测试数据进行绘图，绘制如下：</strong></p>
<p><img src="/2019/11/24/complexheatmap/1574586590025.png" alt="1574586590025"></p>
<h2 id="资料二：ComplexHeatmap画基因突变热图-一"><a href="#资料二：ComplexHeatmap画基因突变热图-一" class="headerlink" title="资料二：ComplexHeatmap画基因突变热图(一)"></a>资料二：ComplexHeatmap画基因突变热图(一)</h2><p>数据格式如下：</p>
<p><img src="/2019/11/24/complexheatmap/7559841-a931de1c72355123.webp" alt="img"></p>
<p>image.png</p>
<p>若某个基因在某个样本中既有deletion又有mutation则以;分隔</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">library(ComplexHeatmap)</span><br><span class="line">library(RColorBrewer)</span><br><span class="line">setwd(<span class="string">"E:/project/r"</span>)</span><br><span class="line">data1&lt;-read.csv(<span class="string">"test_1.csv"</span>,header = T,stringsAsFactors = F,row.names = <span class="number">1</span>)            </span><br><span class="line">col = c(<span class="string">"deletion"</span> = <span class="string">"#1F78B4"</span>, <span class="string">"insertion"</span> = <span class="string">"#33A02C"</span>, <span class="string">"mutation"</span> = <span class="string">"#E31A1C"</span>)</span><br><span class="line">alter_fun = function(x, y, w, h, v) &#123;</span><br><span class="line">  n=sum(v)</span><br><span class="line">  h=h*<span class="number">0</span>.<span class="number">9</span></span><br><span class="line">  grid.rect(x, y, w-unit(<span class="number">0</span>.<span class="number">5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0</span>.<span class="number">5</span>, <span class="string">"mm"</span>), gp = gpar(fill = <span class="string">"#CCCCCC"</span>, col = NA))</span><br><span class="line">  <span class="keyword">if</span>(v[<span class="string">"mutation"</span>])  grid.rect(x, y - h*<span class="number">0</span>.<span class="number">5</span> + <span class="number">0</span>.<span class="number">95</span><span class="symbol">:n/n*h</span>, w*<span class="number">1</span>, <span class="number">1</span>/n*h,  gp = gpar(fill = col[names(which(v))], col = NA), just = <span class="string">"top"</span>)</span><br><span class="line">  <span class="keyword">if</span>(v[<span class="string">"insertion"</span>])    grid.rect(x, y - h*<span class="number">0</span>.<span class="number">5</span> + <span class="number">0</span>.<span class="number">95</span><span class="symbol">:n/n*h</span>, w*<span class="number">1</span>, <span class="number">1</span>/n*h,  gp = gpar(fill = col[names(which(v))], col = NA), just = <span class="string">"top"</span>)</span><br><span class="line">  <span class="keyword">if</span>(v[<span class="string">"deletion"</span>])    grid.rect(x, y - h*<span class="number">0</span>.<span class="number">5</span> + <span class="number">0</span>.<span class="number">95</span><span class="symbol">:n/n*h</span>, w*<span class="number">1</span>, <span class="number">1</span>/n*h,  gp = gpar(fill = col[names(which(v))], col = NA), just = <span class="string">"top"</span>)</span><br><span class="line">&#125;</span><br><span class="line">oncoPrint(data1, get_type = function(x) strsplit(x, <span class="string">";"</span>)[[<span class="number">1</span>]],</span><br><span class="line">          alter_fun = alter_fun, col = col,  row_order = NULL, column_order = NULL, show_column_names = TRUE,</span><br><span class="line">          show_pct = TRUE, show_row_barplot = TRUE,         </span><br><span class="line">          heatmap_legend_param = list(title = <span class="string">"Alternations"</span>, at = c(<span class="string">"insertion"</span>, <span class="string">"mutation"</span>, <span class="string">"deletion"</span>), labels = c(<span class="string">"insertion"</span>, <span class="string">"mutation"</span>, <span class="string">"deletion"</span>)))</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="/2019/11/24/complexheatmap/1575530299847.png" alt="1575530299847"></p>
<p>Rplot.png</p>
<p>其中oncoPrint（）中有些参数可选，可以选择是否隐藏顶部或者左右两边的部分，例如：<br>如果设置这几个参数<br>show_pct = FALSE, show_row_barplot = FALSE, top_annotation = NULL<br>那么最后出来的结果就会是这样的：</p>
<p><img src="/2019/11/24/complexheatmap/1575530309904.png" alt="1575530309904"></p>
<h2 id="资料三：基本突变情况热图绘制，转自生信技能树"><a href="#资料三：基本突变情况热图绘制，转自生信技能树" class="headerlink" title="资料三：基本突变情况热图绘制，转自生信技能树"></a>资料三：基本突变情况热图绘制，转自生信技能树</h2><p>对于测序相关文章，有一张漂亮的基因突变全景图可以为文章增色不少。下面我们就来一步步看怎么绘制漂亮的全景图。</p>
<h3 id="基本热图绘制"><a href="#基本热图绘制" class="headerlink" title="基本热图绘制"></a>基本热图绘制</h3><p>安装R包complexheatmap</p>
<h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mat = read.table(paste0(system.file(<span class="string">"extdata"</span>, package = <span class="string">"ComplexHeatmap"</span>), </span><br><span class="line">                        <span class="string">"/tcga_lung_adenocarcinoma_provisional_ras_raf_mek_jnk_signalling.txt"</span>), </span><br><span class="line">                 header = <span class="literal">TRUE</span>,stringsAsFactors=<span class="literal">FALSE</span>, sep = <span class="string">"\t"</span>)</span><br><span class="line">mat[is.na(mat)] = <span class="string">""</span></span><br><span class="line">mat &lt;- mat[<span class="number">1</span>:<span class="number">50</span>,<span class="number">1</span>:<span class="number">28</span>]</span><br><span class="line">rownames(mat) = mat[, <span class="number">1</span>]</span><br><span class="line">mat = mat[, -<span class="number">1</span>]</span><br><span class="line">mat=  mat[, -ncol(mat)]</span><br><span class="line">mat = t(as.matrix(mat))</span><br><span class="line"><span class="comment">###设置参数</span></span><br><span class="line">col = c(<span class="string">"MUT"</span> = <span class="string">"#008000"</span>, <span class="string">"INDEL"</span> = <span class="string">"red"</span>, <span class="string">"nonstop"</span> = <span class="string">"blue"</span>,<span class="string">"nonsense"</span>= <span class="string">"yellow"</span>)</span><br><span class="line">alter_fun = list(</span><br><span class="line">  background = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), gp = gpar(fill = <span class="string">"#CCCCCC"</span>, col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  INDEL = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), gp = gpar(fill = col[<span class="string">"INDEL"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  nonstop = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), gp = gpar(fill = col[<span class="string">"nonstop"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  MUT = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), gp = gpar(fill = col[<span class="string">"MUT"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  nonsense = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>),  h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), gp = gpar(fill = col[<span class="string">"nonsense"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat, get_type = <span class="keyword">function</span>(x) strsplit(x, <span class="string">";"</span>)[[<span class="number">1</span>]],</span><br><span class="line">          alter_fun = alter_fun, col = col, </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>,show_pct = <span class="literal">TRUE</span>, pct_gp = gpar(fontsize = <span class="number">8</span>),row_names_gp = gpar(fontsize = <span class="number">8</span>),</span><br><span class="line">          column_title = <span class="string">"OncoPrint for TCGA Lung Adenocarcinoma</span></span><br><span class="line"><span class="string">          genes in Ras Raf MEK JNK signalling"</span>,</span><br><span class="line">          heatmap_legend_param = list(title = <span class="string">"Alternations"</span>, at = c(<span class="string">"INDEL"</span>, <span class="string">"nonstop"</span>, <span class="string">"MUT"</span>,<span class="string">"nonsense"</span>), labels = c(<span class="string">"INDEL"</span>, <span class="string">"nonstop"</span>, <span class="string">"Mutation"</span>,<span class="string">"nonsense"</span>)))</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/complexheatmap/1575530322262.png" alt="1575530322262"></p>
<p>image</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mat = read.table(paste0(system.file(<span class="string">"extdata"</span>, package = <span class="string">"ComplexHeatmap"</span>),</span><br><span class="line"><span class="string">"/tcga_lung_adenocarcinoma_provisional_ras_raf_mek_jnk_signalling.txt"</span>),</span><br><span class="line">header = <span class="literal">TRUE</span>,stringsAsFactors=<span class="literal">FALSE</span>, sep = <span class="string">"\t"</span>)</span><br><span class="line">mat[is.na(mat)] = <span class="string">""</span></span><br><span class="line">mat &lt;- mat[<span class="number">1</span>:<span class="number">50</span>,<span class="number">1</span>:<span class="number">28</span>]</span><br><span class="line">rownames(mat) = mat[, <span class="number">1</span>]</span><br><span class="line">mat = mat[, -<span class="number">1</span>]</span><br><span class="line">mat=  mat[, -ncol(mat)]</span><br><span class="line">mat = t(as.matrix(mat))</span><br><span class="line">col = c(<span class="string">"MUT"</span> = <span class="string">"#008000"</span>, <span class="string">"INDEL"</span> = <span class="string">"red"</span>, <span class="string">"nonstop"</span> = <span class="string">"blue"</span>,<span class="string">"nonsense"</span>= <span class="string">"yellow"</span>)</span><br><span class="line">alter_fun = list(</span><br><span class="line">background =  <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w, h, gp = gpar(fill = <span class="string">"white"</span>)),</span><br><span class="line">INDEL = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">w = convertWidth(w, <span class="string">"cm"</span>)</span><br><span class="line">h = convertHeight(h, <span class="string">"cm"</span>)</span><br><span class="line">r = min(unit.c(w, h))*<span class="number">0.5</span></span><br><span class="line">grid.circle(x, y, r*<span class="number">0.5</span>, gp = gpar(fill = col[<span class="string">"INDEL"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">&#125;,</span><br><span class="line">nonstop = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">w = convertWidth(w, <span class="string">"cm"</span>)</span><br><span class="line">h = convertHeight(h, <span class="string">"cm"</span>)</span><br><span class="line">r = min(unit.c(w, h))*<span class="number">0.5</span></span><br><span class="line">grid.circle(x, y, r*<span class="number">0.5</span>, gp = gpar(fill = col[<span class="string">"nonstop"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">&#125;,</span><br><span class="line">MUT = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">w = convertWidth(w, <span class="string">"cm"</span>)</span><br><span class="line">h = convertHeight(h, <span class="string">"cm"</span>)</span><br><span class="line">r = min(unit.c(w, h))*<span class="number">0.5</span></span><br><span class="line">grid.circle(x, y, r*<span class="number">0.5</span>, gp = gpar(fill = col[<span class="string">"MUT"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">&#125;,</span><br><span class="line">nonsense = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">w = convertWidth(w, <span class="string">"cm"</span>)</span><br><span class="line">h = convertHeight(h, <span class="string">"cm"</span>)</span><br><span class="line">r = min(unit.c(w, h))*<span class="number">0.5</span></span><br><span class="line">grid.circle(x, y, r*<span class="number">0.5</span>, gp = gpar(fill = col[<span class="string">"nonsense"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">oncoPrint(mat, get_type = <span class="keyword">function</span>(x) strsplit(x, <span class="string">";"</span>)[[<span class="number">1</span>]],</span><br><span class="line">alter_fun = alter_fun, col = col,</span><br><span class="line">remove_empty_columns = <span class="literal">TRUE</span>,show_pct = <span class="literal">F</span>, pct_gp = gpar(fontsize = <span class="number">8</span>),row_names_gp = gpar(fontsize = <span class="number">8</span>),show_row_barplot = <span class="literal">TRUE</span>,</span><br><span class="line">column_title = <span class="string">"OncoPrint for TCGA Lung Adenocarcinoma</span></span><br><span class="line"><span class="string">genes in Ras Raf MEK JNK signalling"</span>,</span><br><span class="line">heatmap_legend_param = list(title = <span class="string">"Alternations"</span>, at = c(<span class="string">"INDEL"</span>, <span class="string">"nonstop"</span>, <span class="string">"MUT"</span>,<span class="string">"nonsense"</span>), labels = c(<span class="string">"INDEL"</span>, <span class="string">"nonstop"</span>, <span class="string">"Mutation"</span>,<span class="string">"nonsense"</span>)))</span><br></pre></td></tr></table></figure>







<h2 id="资料四："><a href="#资料四：" class="headerlink" title="资料四："></a>资料四：</h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(ComplexHeatmap)</span><br></pre></td></tr></table></figure>



<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mat = read.table(textConnection(</span><br><span class="line"><span class="string">"s1,s2,s3</span></span><br><span class="line"><span class="string">g1,snv;indel,snv,indel</span></span><br><span class="line"><span class="string">g2,,snv;indel,snv</span></span><br><span class="line"><span class="string">g3,snv,,indel;snv"</span>), row.names = <span class="number">1</span>, header = <span class="literal">TRUE</span>, sep = <span class="string">","</span>, stringsAsFactors = <span class="literal">FALSE</span>)</span><br><span class="line">mat = as.matrix(mat)</span><br><span class="line">mat</span><br></pre></td></tr></table></figure>



<p>矩阵是</p>
<p><img src="/2019/11/24/complexheatmap/1574592470240.png" alt="1574592470240"></p>
<p>通过上面的例子，我们可以看到。每个数据基因在不同样本当中如果基因组发生改变就标注为什么改变。如果没有的话，那么就是空白。<code>oncoplot</code>会自动识别以<code>;:,|</code>为分隔符的不同变异。</p>
<h3 id="alter-fun自定义变异如何显示"><a href="#alter-fun自定义变异如何显示" class="headerlink" title="alter_fun自定义变异如何显示"></a>alter_fun自定义变异如何显示</h3><p><code>alter_fun</code>可以自定义不同的变异通过什么样子来进行显示。这个函数包括四个参数<code>x,y,w,h</code>分别代表变异的位置(x,y)以及高度(h)和宽度(w)。我们在得到所有变异的类型之后。在<code>alter_fun</code>函数里面要定义所有的变化特点。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">col = c(snv = <span class="string">"red"</span>, indel = <span class="string">"blue"</span>)</span><br><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = list(</span><br><span class="line">        snv = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="literal">NA</span>)),</span><br><span class="line">        indel = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.4</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    ), col = col)</span><br><span class="line"><span class="comment">## All mutation types: snv, indel</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574592549356.png" alt="1574592549356"></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = <span class="keyword">function</span>(x, y, w, h, v) &#123;</span><br><span class="line">        n = sum(v)  <span class="comment"># how many alterations for current gene in current sample</span></span><br><span class="line">        h = h*<span class="number">0.9</span></span><br><span class="line">        <span class="comment"># use `names(which(v))` to correctly map between `v` and `col`</span></span><br><span class="line">        <span class="keyword">if</span>(n) grid.rect(x, y - h*<span class="number">0.5</span> + <span class="number">1</span>:n/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">            gp = gpar(fill = col[names(which(v))], col = <span class="literal">NA</span>), just = <span class="string">"top"</span>)</span><br><span class="line">    &#125;, col = col)</span><br><span class="line"><span class="comment">## All mutation types: snv, indel</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574592574552.png" alt="1574592574552"></p>
<h4 id="背景设置"><a href="#背景设置" class="headerlink" title="背景设置"></a>背景设置</h4><p><code>alter_fun</code>当中不止可以设置各个变异的参数。同时也可以设置背景的颜色。默认的是没有背景颜色的。我们可以进行进一步的设置。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = list(</span><br><span class="line">        background = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w, h, </span><br><span class="line">            gp = gpar(fill = <span class="string">"#00FF0020"</span>)),</span><br><span class="line">        snv = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="literal">NA</span>)),</span><br><span class="line">        indel = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.4</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    ), col = col)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574592601996.png" alt="1574592601996"></p>
<p>如果不想要背景的话，可以通过<code>background = function(...) NULL,</code>来设置为没有背景。</p>
<h4 id="更加复杂的设定"><a href="#更加复杂的设定" class="headerlink" title="更加复杂的设定"></a>更加复杂的设定</h4><p>有时候我们不只是想要显示不同的颜色。同时还想要在不同变异上面进行标记。例如下面这个</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">set.seed(<span class="number">123</span>)</span><br><span class="line">x1 = sample(c(<span class="string">""</span>, <span class="string">"snv"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">8</span>, <span class="number">2</span>))</span><br><span class="line">x2 = sample(c(<span class="string">""</span>, <span class="string">"indel"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">8</span>, <span class="number">2</span>))</span><br><span class="line">x2[x1 == <span class="string">"snv"</span>] = <span class="string">""</span></span><br><span class="line">x3 = sample(c(<span class="string">""</span>, <span class="string">"intronic"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">x4 = sample(c(<span class="string">""</span>, <span class="string">"exonic"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">x3[x1 == <span class="string">""</span> &amp; x2 == <span class="string">""</span>] = <span class="string">""</span></span><br><span class="line">x4[x1 == <span class="string">""</span> &amp; x2 == <span class="string">""</span>] = <span class="string">""</span></span><br><span class="line">x4[x3 == <span class="string">"intronic"</span>] = <span class="string">""</span></span><br><span class="line">x = apply(cbind(x1, x2, x3, x4), <span class="number">1</span>, <span class="keyword">function</span>(x) &#123;</span><br><span class="line">    x = x[x != <span class="string">""</span>]</span><br><span class="line">    paste(x, collapse = <span class="string">";"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">m = matrix(x, nrow = <span class="number">10</span>, ncol = <span class="number">10</span>, dimnames = list(paste0(<span class="string">"g"</span>, <span class="number">1</span>:<span class="number">10</span>), paste0(<span class="string">"s"</span>, <span class="number">1</span>:<span class="number">10</span>)))</span><br><span class="line">alter_fun = list(</span><br><span class="line">    background = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, gp = gpar(fill = <span class="string">"#CCCCCC"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    <span class="comment"># red rectangles</span></span><br><span class="line">    snv = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, gp = gpar(fill = <span class="string">"red"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    <span class="comment"># blue rectangles</span></span><br><span class="line">    indel = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, gp = gpar(fill = <span class="string">"blue"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    <span class="comment"># dots</span></span><br><span class="line">    intronic = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.points(x, y, pch = <span class="number">16</span>),</span><br><span class="line">    <span class="comment"># crossed lines</span></span><br><span class="line">    exonic = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">        grid.segments(x - w*<span class="number">0.4</span>, y - h*<span class="number">0.4</span>, x + w*<span class="number">0.4</span>, y + h*<span class="number">0.4</span>, gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">        grid.segments(x + w*<span class="number">0.4</span>, y - h*<span class="number">0.4</span>, x - w*<span class="number">0.4</span>, y + h*<span class="number">0.4</span>, gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">ht = oncoPrint(m, alter_fun = alter_fun, col = c(snv = <span class="string">"red"</span>, indel = <span class="string">"blue"</span>))</span><br><span class="line"><span class="comment">## All mutation types: snv, intronic, indel, exonic</span></span><br><span class="line"><span class="comment">## Colors are not defined for: intronic, exonic</span></span><br></pre></td></tr></table></figure>



<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">draw(ht, heatmap_legend_list = list(</span><br><span class="line">    Legend(labels = c(<span class="string">"intronic"</span>, <span class="string">"exonic"</span>), type = <span class="string">"points"</span>, pch = c(<span class="number">16</span>, <span class="number">28</span>))</span><br><span class="line">))</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/complexheatmap/1574592664639.png" alt="1574592664639"></p>
<h3 id="函数的其他参数"><a href="#函数的其他参数" class="headerlink" title="函数的其他参数"></a>函数的其他参数</h3><p><code>show_column_names</code>可以用来定义是否显示列名。 <code>row_names_side</code>定义行名的位置 <code>pct_side</code>定义突变百分比的位置 <code>pct_digits</code>定义突变个数百分比的小数点个数 <code>anno_oncoprint_barplot</code>调整上面和有面barplot的具体参数 <code>heatmap_legend_param</code>定义图例的变化</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat, alter_fun = alter_fun, col = col, </span><br><span class="line">    top_annotation = HeatmapAnnotation(</span><br><span class="line">        cbar = anno_oncoprint_barplot(height = unit(<span class="number">1</span>, <span class="string">"cm"</span>))),</span><br><span class="line">    right_annotation = rowAnnotation(</span><br><span class="line">        rbar = anno_oncoprint_barplot(</span><br><span class="line">            width = unit(<span class="number">4</span>, <span class="string">"cm"</span>),</span><br><span class="line">            axis_param = list(at = c(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">                labels = c(<span class="string">"zero"</span>, <span class="string">"two"</span>, <span class="string">"four"</span>),</span><br><span class="line">                side = <span class="string">"top"</span>,</span><br><span class="line">                labels_rot = <span class="number">0</span>))),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574592696667.png" alt="1574592696667"></p>
<p>如果我们想把右边的图放到左边的话，则可以</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat, alter_fun = alter_fun, col = col, </span><br><span class="line">    left_annotation =  rowAnnotation(</span><br><span class="line">        rbar = anno_oncoprint_barplot(</span><br><span class="line">            axis_param = list(direction = <span class="string">"reverse"</span>)</span><br><span class="line">    )),</span><br><span class="line">    right_annotation = <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574592716333.png" alt="1574592716333"></p>
<h3 id="具体绘图演示"><a href="#具体绘图演示" class="headerlink" title="具体绘图演示"></a>具体绘图演示</h3><p>我们使用TCGA数据库当中一部分突变数据来进行绘图。首先加载数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mat &#x3D; read.table(system.file(&quot;extdata&quot;, package &#x3D; &quot;ComplexHeatmap&quot;, </span><br><span class="line">    &quot;tcga_lung_adenocarcinoma_provisional_ras_raf_mek_jnk_signalling.txt&quot;), </span><br><span class="line">    header &#x3D; TRUE, stringsAsFactors &#x3D; FALSE, sep &#x3D; &quot;\t&quot;)</span><br><span class="line">mat[is.na(mat)] &#x3D; &quot;&quot;</span><br><span class="line">rownames(mat) &#x3D; mat[, 1]</span><br><span class="line">mat &#x3D; mat[, -1]</span><br><span class="line">mat&#x3D;  mat[, -ncol(mat)]</span><br><span class="line">mat &#x3D; t(as.matrix(mat))</span><br><span class="line">mat[1:3, 1:3]</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574592736397.png" alt="1574592736397"></p>
<p>我们发现数据当中存在三种变异分别是<code>HOMDEL, AMP and MUT</code>所以，我们对三种变异进行定义</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">col = c(<span class="string">"HOMDEL"</span> = <span class="string">"blue"</span>, <span class="string">"AMP"</span> = <span class="string">"red"</span>, <span class="string">"MUT"</span> = <span class="string">"#008000"</span>)</span><br><span class="line">alter_fun = list(</span><br><span class="line">    background = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">        grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), </span><br><span class="line">            gp = gpar(fill = <span class="string">"#CCCCCC"</span>, col = <span class="literal">NA</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># big blue</span></span><br><span class="line">    HOMDEL = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">        grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"HOMDEL"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># bug red</span></span><br><span class="line">    AMP = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">        grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"AMP"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># small green</span></span><br><span class="line">    MUT = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">        grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h*<span class="number">0.33</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"MUT"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">column_title = <span class="string">"OncoPrint for TCGA Lung Adenocarcinoma, genes in Ras Raf MEK JNK signalling"</span></span><br><span class="line">heatmap_legend_param = list(title = <span class="string">"Alternations"</span>, at = c(<span class="string">"HOMDEL"</span>, <span class="string">"AMP"</span>, <span class="string">"MUT"</span>), </span><br><span class="line">        labels = c(<span class="string">"Deep deletion"</span>, <span class="string">"Amplification"</span>, <span class="string">"Mutation"</span>))</span><br><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = alter_fun, col = col, </span><br><span class="line">    column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br><span class="line"><span class="comment">## All mutation types: MUT, AMP, HOMDEL</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574592760042.png" alt="1574592760042"></p>
<p>上图我们可以看到有很多样本都没有突变， 这个时候我们就需要去掉这些没有突变的样本。<code>remove_empty_columns</code>和<code>remove_empty_rows</code>可以去掉没有突变的样本或者基因</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = alter_fun, col = col, </span><br><span class="line">    remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,</span><br><span class="line">    column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br><span class="line"><span class="comment">## All mutation types: MUT, AMP, HOMDEL</span></span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/complexheatmap/1574592781033.png" alt="1574592781033"></p>
<p>另外我们可以通过<code>row_order</code>以及<code>column_order</code>来调整分布的顺序</p>
<h3 id="oncoplot注释"><a href="#oncoplot注释" class="headerlink" title="oncoplot注释"></a>oncoplot注释</h3><p>我们可以通过<code>anno_oncoprint_barplot</code>来自定义注释的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun &#x3D; alter_fun, col &#x3D; col, </span><br><span class="line">    top_annotation &#x3D; HeatmapAnnotation(</span><br><span class="line">        column_barplot &#x3D; anno_oncoprint_barplot(&quot;MUT&quot;, border &#x3D; TRUE, # only MUT</span><br><span class="line">            height &#x3D; unit(4, &quot;cm&quot;))),</span><br><span class="line">    right_annotation &#x3D; rowAnnotation(</span><br><span class="line">        row_barplot &#x3D; anno_oncoprint_barplot(c(&quot;AMP&quot;, &quot;HOMDEL&quot;),  # only AMP and HOMDEL</span><br><span class="line">            border &#x3D; TRUE, height &#x3D; unit(4, &quot;cm&quot;), </span><br><span class="line">            axis_param &#x3D; list(side &#x3D; &quot;bottom&quot;, labels_rot &#x3D; 90))),</span><br><span class="line">    remove_empty_columns &#x3D; TRUE, remove_empty_rows &#x3D; TRUE,</span><br><span class="line">    column_title &#x3D; column_title, heatmap_legend_param &#x3D; heatmap_legend_param)</span><br><span class="line">## All mutation types: MUT, AMP, HOMDEL</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574592796451.png" alt="1574592796451"></p>
<p>另外由于<code>oncoplot</code>本身就是热图。所以我们可以在原始的基础上添加别的注释</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = alter_fun, col = col, </span><br><span class="line">    remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,</span><br><span class="line">    top_annotation = HeatmapAnnotation(cbar = anno_oncoprint_barplot(),</span><br><span class="line">        foo1 = <span class="number">1</span>:<span class="number">172</span>,</span><br><span class="line">        bar1 = anno_points(<span class="number">1</span>:<span class="number">172</span>)),</span><br><span class="line">    left_annotation = rowAnnotation(foo2 = <span class="number">1</span>:<span class="number">26</span>),</span><br><span class="line">    right_annotation = rowAnnotation(bar2 = anno_barplot(<span class="number">1</span>:<span class="number">26</span>)),</span><br><span class="line">    column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br><span class="line"><span class="comment">## All mutation types: MUT, AMP, HOMDEL</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574592818066.png" alt="1574592818066"></p>
<h3 id="oncplot和heatmap连接"><a href="#oncplot和heatmap连接" class="headerlink" title="oncplot和heatmap连接"></a>oncplot和heatmap连接</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ht_list = oncoPrint(mat,</span><br><span class="line">    alter_fun = alter_fun, col = col, </span><br><span class="line">    column_title = column_title, heatmap_legend_param = heatmap_legend_param) +</span><br><span class="line">Heatmap(matrix(rnorm(nrow(mat)*<span class="number">10</span>), ncol = <span class="number">10</span>), name = <span class="string">"expr"</span>, width = unit(<span class="number">4</span>, <span class="string">"cm"</span>))</span><br><span class="line"><span class="comment">## All mutation types: MUT, AMP, HOMDEL</span></span><br><span class="line">draw(ht_list, row_split = sample(c(<span class="string">"a"</span>, <span class="string">"b"</span>), nrow(mat), replace = <span class="literal">TRUE</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574592840818.png" alt="1574592840818"></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ht_list = oncoPrint(mat,</span><br><span class="line">    alter_fun = alter_fun, col = col, </span><br><span class="line">    column_title = column_title, heatmap_legend_param = heatmap_legend_param) %v%</span><br><span class="line">Heatmap(matrix(rnorm(ncol(mat)*<span class="number">10</span>), nrow = <span class="number">10</span>), name = <span class="string">"expr"</span>, height = unit(<span class="number">4</span>, <span class="string">"cm"</span>))</span><br><span class="line"><span class="comment">## All mutation types: MUT, AMP, HOMDEL</span></span><br><span class="line">draw(ht_list)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/complexheatmap/1574592856189.png" alt="1574592856189"></p>
<h2 id="资料五：如何制作complexheatmap需要的文件"><a href="#资料五：如何制作complexheatmap需要的文件" class="headerlink" title="资料五：如何制作complexheatmap需要的文件"></a>资料五：如何制作complexheatmap需要的文件</h2><p>​       在之前画图的时候，输入的excel是自己手动输入的，如果样本量较大或者说基因较多时，手动输入就显得非常麻烦，尤其是我想将annovar的注释结果画成这种图时，就比较麻烦，因此这里写了一个python脚本，用于annovar结果的转换。需要准备两个文件：sample_merge.csv、sample_merge_by_gene.csv，如：<br>sample_merge.csv：</p>
<p><img src="/2019/11/24/complexheatmap/1574729399332.png" alt="1574729399332"></p>
<p>sample_merge.csv</p>
<p>在annovar的输出结果中添加一些列，这里必须的是Tumor_Sample_Barcode这一列，即所有的样本名称。<br>sample_merge_by_gene.csv：</p>
<blockquote>
<p>rownames 代表基因名，colnames 代表各个样本名。</p>
</blockquote>
<p><img src="/2019/11/24/complexheatmap/1574729412061.png" alt="1574729412061"></p>
<p>sample_merge_by_gene.csv</p>
<p>这个文件也是将annovar的结果做一些处理，将每个样本按照突变的基因合并，<strong>这个直接用R非常容易。</strong>       </p>
<p>有了这两个文件之后就可以使用这个python脚本了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">pd.options.mode.chained_assignment = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'all_filter_sample_merge.csv'</span>)</span><br><span class="line">dff = df[[<span class="string">'Tumor_Sample_Barcode'</span>,<span class="string">'Gene.refGene'</span>,<span class="string">'Ref'</span>,<span class="string">'Alt'</span>]]</span><br><span class="line">dff[<span class="string">'rlen'</span>] = dff[<span class="string">'Ref'</span>].apply(len) <span class="comment"># 获取列表长度</span></span><br><span class="line">dff[<span class="string">'alen'</span>] = dff[<span class="string">'Alt'</span>].apply(len)</span><br><span class="line">df1 = pd.read_csv(<span class="string">'all_sample_filter_gene_merge.csv'</span>)</span><br><span class="line">df1.rename(columns=&#123;<span class="string">'Gene.refGene'</span>:<span class="string">'sample'</span>&#125;, inplace = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mut_type</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        <span class="keyword">return</span>(<span class="string">'deletion'</span>)</span><br><span class="line">    <span class="keyword">elif</span> a == b:</span><br><span class="line">        <span class="keyword">return</span>(<span class="string">'mutation'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span>(<span class="string">'insertion'</span>)</span><br><span class="line">dff[<span class="string">'mut_type'</span>] = dff[[<span class="string">'rlen'</span>,<span class="string">'alen'</span>]].apply(<span class="keyword">lambda</span> dff:mut_type(dff[<span class="string">'rlen'</span>],dff[<span class="string">'alen'</span>]),axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 这里也就是在dff这个列表中，增加了mut_type这一列</span></span><br><span class="line"><span class="comment"># Python中的lambda和apply用法：需要学习</span></span><br><span class="line"></span><br><span class="line">sample = df1.columns.tolist() <span class="comment">#numpy tolist()的用法，将数组或者矩阵转换成列表</span></span><br><span class="line">sample.remove(<span class="string">'sample'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mut_type</span><span class="params">(sp,gene)</span>:</span></span><br><span class="line">    mut = dff[(dff[<span class="string">'Tumor_Sample_Barcode'</span>]==sp) &amp; (dff[<span class="string">'Gene.refGene'</span>]==gene)]</span><br><span class="line">    types = mut[[<span class="string">'mut_type'</span>]].drop_duplicates()[<span class="string">'mut_type'</span>].tolist()</span><br><span class="line">    mt = <span class="string">";"</span>.join(types)</span><br><span class="line">    <span class="keyword">return</span>(mt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> range(<span class="number">1</span>,df1.shape[<span class="number">1</span>]):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>,df1.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> df1.iloc[n,s] != <span class="number">0</span>:</span><br><span class="line">            gene = df1.iloc[n,<span class="number">0</span>]</span><br><span class="line">            sp = sample[s<span class="number">-1</span>]</span><br><span class="line">            mut = get_mut_type(sp,gene)</span><br><span class="line">            df1.iloc[n,s] = mut</span><br><span class="line">        </span><br><span class="line">df1 = df1.replace(<span class="number">0</span>,np.nan)</span><br><span class="line">df2 = df1.T</span><br><span class="line">df2.to_csv(<span class="string">'csv2complex.csv'</span>,header=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>





<p>最后的运行结果就是之前的输入格式：</p>
<p><img src="/2019/11/24/complexheatmap/1574729420960.png" alt="1574729420960"></p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>heatmap</tag>
        <tag>annovar</tag>
        <tag>maftools</tag>
      </tags>
  </entry>
  <entry>
    <title>Maftools的一些函数</title>
    <url>/2019/12/05/coOncoplot/</url>
    <content><![CDATA[<h3 id="Maftools-的一些函数"><a href="#Maftools-的一些函数" class="headerlink" title="Maftools 的一些函数"></a>Maftools 的一些函数</h3><p>print_mat and coOncoplot</p>
<a id="more"></a>



<h4 id="print-mat函数解读"><a href="#print-mat函数解读" class="headerlink" title="print_mat函数解读"></a>print_mat函数解读</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">print_mat = <span class="keyword">function</span>(maf, genes, removeNonMutated = <span class="literal">TRUE</span>, colors = <span class="literal">NULL</span>,</span><br><span class="line">                     bgCol = <span class="string">'gray70'</span>, borderCol = <span class="string">'white'</span>, fontSize = <span class="number">1</span>,</span><br><span class="line">                     plot2 = <span class="literal">FALSE</span>, test = <span class="literal">FALSE</span>, clinicalFeatures = <span class="literal">NULL</span>,</span><br><span class="line">                     additionalFeature = <span class="literal">NULL</span>, additionalFeaturePch = <span class="number">20</span>, additionalFeatureCol = <span class="string">"white"</span>, additionalFeatureCex = <span class="number">0.9</span>,</span><br><span class="line">                     annotationDat = <span class="literal">NULL</span>, annotationColor = <span class="literal">NULL</span>,</span><br><span class="line">                     sortByAnnotation = <span class="literal">FALSE</span>, showBarcodes = <span class="literal">FALSE</span>,</span><br><span class="line">                     title = <span class="literal">NULL</span>, title_size = <span class="number">1.2</span>, barcode_size = <span class="number">1</span>, sepwd_samples = <span class="number">0.1</span>, sepwd_genes = <span class="number">0.1</span>)&#123;</span><br><span class="line"></span><br><span class="line">  tsbs = levels(getSampleSummary(x = maf)[,Tumor_Sample_Barcode])</span><br><span class="line">  genes = as.character(genes)</span><br><span class="line"></span><br><span class="line">  om = createOncoMatrix(m = maf, g = genes)</span><br><span class="line">  <span class="keyword">if</span>(is.null(om))&#123;</span><br><span class="line">    <span class="comment">#nsamps = as.numeric(maf@summary[ID %in% 'Samples', summary])</span></span><br><span class="line">    nsamps = length(tsbs)</span><br><span class="line">    oncoMatrix = matrix(data = <span class="string">""</span>, nrow = length(genes), ncol = nsamps)</span><br><span class="line">    numericMatrix = matrix(data = <span class="number">0</span>, nrow = length(genes), ncol = nsamps)</span><br><span class="line">    colnames(oncoMatrix) = colnames(numericMatrix) = tsbs</span><br><span class="line">    rownames(oncoMatrix) = rownames(numericMatrix) = genes</span><br><span class="line"></span><br><span class="line">    om = list(numericMatrix = numericMatrix, oncoMatrix =oncoMatrix)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mat_origin = om$oncoMatrix</span><br><span class="line">  numMat = om$numericMatrix</span><br><span class="line"></span><br><span class="line">  genes.missing = genes[!genes %<span class="keyword">in</span>% rownames(mat_origin)]</span><br><span class="line">  genes.present = genes[genes %<span class="keyword">in</span>% rownames(mat_origin)]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(length(genes.present) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    genes.missing.mat = t(matrix(data = <span class="string">''</span>, ncol = ncol(numMat), nrow = length(genes.missing)))</span><br><span class="line">    genes.missing.numat = t(matrix(data = <span class="number">0</span>, ncol = ncol(numMat), nrow = length(genes.missing)))</span><br><span class="line">    colnames(genes.missing.mat) = genes.missing</span><br><span class="line">    colnames(genes.missing.numat) = genes.missing</span><br><span class="line">    mat_origin = rbind(mat_origin, t(genes.missing.mat))</span><br><span class="line">    numMat = rbind(numMat, t(genes.missing.numat))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#remove nonmutated samples to improve visualization</span></span><br><span class="line">  <span class="keyword">if</span>(!removeNonMutated)&#123;</span><br><span class="line">    tsb.include = matrix(data = <span class="number">0</span>, nrow = length(genes),</span><br><span class="line">                         ncol = length(tsbs[!tsbs %<span class="keyword">in</span>% colnames(numMat)]))</span><br><span class="line">    tsb.include.char = matrix(data = <span class="string">''</span>, nrow = length(genes),</span><br><span class="line">                         ncol = length(tsbs[!tsbs %<span class="keyword">in</span>% colnames(numMat)]))</span><br><span class="line">    colnames(tsb.include) = colnames(tsb.include.char) = tsbs[!tsbs %<span class="keyword">in</span>% colnames(numMat)]</span><br><span class="line">    rownames(tsb.include) = rownames(tsb.include.char) = rownames(numMat)</span><br><span class="line">    numMat = cbind(numMat, tsb.include)</span><br><span class="line">    mat_origin = cbind(mat_origin, tsb.include.char)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  numMat = numMat[genes, , drop = <span class="literal">FALSE</span>]</span><br><span class="line">  mat_origin = mat_origin[genes, , drop = <span class="literal">FALSE</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">#Parse annotations</span></span><br><span class="line">  <span class="keyword">if</span>(!is.null(clinicalFeatures))&#123;</span><br><span class="line">    <span class="keyword">if</span>(is.null(annotationDat))&#123;</span><br><span class="line">      annotation = parse_annotation_dat(annotationDat = maf, clinicalFeatures = clinicalFeatures)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      annotation = parse_annotation_dat(annotationDat = annotationDat, clinicalFeatures = clinicalFeatures)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sortByAnnotation)&#123;</span><br><span class="line">      numMat = sortByAnnotation(numMat = numMat, maf = maf, anno = annotation)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(is.null(colors))&#123;</span><br><span class="line">    vc_col = get_vcColors()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    vc_col = colors</span><br><span class="line">  &#125;</span><br><span class="line">  vc_codes = om$vc <span class="comment">#VC codes</span></span><br><span class="line"></span><br><span class="line">  percent_alt = paste0(round((apply(numMat, <span class="number">1</span>, <span class="keyword">function</span>(x) length(x[x != <span class="number">0</span>])) / length(tsbs)) * <span class="number">100</span>), <span class="string">"%"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(plot2)&#123;</span><br><span class="line">    <span class="keyword">if</span>(is.null(clinicalFeatures))&#123;</span><br><span class="line">      <span class="keyword">if</span>(showBarcodes)&#123;</span><br><span class="line">        par(mar = c(<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        par(mar = c(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(showBarcodes)&#123;</span><br><span class="line">        par(mar = c(<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        par(mar = c(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is.null(clinicalFeatures))&#123;</span><br><span class="line">      <span class="keyword">if</span>(showBarcodes)&#123;</span><br><span class="line">        par(mar = c(<span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        par(mar = c(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(showBarcodes)&#123;</span><br><span class="line">        par(mar = c(<span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        par(mar = c(<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(test)&#123;</span><br><span class="line">    <span class="keyword">return</span>(list(numMat, vc_col[om$vc]))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  nm = t(apply(numMat, <span class="number">2</span>, rev))</span><br><span class="line">  nm[nm == <span class="number">0</span>] = <span class="literal">NA</span></span><br><span class="line">  image(x = <span class="number">1</span>:nrow(nm), y = <span class="number">1</span>:ncol(nm), z = nm, axes = <span class="literal">FALSE</span>, xaxt=<span class="string">"n"</span>, yaxt=<span class="string">"n"</span>,</span><br><span class="line">        xlab=<span class="string">""</span>, ylab=<span class="string">""</span>, col = <span class="string">"white"</span>) <span class="comment">#col = "#FC8D62"</span></span><br><span class="line">  <span class="comment">#Plot for all variant classifications</span></span><br><span class="line">  vc_codes_temp = vc_codes[!vc_codes %<span class="keyword">in</span>% c(<span class="string">'Amp'</span>, <span class="string">'Del'</span>)]</span><br><span class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">2</span>:length(names(vc_codes_temp)))&#123;</span><br><span class="line">    vc_code = vc_codes_temp[i]</span><br><span class="line">    col = vc_col[vc_code]</span><br><span class="line">    nm = t(apply(numMat, <span class="number">2</span>, rev))</span><br><span class="line">    nm[nm != names(vc_code)] = <span class="literal">NA</span></span><br><span class="line">    suppressWarnings(image(x = <span class="number">1</span>:nrow(nm), y = <span class="number">1</span>:ncol(nm), z = nm, axes = <span class="literal">FALSE</span>, xaxt=<span class="string">"n"</span>, yaxt=<span class="string">"n"</span>,</span><br><span class="line">          xlab=<span class="string">""</span>, ylab=<span class="string">""</span>, col = col, add = <span class="literal">TRUE</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#Add blanks</span></span><br><span class="line">  nm = t(apply(numMat, <span class="number">2</span>, rev))</span><br><span class="line">  nm[nm != <span class="number">0</span>] = <span class="literal">NA</span></span><br><span class="line">  image(x = <span class="number">1</span>:nrow(nm), y = <span class="number">1</span>:ncol(nm), z = nm, axes = <span class="literal">FALSE</span>, xaxt=<span class="string">"n"</span>, yaxt=<span class="string">"n"</span>, xlab=<span class="string">""</span>, ylab=<span class="string">""</span>, col = bgCol, add = <span class="literal">TRUE</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#Add CNVs if any</span></span><br><span class="line">  mat_origin = mat_origin[rownames(numMat), colnames(numMat), drop = <span class="literal">FALSE</span>]</span><br><span class="line">  mo = t(apply(mat_origin, <span class="number">2</span>, rev))</span><br><span class="line"></span><br><span class="line">  <span class="comment">##Complex events (mutated as well as CN altered)</span></span><br><span class="line">  complex_events = unique(grep(pattern = <span class="string">";"</span>, x = mo, value = <span class="literal">TRUE</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(length(complex_events) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(complex_events))&#123;</span><br><span class="line">      ce = complex_events[i]</span><br><span class="line">      <span class="comment">#mo = t(apply(mat_origin, 2, rev))</span></span><br><span class="line">      ce_idx = which(mo == ce, arr.ind = <span class="literal">TRUE</span>)</span><br><span class="line"></span><br><span class="line">      ce = unlist(strsplit(x = ce, split = <span class="string">";"</span>, fixed = <span class="literal">TRUE</span>))</span><br><span class="line"></span><br><span class="line">      nm_temp = matrix(<span class="literal">NA</span>, nrow = nrow(nm), ncol = ncol(nm))</span><br><span class="line">      nm_temp[ce_idx] = <span class="number">0</span></span><br><span class="line">      image(x = <span class="number">1</span>:nrow(nm_temp), y = <span class="number">1</span>:ncol(nm_temp), z = nm_temp, axes = <span class="literal">FALSE</span>, xaxt=<span class="string">"n"</span>,</span><br><span class="line">            yaxt=<span class="string">"n"</span>, xlab=<span class="string">""</span>, ylab=<span class="string">""</span>, col = vc_col[ce[<span class="number">2</span>]], add = <span class="literal">TRUE</span>)</span><br><span class="line">      points(ce_idx, pch= <span class="number">15</span>, col= vc_col[ce[<span class="number">1</span>]])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  del_idx = which(mo == <span class="string">"Del"</span>, arr.ind = <span class="literal">TRUE</span>)</span><br><span class="line">  amp_idx = which(mo == <span class="string">"Amp"</span>, arr.ind = <span class="literal">TRUE</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(nrow(amp_idx) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    nm_temp = matrix(<span class="literal">NA</span>, nrow = nrow(nm), ncol = ncol(nm))</span><br><span class="line">    nm_temp[amp_idx] = <span class="number">0</span></span><br><span class="line">    image(x = <span class="number">1</span>:nrow(nm_temp), y = <span class="number">1</span>:ncol(nm_temp), z = nm_temp, axes = <span class="literal">FALSE</span>, xaxt=<span class="string">"n"</span>,</span><br><span class="line">          yaxt=<span class="string">"n"</span>, xlab=<span class="string">""</span>, ylab=<span class="string">""</span>, col = bgCol, add = <span class="literal">TRUE</span>)</span><br><span class="line">    points(amp_idx, pch= <span class="number">15</span>, col= vc_col[<span class="string">'Amp'</span>], cex = <span class="number">1.5</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(nrow(del_idx) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    nm_temp = matrix(<span class="literal">NA</span>, nrow = nrow(nm), ncol = ncol(nm))</span><br><span class="line">    nm_temp[del_idx] = <span class="number">0</span></span><br><span class="line">    image(x = <span class="number">1</span>:nrow(nm_temp), y = <span class="number">1</span>:ncol(nm_temp), z = nm_temp, axes = <span class="literal">FALSE</span>, xaxt=<span class="string">"n"</span>,</span><br><span class="line">          yaxt=<span class="string">"n"</span>, xlab=<span class="string">""</span>, ylab=<span class="string">""</span>, col = bgCol, add = <span class="literal">TRUE</span>)</span><br><span class="line">    points(del_idx, pch= <span class="number">15</span>, col= vc_col[<span class="string">'Del'</span>], cex = <span class="number">1.5</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#Draw if any additional features are requested</span></span><br><span class="line">  additionalFeature_legend = <span class="literal">FALSE</span></span><br><span class="line">  <span class="keyword">if</span>(!is.null(additionalFeature))&#123;</span><br><span class="line">    <span class="keyword">if</span>(length(additionalFeature) &lt; <span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">stop</span>(<span class="string">"additionalFeature must be of length two. See ?oncoplot for details."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    af_dat = subsetMaf(maf = maf, genes = rownames(numMat), tsb = colnames(numMat), fields = additionalFeature[<span class="number">1</span>], includeSyn = <span class="literal">FALSE</span>, mafObj = <span class="literal">FALSE</span>)</span><br><span class="line">    <span class="keyword">if</span>(length(which(colnames(af_dat) == additionalFeature[<span class="number">1</span>])) == <span class="number">0</span>)&#123;</span><br><span class="line">      message(paste0(<span class="string">"Column "</span>, additionalFeature[<span class="number">1</span>], <span class="string">" not found in maf. Here are available fields.."</span>))</span><br><span class="line">      print(getFields(maf))</span><br><span class="line">      <span class="keyword">stop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    colnames(af_dat)[which(colnames(af_dat) == additionalFeature[<span class="number">1</span>])] = <span class="string">'temp_af'</span></span><br><span class="line">    af_dat = af_dat[temp_af %<span class="keyword">in</span>% additionalFeature[<span class="number">2</span>]]</span><br><span class="line">    <span class="keyword">if</span>(nrow(af_dat) == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">warning</span>(paste0(<span class="string">"No samples are enriched for "</span>, additionalFeature[<span class="number">2</span>], <span class="string">" in "</span>, additionalFeature[<span class="number">1</span>]))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      af_mat = data.table::dcast(data = af_dat, Tumor_Sample_Barcode ~ Hugo_Symbol, value.var = <span class="string">"temp_af"</span>, fun.aggregate = length)</span><br><span class="line">      af_mat = as.matrix(af_mat, rownames = <span class="string">"Tumor_Sample_Barcode"</span>)</span><br><span class="line"></span><br><span class="line">      nm = t(apply(numMat, <span class="number">2</span>, rev))</span><br><span class="line"></span><br><span class="line">      lapply(seq_len(nrow(af_mat)), <span class="keyword">function</span>(i)&#123;</span><br><span class="line">        af_i = af_mat[i,, drop = <span class="literal">FALSE</span>]</span><br><span class="line">        af_i_genes = colnames(af_i)[which(af_i &gt; <span class="number">0</span>)]</span><br><span class="line">        af_i_sample = rownames(af_i)</span><br><span class="line"></span><br><span class="line">        lapply(af_i_genes, <span class="keyword">function</span>(ig)&#123;</span><br><span class="line">          af_i_mat = matrix(c(which(rownames(nm) == af_i_sample),</span><br><span class="line">                              which(colnames(nm) == ig)),</span><br><span class="line">                            nrow = <span class="number">1</span>)</span><br><span class="line">          points(af_i_mat, pch = additionalFeaturePch, col= additionalFeatureCol, cex = additionalFeatureCex)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      additionalFeature_legend = <span class="literal">TRUE</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#Add grids</span></span><br><span class="line">  abline(h = (<span class="number">1</span>:ncol(nm)) + <span class="number">0.5</span>, col = borderCol, lwd = sepwd_genes)</span><br><span class="line">  abline(v = (<span class="number">1</span>:nrow(nm)) + <span class="number">0.5</span>, col = borderCol, lwd = sepwd_samples)</span><br><span class="line">  title(title, cex.main = title_size, outer = <span class="literal">FALSE</span>, font = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># mtext(text = colnames(nm), side = 2, at = 1:ncol(nm),</span></span><br><span class="line">  <span class="comment">#       font = 3, line = 0.4, cex = fontSize, las = 2)</span></span><br><span class="line">  <span class="keyword">if</span>(plot2)&#123;</span><br><span class="line">    mtext(text = rev(percent_alt), side = <span class="number">4</span>, at = <span class="number">1</span>:ncol(nm),</span><br><span class="line">          font = <span class="number">1</span>, line = <span class="number">0.4</span>, cex = fontSize, las = <span class="number">2</span>, adj = <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span>(showBarcodes)&#123;</span><br><span class="line">      text(x =<span class="number">1</span>:nrow(nm), y = <span class="number">0.40</span>,</span><br><span class="line">           labels = rownames(nm), srt = <span class="number">90</span>, font = <span class="number">1</span>,</span><br><span class="line">           cex = barcode_size, adj = <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    mtext(text = rev(percent_alt), side = <span class="number">2</span>, at = <span class="number">1</span>:ncol(nm),</span><br><span class="line">          font = <span class="number">1</span>, line = <span class="number">0.4</span>, cex = fontSize, las = <span class="number">2</span>, adj = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(showBarcodes)&#123;</span><br><span class="line">      text(x =<span class="number">1</span>:nrow(nm), y = <span class="number">0.40</span>,</span><br><span class="line">           labels = rownames(nm), srt = <span class="number">90</span>, font = <span class="number">1</span>,</span><br><span class="line">           cex = barcode_size, adj = <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#Color codes for annoations</span></span><br><span class="line">  <span class="keyword">if</span>(!is.null(clinicalFeatures))&#123;</span><br><span class="line">    clini_lvls = as.character(unlist(lapply(annotation, <span class="keyword">function</span>(x) unique(as.character(x)))))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is.null(annotationColor))&#123;</span><br><span class="line">      annotationColor = list()</span><br><span class="line">      <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:ncol(annotation))&#123;</span><br><span class="line">        ann_lvls = levels(annotation[,i])</span><br><span class="line">        <span class="keyword">if</span>(length(ann_lvls) &lt;= <span class="number">9</span>)&#123;</span><br><span class="line">          ann_lvls_cols = RColorBrewer::brewer.pal(n = <span class="number">9</span>, name = <span class="string">'Set1'</span>)[<span class="number">1</span>:length(ann_lvls)]</span><br><span class="line">          names(ann_lvls_cols) = ann_lvls</span><br><span class="line">          annotationColor[[i]] = ann_lvls_cols</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          ann_lvls_cols = colors()[sample(x = <span class="number">1</span>:<span class="number">100</span>, size = length(ann_lvls), replace = <span class="literal">FALSE</span>)]</span><br><span class="line">          names(ann_lvls_cols) = ann_lvls</span><br><span class="line">          annotationColor[[i]] = ann_lvls_cols</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      names(annotationColor) = colnames(annotation)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    anno_cols = c()</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(annotationColor))&#123;</span><br><span class="line">      anno_cols = c(anno_cols, annotationColor[[i]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clini_lvls = clini_lvls[!is.na(clini_lvls)]</span><br><span class="line">    names(clini_lvls) = <span class="number">1</span>:length(clini_lvls)</span><br><span class="line">    temp_rownames = rownames(annotation)</span><br><span class="line">    annotation = data.frame(lapply(annotation, as.character),</span><br><span class="line">                            stringsAsFactors = <span class="literal">FALSE</span>, row.names = temp_rownames)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(clini_lvls))&#123;</span><br><span class="line">      annotation[annotation == clini_lvls[i]] = names(clini_lvls[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    annotation = data.frame(lapply(annotation, as.numeric), stringsAsFactors=<span class="literal">FALSE</span>, row.names = temp_rownames)</span><br><span class="line"></span><br><span class="line">    annotation = annotation[colnames(numMat), ncol(annotation):<span class="number">1</span>, drop = <span class="literal">FALSE</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(plot2)&#123;</span><br><span class="line">      par(mar = c(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      par(mar = c(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    image(x = <span class="number">1</span>:nrow(annotation), y = <span class="number">1</span>:ncol(annotation), z = as.matrix(annotation),</span><br><span class="line">          axes = <span class="literal">FALSE</span>, xaxt=<span class="string">"n"</span>, yaxt=<span class="string">"n"</span>, bty = <span class="string">"n"</span>,</span><br><span class="line">          xlab=<span class="string">""</span>, ylab=<span class="string">""</span>, col = <span class="string">"white"</span>) <span class="comment">#col = "#FC8D62"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Plot for all variant classifications</span></span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(names(clini_lvls)))&#123;</span><br><span class="line">      anno_code = clini_lvls[i]</span><br><span class="line">      col = anno_cols[anno_code]</span><br><span class="line">      <span class="comment">#temp_anno = t(apply(annotation, 2, rev))</span></span><br><span class="line">      temp_anno = as.matrix(annotation)</span><br><span class="line">      temp_anno[temp_anno != names(anno_code)] = <span class="literal">NA</span></span><br><span class="line">      suppressWarnings(image(x = <span class="number">1</span>:nrow(temp_anno), y = <span class="number">1</span>:ncol(temp_anno), z = temp_anno,</span><br><span class="line">            axes = <span class="literal">FALSE</span>, xaxt=<span class="string">"n"</span>, yaxt=<span class="string">"n"</span>, xlab=<span class="string">""</span>, ylab=<span class="string">""</span>, col = col, add = <span class="literal">TRUE</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Add grids</span></span><br><span class="line">    abline(h = (<span class="number">1</span>:ncol(nm)) + <span class="number">0.5</span>, col = <span class="string">"white"</span>, lwd = sepwd_genes)</span><br><span class="line">    abline(v = (<span class="number">1</span>:nrow(nm)) + <span class="number">0.5</span>, col = <span class="string">"white"</span>, lwd = sepwd_samples)</span><br><span class="line">    <span class="keyword">if</span>(plot2)&#123;</span><br><span class="line">      mtext(text = colnames(annotation), side = <span class="number">4</span>,</span><br><span class="line">            font = <span class="number">1</span>, line = <span class="number">0.4</span>, cex = fontSize, las = <span class="number">2</span>, at = <span class="number">1</span>:ncol(annotation))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      mtext(text = colnames(annotation), side = <span class="number">2</span>,</span><br><span class="line">            font = <span class="number">1</span>, line = <span class="number">0.4</span>, cex = fontSize, las = <span class="number">2</span>, at = <span class="number">1</span>:ncol(annotation))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(annotationColor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get_m12_annotation_colors = <span class="keyword">function</span>(a1 = <span class="literal">NULL</span>, a1_cf = <span class="literal">NULL</span>,</span><br><span class="line">                                 a2 = <span class="literal">NULL</span> , a2_cf = <span class="literal">NULL</span>)&#123;</span><br><span class="line"></span><br><span class="line">  a1 = parse_annotation_dat(a1, a1_cf)</span><br><span class="line">  a2 = parse_annotation_dat(a2, a2_cf)</span><br><span class="line"></span><br><span class="line">  com_anno = intersect(colnames(a1), colnames(a2))</span><br><span class="line">  cf_cols = list()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(length(com_anno) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(com_anno))&#123;</span><br><span class="line">      cf_temp = com_anno[i]</span><br><span class="line">      com_clini_lvls = unique(c(as.character(unlist(lapply(a1[,cf_temp, drop = <span class="literal">FALSE</span>], <span class="keyword">function</span>(x) unique(as.character(x))))),</span><br><span class="line">                         as.character(unlist(lapply(a2[,cf_temp, drop = <span class="literal">FALSE</span>], <span class="keyword">function</span>(x) unique(as.character(x)))))))</span><br><span class="line">      <span class="keyword">if</span>(length(com_clini_lvls) &lt;= <span class="number">9</span>)&#123;</span><br><span class="line">        ann_lvls_cols = RColorBrewer::brewer.pal(n = <span class="number">9</span>, name = <span class="string">'Set1'</span>)[<span class="number">1</span>:length(com_clini_lvls)]</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ann_lvls_cols = colors()[sample(x = <span class="number">1</span>:<span class="number">100</span>, size = length(com_clini_lvls), replace = <span class="literal">FALSE</span>)]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      cf_cols[[i]] = ann_lvls_cols</span><br><span class="line">      names(cf_cols[[i]]) = com_clini_lvls</span><br><span class="line">      <span class="comment">#print(cf_cols)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  names(cf_cols) = com_anno</span><br><span class="line"></span><br><span class="line">  a1_rest = a1[,colnames(a1)[!colnames(a1) %<span class="keyword">in</span>% com_anno], drop = <span class="literal">FALSE</span>]</span><br><span class="line">  a2_rest = a2[,colnames(a2)[!colnames(a2) %<span class="keyword">in</span>% com_anno], drop = <span class="literal">FALSE</span>]</span><br><span class="line"></span><br><span class="line">  a1_rest_cols = list()</span><br><span class="line">  <span class="keyword">if</span>(ncol(a1_rest) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:ncol(a1_rest))&#123;</span><br><span class="line">      ann_lvls = unique(as.character(a1_rest[,i]))</span><br><span class="line">      <span class="keyword">if</span>(length(ann_lvls) &lt;= <span class="number">9</span>)&#123;</span><br><span class="line">        ann_lvls_cols = RColorBrewer::brewer.pal(n = <span class="number">9</span>, name = <span class="string">'Set1'</span>)[<span class="number">1</span>:length(ann_lvls)]</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ann_lvls_cols = colors()[sample(x = <span class="number">1</span>:<span class="number">100</span>, size = length(ann_lvls), replace = <span class="literal">FALSE</span>)]</span><br><span class="line">      &#125;</span><br><span class="line">      a1_rest_cols[[i]] = ann_lvls_cols</span><br><span class="line">      names(a1_rest_cols[[i]]) = ann_lvls</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  names(a1_rest_cols) = colnames(a1_rest)</span><br><span class="line"></span><br><span class="line">  a2_rest_cols = list()</span><br><span class="line">  <span class="keyword">if</span>(ncol(a2_rest) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:ncol(a2_rest))&#123;</span><br><span class="line">      ann_lvls = unique(as.character(a2_rest[,i]))</span><br><span class="line">      <span class="keyword">if</span>(length(ann_lvls) &lt;= <span class="number">9</span>)&#123;</span><br><span class="line">        ann_lvls_cols = RColorBrewer::brewer.pal(n = <span class="number">9</span>, name = <span class="string">'Set1'</span>)[<span class="number">1</span>:length(ann_lvls)]</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ann_lvls_cols = colors()[sample(x = <span class="number">1</span>:<span class="number">100</span>, size = length(ann_lvls), replace = <span class="literal">FALSE</span>)]</span><br><span class="line">      &#125;</span><br><span class="line">      a2_rest_cols[[i]] = ann_lvls_cols</span><br><span class="line">      names(a2_rest_cols[[i]]) = ann_lvls</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  names(a2_rest_cols) = colnames(a2_rest)</span><br><span class="line">  <span class="comment">#print(c(cf_cols, a1_rest_cols, a2_rest_cols))</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>(c(cf_cols, a1_rest_cols, a2_rest_cols))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="coOncoplot"><a href="#coOncoplot" class="headerlink" title="coOncoplot"></a>coOncoplot</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">coOncoplot = <span class="keyword">function</span>(m1, m2, genes = <span class="literal">NULL</span>, m1Name = <span class="literal">NULL</span>, m2Name = <span class="literal">NULL</span>,</span><br><span class="line">                       clinicalFeatures1 = <span class="literal">NULL</span>, clinicalFeatures2 = <span class="literal">NULL</span>,</span><br><span class="line">                       annotationColor1 = <span class="literal">NULL</span>, annotationColor2 = <span class="literal">NULL</span>, annotationFontSize = <span class="number">1.2</span>,</span><br><span class="line">                       sortByAnnotation1 = <span class="literal">FALSE</span>, sortByAnnotation2 = <span class="literal">FALSE</span>,</span><br><span class="line">                      additionalFeature1 = <span class="literal">NULL</span>, additionalFeaturePch1 = <span class="number">20</span>, additionalFeatureCol1 = <span class="string">"white"</span>, additionalFeatureCex1 = <span class="number">0.9</span>,</span><br><span class="line">                      additionalFeature2 = <span class="literal">NULL</span>, additionalFeaturePch2 = <span class="number">20</span>, additionalFeatureCol2 = <span class="string">"white"</span>, additionalFeatureCex2 = <span class="number">0.9</span>,</span><br><span class="line">                      sepwd_genes1 = <span class="number">0.5</span>, sepwd_samples1 = <span class="number">0.5</span>, sepwd_genes2 = <span class="number">0.5</span>, sepwd_samples2 = <span class="number">0.5</span>,</span><br><span class="line">                       colors = <span class="literal">NULL</span>, removeNonMutated = <span class="literal">TRUE</span>,</span><br><span class="line">                       geneNamefont = <span class="number">0.8</span>, showSampleNames = <span class="literal">FALSE</span>, SampleNamefont = <span class="number">1</span>,</span><br><span class="line">                       legendFontSize = <span class="number">1.2</span>, titleFontSize = <span class="number">1.5</span>, keepGeneOrder=<span class="literal">FALSE</span>,</span><br><span class="line">                       bgCol = <span class="string">"#CCCCCC"</span>, borderCol = <span class="string">"white"</span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(is.null(genes))&#123;</span><br><span class="line">    m1.genes = getGeneSummary(m1)[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">    m2.genes = getGeneSummary(m2)[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">    mdt = merge(m1.genes[,.(Hugo_Symbol, MutatedSamples)], m2.genes[,.(Hugo_Symbol, MutatedSamples)], by = <span class="string">'Hugo_Symbol'</span>, all = <span class="literal">TRUE</span>)</span><br><span class="line">    mdt$MutatedSamples.x[is.na(mdt$MutatedSamples.x)] = <span class="number">0</span></span><br><span class="line">    mdt$MutatedSamples.y[is.na(mdt$MutatedSamples.y)] = <span class="number">0</span></span><br><span class="line">    mdt$max = apply(mdt[,.(MutatedSamples.x, MutatedSamples.y)], <span class="number">1</span>, max)</span><br><span class="line">    mdt = mdt[order(max, decreasing = <span class="literal">TRUE</span>)]</span><br><span class="line"></span><br><span class="line">    genes = mdt[,Hugo_Symbol]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  m1.sampleSize = m1@summary[<span class="number">3</span>, summary]</span><br><span class="line">  m2.sampleSize = m2@summary[<span class="number">3</span>, summary]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(is.null(m1Name))&#123;</span><br><span class="line">    m1Name = <span class="string">'M1'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  m1Name = paste(m1Name, <span class="string">' (N = '</span> , m1.sampleSize, <span class="string">')'</span>,sep = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(is.null(m2Name))&#123;</span><br><span class="line">    m2Name = <span class="string">'M2'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  m2Name = paste(m2Name, <span class="string">' (N = '</span> , m2.sampleSize, <span class="string">')'</span>,sep = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(is.null(colors))&#123;</span><br><span class="line">    vc_col = get_vcColors()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    vc_col = colors</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  m12_annotation_colors = <span class="literal">NULL</span></span><br><span class="line">  <span class="keyword">if</span>(!is.null(clinicalFeatures1) &amp; !is.null(clinicalFeatures2))&#123;</span><br><span class="line">    <span class="keyword">if</span>(is.null(annotationColor1) &amp; is.null(annotationColor2))&#123;</span><br><span class="line">      m12_annotation_colors = get_m12_annotation_colors(a1 = m1, a1_cf = clinicalFeatures1,</span><br><span class="line">                                                        a2 = m2, a2_cf = clinicalFeatures2)</span><br><span class="line">      annotationColor1 = m12_annotation_colors</span><br><span class="line">      annotationColor2 = m12_annotation_colors</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#Get matrix dimensions and legends to adjust plot graphics::layout</span></span><br><span class="line">  nm1 = print_mat(maf = m1, genes = genes, removeNonMutated = removeNonMutated,</span><br><span class="line">                  test = <span class="literal">TRUE</span>, colors = colors)</span><br><span class="line">  nm1_ncol = ncol(nm1[[<span class="number">1</span>]])</span><br><span class="line">  nm1_vc_cols = nm1[[<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">  nm2 = print_mat(maf = m2, genes = genes, removeNonMutated = removeNonMutated,</span><br><span class="line">                  test = <span class="literal">TRUE</span>, colors = colors)</span><br><span class="line">  nm2_ncol = ncol(nm2[[<span class="number">1</span>]])</span><br><span class="line">  nm2_vc_cols = nm2[[<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!is.null(clinicalFeatures1) || !is.null(clinicalFeatures2))&#123;</span><br><span class="line">    mat_lo = mat_lo = matrix(data = c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>), nrow = <span class="number">3</span>, ncol = <span class="number">3</span>, byrow = <span class="literal">TRUE</span>)</span><br><span class="line">    mat_lo = graphics::layout(mat = mat_lo,</span><br><span class="line">                    widths = c(<span class="number">6</span> * (nm1_ncol/nm2_ncol), <span class="number">1.5</span>, <span class="number">6</span>), heights = c(<span class="number">12</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    mat_lo = matrix(data = c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>), nrow = <span class="number">2</span>, ncol = <span class="number">3</span>, byrow = <span class="literal">TRUE</span>)</span><br><span class="line">    mat_lo = graphics::layout(mat = mat_lo,</span><br><span class="line">                    widths = c(<span class="number">6</span> * (nm1_ncol/nm2_ncol), <span class="number">1</span>, <span class="number">6</span>), heights = c(<span class="number">12</span>, <span class="number">4</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  m1_legend = print_mat(maf = m1, genes = genes, removeNonMutated = removeNonMutated,</span><br><span class="line">                        clinicalFeatures = clinicalFeatures1, colors = colors,</span><br><span class="line">                        annotationColor = annotationColor1, barcode_size = SampleNamefont,</span><br><span class="line">                        sortByAnnotation = sortByAnnotation1, fontSize = geneNamefont,</span><br><span class="line">                        title = m1Name, title_size = titleFontSize,</span><br><span class="line">                        showBarcodes = showSampleNames, bgCol = bgCol, borderCol = borderCol,</span><br><span class="line">                        additionalFeature = additionalFeature1, additionalFeaturePch = additionalFeaturePch1,</span><br><span class="line">                        additionalFeatureCex = additionalFeatureCex1, additionalFeatureCol = additionalFeatureCol1, sepwd_genes = sepwd_genes1, sepwd_samples = sepwd_samples1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(is.null(clinicalFeatures1) &amp; !is.null(clinicalFeatures2))&#123;</span><br><span class="line">    plot.new()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(showSampleNames)&#123;</span><br><span class="line">    par(mar = c(<span class="number">5</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>))</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    par(mar = c(<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  nm = matrix(data = <span class="number">1</span>, nrow = <span class="number">1</span>, ncol = length(genes))</span><br><span class="line">  image(x = <span class="number">1</span>:nrow(nm), y = <span class="number">1</span>:ncol(nm), z = nm, axes = <span class="literal">FALSE</span>, xaxt=<span class="string">"n"</span>, yaxt=<span class="string">"n"</span>,</span><br><span class="line">        xlab=<span class="string">""</span>, ylab=<span class="string">""</span>, col = <span class="string">"white"</span>)</span><br><span class="line">  mtext(text = rev(genes), side = <span class="number">2</span>, adj = <span class="number">0.5</span>, at = <span class="number">1</span>:ncol(nm),</span><br><span class="line">        font = <span class="number">3</span>, line = -<span class="number">2</span>, cex = geneNamefont, las = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!is.null(clinicalFeatures1) || !is.null(clinicalFeatures2))&#123;</span><br><span class="line">    plot.new()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  m2_legend = print_mat(maf = m2, genes = genes, removeNonMutated = removeNonMutated,</span><br><span class="line">                        clinicalFeatures = clinicalFeatures2, colors = colors,</span><br><span class="line">                        annotationColor = annotationColor2, barcode_size = SampleNamefont,</span><br><span class="line">                        sortByAnnotation = sortByAnnotation2, fontSize = geneNamefont,</span><br><span class="line">                        title = m2Name, title_size = titleFontSize, plot2 = <span class="literal">TRUE</span>,</span><br><span class="line">                        showBarcodes = showSampleNames, bgCol = bgCol, borderCol = borderCol,</span><br><span class="line">                        additionalFeature = additionalFeature2, additionalFeaturePch = additionalFeaturePch2,</span><br><span class="line">                        additionalFeatureCex = additionalFeatureCex2, additionalFeatureCol = additionalFeatureCol2,</span><br><span class="line">                        sepwd_genes = sepwd_genes2, sepwd_samples = sepwd_samples2)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!is.null(clinicalFeatures1) &amp; is.null(clinicalFeatures2))&#123;</span><br><span class="line">    plot.new()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vc_legend = unique(c(names(nm1_vc_cols), names(nm2_vc_cols)))</span><br><span class="line">  vc_legend = vc_col[vc_legend]</span><br><span class="line">  vc_legend = vc_legend[!is.na(vc_legend)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(is.null(m12_annotation_colors))&#123;</span><br><span class="line">    anno_legend = c(m1_legend, m2_legend)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    anno_legend = m12_annotation_colors</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  par(mar = c(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), xpd = <span class="literal">TRUE</span>)</span><br><span class="line"></span><br><span class="line">  vc_pch = rep(<span class="number">15</span>, length(vc_legend))</span><br><span class="line">  <span class="keyword">if</span>(!is.null(additionalFeature1))&#123;</span><br><span class="line">    vc_legend = c(vc_legend, <span class="string">"gray70"</span>)</span><br><span class="line">    names(vc_legend)[length(vc_legend)] = paste(additionalFeature1, collapse = <span class="string">":"</span>)</span><br><span class="line">    vc_pch = c(vc_pch, additionalFeaturePch1)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!is.null(additionalFeature2))&#123;</span><br><span class="line">    vc_legend = c(vc_legend, <span class="string">"gray70"</span>)</span><br><span class="line">    names(vc_legend)[length(vc_legend)] = paste(additionalFeature2, collapse = <span class="string">":"</span>)</span><br><span class="line">    vc_pch = c(vc_pch, additionalFeaturePch2)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  plot(<span class="literal">NULL</span>,ylab=<span class="string">''</span>,xlab=<span class="string">''</span>, xlim=<span class="number">0</span>:<span class="number">1</span>, ylim=<span class="number">0</span>:<span class="number">1</span>, axes = <span class="literal">FALSE</span>)</span><br><span class="line">  lep = legend(<span class="string">"topleft"</span>, legend = names(vc_legend),</span><br><span class="line">               col = vc_legend, border = <span class="literal">NA</span>, bty = <span class="string">"n"</span>,</span><br><span class="line">               ncol= <span class="number">2</span>, pch = vc_pch, xpd = <span class="literal">TRUE</span>, xjust = <span class="number">0</span>, yjust = <span class="number">0</span>, cex = legendFontSize)</span><br><span class="line"></span><br><span class="line">  x_axp = <span class="number">0</span>+lep$rect$w</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!is.null(anno_legend))&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(anno_legend))&#123;</span><br><span class="line">      <span class="comment">#x = unique(annotation[,i])</span></span><br><span class="line">      x = anno_legend[[i]]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(length(x) &lt;= <span class="number">4</span>)&#123;</span><br><span class="line">        n_col = <span class="number">1</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        n_col = (length(x) %/% <span class="number">4</span>)+<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      lep = legend(x = x_axp, y = <span class="number">1</span>, legend = names(x),</span><br><span class="line">                   col = x, border = <span class="literal">NA</span>,</span><br><span class="line">                   ncol= n_col, pch = <span class="number">15</span>, xpd = <span class="literal">TRUE</span>, xjust = <span class="number">0</span>, bty = <span class="string">"n"</span>,</span><br><span class="line">                   cex = annotationFontSize, title = names(anno_legend)[i], title.adj = <span class="number">0</span>)</span><br><span class="line">      x_axp = x_axp + lep$rect$w</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">#title()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>heatmap</tag>
        <tag>maftools</tag>
      </tags>
  </entry>
  <entry>
    <title>结直肠癌数据库整理</title>
    <url>/2020/05/18/dataset-colorectal-cancer/</url>
    <content><![CDATA[<h2 id="关于肠道菌群"><a href="#关于肠道菌群" class="headerlink" title="关于肠道菌群"></a>关于肠道菌群</h2><p><a href="https://www.nature.com/articles/d41586-020-00194-2" target="_blank" rel="noopener">https://www.nature.com/articles/d41586-020-00194-2</a></p>
<p>这是nature关于肠道菌群的outlook</p>
<p><a href="https://www.nature.com/articles/d41586-020-00199-x" target="_blank" rel="noopener">https://www.nature.com/articles/d41586-020-00199-x</a></p>
<p>这是肠道菌群和癌症相关的研究的outlook</p>
<p>通过关键字搜索，一共有11 篇文献</p>
<p>colorectal cancer microbiome </p>
<p><a href="https://www.ncbi.nlm.nih.gov/gds/?term=colorectal+cancer+microbiome" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/gds/?term=colorectal+cancer+microbiome</a></p>
<a id="more"></a>

<p>关键字： microbiome</p>
<h4 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h4><p>第一个结果</p>
<p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE141458" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE141458</a></p>
<table>
<thead>
<tr>
<th>Status</th>
<th>Public on Feb 06, 2020</th>
</tr>
</thead>
<tbody><tr>
<td>Title</td>
<td>The intestinal microbiota programs DNA methylation to control tissue homeostasis and inflammation [ATAC-Seq]</td>
</tr>
<tr>
<td>Organism</td>
<td><a href="https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=10090" target="_blank" rel="noopener">Mus musculus</a></td>
</tr>
</tbody></table>
<p>最新上传的数据，但是是小鼠的数据</p>
<p>分成四组</p>
<p>Whole genome methylation analysis of M. musculus.</p>
<p> Four conditions were sequenced and analyzed, </p>
<p><strong>the first is an untreated control,</strong></p>
<p><strong>the second corresponds to inflammation,</strong></p>
<p><strong>the third mice with a germ-free condition and</strong> </p>
<p><strong>the fourth to a germ-free condition in combination with inflammation</strong></p>
<p>GSE137037</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519103521096.png" alt="image-20200519103521096"></p>
<p>包含以下数据</p>
<p>一共是三个数据集：第一个是甲基化测序数据，第二个是RNA测序数据，第三个是ATAC测序数据</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519103511117.png" alt="image-20200519103511117"></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519105405862.png" alt="image-20200519105405862"></p>
<p>可以看到：文章按照不同分组，用流式细胞学筛选出上皮细胞进行上述测序。</p>
<p>所以这篇文章写得是肠道菌群对小鼠小肠的内环境和炎症之间的关系。不是我想要的菌群研究。</p>
<h4 id="第二个篇文章"><a href="#第二个篇文章" class="headerlink" title="第二个篇文章"></a>第二个篇文章</h4><p>Integrated metabolome and transcriptome analyses provide novel insight into colon cancer modulation by the gut microbiota</p>
<p>代谢组学和转录组学分析结肠癌</p>
<p>Overall design    Examination of host transcriptome of the Pirc rat model of human colon cancer, under two gut microbiota conditions</p>
<p>也就是在两种不同的肠道菌群的环境下研究代谢组学和转录组。</p>
<p> Public on Dec 29, 2018</p>
<p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE120934" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE120934</a></p>
<table>
<thead>
<tr>
<th>Platforms (1)</th>
<th><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GPL19052" target="_blank" rel="noopener">GPL19052</a>Illumina MiSeq (Rattus norvegicus)褐家鼠</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>暂时没看到文章发表</p>
<h4 id="第三篇文章"><a href="#第三篇文章" class="headerlink" title="第三篇文章"></a>第三篇文章</h4><p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519130953456.png" alt="image-20200519130953456"></p>
<p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE67634" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE67634</a></p>
<p> Altered interactions between the gut microbiome and colonic mucosa precede polyposis in APCMin/+ mice</p>
<p>2015年的数据</p>
<p>Comparing the differential gene expressions in <strong>proximal colonic mucosal samples</strong> from 6 six-week-old female Apc Min/+ and 6 six-week-old female WT mice</p>
<p>同样使用的是小鼠粘膜标本，而且是差异表达基因，因此也是转录组数据。</p>
<p>对比APC突变和野生型小鼠。</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519131410827.png" alt="image-20200519131410827"></p>
<h4 id="第四篇文章"><a href="#第四篇文章" class="headerlink" title="第四篇文章"></a>第四篇文章</h4><p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519131250811.png" alt="image-20200519131250811"></p>
<p>Public on May 26, 2015</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519131421854.png" alt="image-20200519131421854"></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519131559406.png" alt="image-20200519131559406"></p>
<p>也是简单的转录组测序数据</p>
<h4 id="第五篇文章"><a href="#第五篇文章" class="headerlink" title="第五篇文章"></a>第五篇文章</h4><p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE34730" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE34730</a></p>
<p>也是转录组学数据的研究</p>
<p>无菌vs普通</p>
<p>胆固醇代谢vs无胆固醇代谢</p>
<p>转录组组学数据</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519131903751.png" alt="image-20200519131903751"></p>
<p>这些都不满足要求，因此我只是使用简单的colorectal cancer 作为关键词进行搜索</p>
<h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><h4 id="第一个数据"><a href="#第一个数据" class="headerlink" title="第一个数据"></a>第一个数据</h4><p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE149200" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE149200</a></p>
<p>血清外泌体circRNAs测序</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519132637268.png" alt="image-20200519132637268"></p>
<h4 id="第二个数据"><a href="#第二个数据" class="headerlink" title="第二个数据"></a>第二个数据</h4><p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE84983" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE84983</a></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519132913607.png" alt="image-20200519132913607"></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519132807202.png" alt="image-20200519132807202"></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519132822534.png" alt="image-20200519132822534"></p>
<h4 id="第三个数据"><a href="#第三个数据" class="headerlink" title="第三个数据"></a>第三个数据</h4><p>耐药的研究</p>
<p>Genome-wide single nucleotide resolution of oxaliplatin-DNA adduct repair in drug sensitive and resistant colorectal cancer cell lines</p>
<p>研究奥沙利铂诱导的DNA DNA adduct 修复</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519133643778.png" alt="image-20200519133643778"></p>
<p><strong>耐药可能是DNA修复层面相关</strong></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519133817153.png" alt="image-20200519133817153"></p>
<p>文章使用了XR-seq 专门用于研究这种DNA损伤修复的</p>
<p>nature protocols 2018年专门有研究提到了这种技术。</p>
<p><a href="https://www.nature.com/articles/s41596-018-0093-7" target="_blank" rel="noopener">https://www.nature.com/articles/s41596-018-0093-7</a></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519134111769.png" alt="image-20200519134111769"></p>
<p>可需要学习一下这个技术。</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519134456924.png" alt="image-20200519134456924"></p>
<h4 id="第四个数据"><a href="#第四个数据" class="headerlink" title="第四个数据"></a>第四个数据</h4><p>这是一个大型甲基化数据Public on May 10, 2020</p>
<p>最新发表的</p>
<p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE131013" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE131013</a></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519134927093.png" alt="image-20200519134927093"></p>
<h4 id="第五个数据"><a href="#第五个数据" class="headerlink" title="第五个数据"></a>第五个数据</h4><p>西妥昔单抗相关的数据（EGFR blockade）</p>
<p>120 samples 使用Colorectal Cancer  Derived Xenograft  </p>
<p>转录本芯片数据</p>
<h4 id="第六个数据"><a href="#第六个数据" class="headerlink" title="第六个数据"></a>第六个数据</h4><p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE130750" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE130750</a></p>
<p>T<strong>ankyrase inhibition</strong> suppresses Wnt signaling and tumor growth in APC-mutant colorectal tumors </p>
<p>这个要可以治疗APC突变的结直肠癌</p>
<p>CD44 是重要的干细胞标记物</p>
<p>作者目的啊是想知道这个药物能不能作用于肿瘤干细胞因此，分选出CD44阳性和CD44阴性的肿瘤细胞进行转录组测序</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519140635614.png" alt="image-20200519140635614"></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519140611912.png" alt="image-20200519140611912"></p>
<h4 id="第七个数据"><a href="#第七个数据" class="headerlink" title="第七个数据"></a>第七个数据</h4><p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE122246" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE122246</a></p>
<p>这是一个对辅助化疗是否敏感的数据库</p>
<p>限定了是stage III 行术后辅助化疗的数据</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519141030359.png" alt="image-20200519141030359"></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519140838821.png" alt="image-20200519140838821"></p>
<h4 id="第八个数据"><a href="#第八个数据" class="headerlink" title="第八个数据"></a>第八个数据</h4><p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE145432" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE145432</a></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519142012085.png" alt="image-20200519142012085"></p>
<p>这个数据有以下两个系列</p>
<p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE145428" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE145428</a></p>
<p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE145429" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE145429</a></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519141736799.png" alt="image-20200519141736799"></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519141901968.png" alt="image-20200519141901968"></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519141839077.png" alt="image-20200519141839077"></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519141918132.png" alt="image-20200519141918132"></p>
<p>加起来一共34 sanples</p>
<h4 id="第九个数据"><a href="#第九个数据" class="headerlink" title="第九个数据"></a>第九个数据</h4><p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE131416" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE131416</a></p>
<p>关于</p>
<table>
<thead>
<tr>
<th><strong><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE131416" target="_blank" rel="noopener">Series GSE131416</a></strong><a href="https://www.ncbi.nlm.nih.gov/gds/?term=GSE131416[Accession]" target="_blank" rel="noopener">Query DataSets for GSE131416</a></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Status</td>
<td>Public on May 01, 2020</td>
</tr>
<tr>
<td>Title</td>
<td>p53 exon 11 mutants generated by CRISPR/Cas9 result in aberrant alternative splicing.</td>
</tr>
</tbody></table>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519143411301.png" alt="image-20200519143411301"></p>
<p>研究的是可变剪切</p>
<h4 id="第十个数据"><a href="#第十个数据" class="headerlink" title="第十个数据"></a>第十个数据</h4><p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519143516319.png" alt="image-20200519143516319"></p>
<h4 id="第十一个数据"><a href="#第十一个数据" class="headerlink" title="第十一个数据"></a>第十一个数据</h4><p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE125928" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE125928</a></p>
<p>文章还没有出来，但是有很大参考意义，可以对数据进行进一步研究。</p>
<p>中间有几个变量</p>
<p>5-FU处理细胞，还有一个是使用了Nutlin3a处理细胞。</p>
<p>都是属于两种药物</p>
<p>Nutlin3a作用于P53通路的。</p>
<p>由以下两个数据构成</p>
<table>
<thead>
<tr>
<th><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE125920" target="_blank" rel="noopener">GSE125920</a></th>
<th>Genome-wide screen of transcription co-regulators identifies GLIS2 as a repressor for p53 target genes [RNA-seq]</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE125927" target="_blank" rel="noopener">GSE125927</a></td>
<td>Genome-wide screen of transcription co-regulators identifies GLIS2 as a repressor for p53 target genes [ChIP-seq]</td>
</tr>
</tbody></table>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519144453960.png" alt="image-20200519144453960"></p>
<p><em>DMSO</em>用于<em>细胞</em>冷冻培养基内，可以保护<em>细胞</em>免受冰晶引起的机械性损伤</p>
<p><em>Nutlin-3a</em> is a small molecule that activates the p53 pathway by disrupting p53–MDM2 interaction. </p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519145302828.png" alt="image-20200519145302828"></p>
<p>下面这个是各种的CHIP-seq：P53是个转录因子。</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519145519201.png" alt="image-20200519145519201"></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519145542349.png" alt="image-20200519145542349"></p>
<p>分组非常详细</p>
<h4 id="第十二个数据"><a href="#第十二个数据" class="headerlink" title="第十二个数据"></a>第十二个数据</h4><p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE38174" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE38174</a></p>
<p>转移瘤数据，样本较多</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519150203376.png" alt="image-20200519150203376"></p>
<h4 id="第十二个数据-1"><a href="#第十二个数据-1" class="headerlink" title="第十二个数据"></a>第十二个数据</h4><p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE147044" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE147044</a></p>
<p>小鼠</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519150611068.png" alt="image-20200519150611068"></p>
<p>估计是用转录组学数据，研究免疫，小鼠模型，这是我老本行了。</p>
<h4 id="第十三个数据"><a href="#第十三个数据" class="headerlink" title="第十三个数据"></a>第十三个数据</h4><p>单样本Lynch Syndrome patient</p>
<p>lynch 综合种</p>
<p><a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE146670" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE146670</a></p>
<p>Array Comparative Genomic Hybridization (<em>aCGH</em>) is a high resolution karyotype analysis solution for the detection of unbalanced structural and numerical chromosomal alterations with high-throughput capabilities.</p>
<p>染色体组型分析，染色质变异</p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519151336253.png" alt="image-20200519151336253"></p>
<p><img src="/2020/05/18/dataset-colorectal-cancer/image-20200519151349690.png" alt="image-20200519151349690"></p>
]]></content>
      <tags>
        <tag>research</tag>
        <tag>colorectal cancer</tag>
        <tag>datasets</tag>
        <tag>microbiome</tag>
      </tags>
  </entry>
  <entry>
    <title>单因素多因素回归</title>
    <url>/2019/12/02/cox_regression/</url>
    <content><![CDATA[<h2 id="单因素Cox回归循环function"><a href="#单因素Cox回归循环function" class="headerlink" title="单因素Cox回归循环function"></a>单因素Cox回归循环function</h2><a id="more"></a>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">Uni_cox&lt;- <span class="keyword">function</span>(gene)&#123;</span><br><span class="line">  phe$group=ifelse(exprSet[gene,]&gt;quantile(exprSet[gene,],<span class="number">0.5</span>),<span class="string">'high'</span>,<span class="string">'low'</span>)</span><br><span class="line">  survival_dat &lt;- data.frame(group=phe$group,grade=phe$grade,T_stage=phe$T_stage,N_stage=phe$N_stage,stringsAsFactors = <span class="literal">F</span>)</span><br><span class="line">  mySurv=with(phe,Surv(time, event))</span><br><span class="line">  <span class="comment"># m=coxph(mySurv ~ grade + T_stage +N_stage +group, data =  survival_dat)</span></span><br><span class="line">  m=coxph(mySurv ~ group, data =  survival_dat)</span><br><span class="line">  beta &lt;- coef(m)</span><br><span class="line">  se &lt;- sqrt(diag(vcov(m)))</span><br><span class="line">  HR &lt;- exp(beta)</span><br><span class="line">  HRse &lt;- HR * se</span><br><span class="line"></span><br><span class="line">  <span class="comment">#summary(m)</span></span><br><span class="line">  tmp &lt;- round(cbind(coef = beta, se = se, z = beta/se, p = <span class="number">1</span> - pchisq((beta/se)^<span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">                   HR = HR, HRse = HRse,</span><br><span class="line">                   HRz = (HR - <span class="number">1</span>) / HRse, HRp = <span class="number">1</span> - pchisq(((HR - <span class="number">1</span>)/HRse)^<span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">                   HRCILL = exp(beta - qnorm(<span class="number">.975</span>, <span class="number">0</span>, <span class="number">1</span>) * se),</span><br><span class="line">                   HRCIUL = exp(beta + qnorm(<span class="number">.975</span>, <span class="number">0</span>, <span class="number">1</span>) * se)), <span class="number">7</span>)</span><br><span class="line">  <span class="comment"># rownames(tmp)&lt;- gene</span></span><br><span class="line">  <span class="keyword">return</span>(tmp[<span class="string">'grouplow'</span>,])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Uni_cox(<span class="string">'GPD1L'</span>)</span><br><span class="line">VarNames&lt;- rownames(exprSet)[<span class="number">1</span>:<span class="number">10</span>]</span><br><span class="line">UniVar&lt;- lapply(VarNames,Uni_cox)</span><br><span class="line"><span class="keyword">library</span>(plyr)</span><br><span class="line">Uri_cox_results&lt;- ldply(UniVar)</span><br></pre></td></tr></table></figure>



<p>麦子版本</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ########################## 麦子函数版本</span></span><br><span class="line"><span class="comment"># mySurv=with(phe,Surv(time, event)) </span></span><br><span class="line"><span class="comment"># survival_dat[1:10,1:6]</span></span><br><span class="line"><span class="comment"># survival_dat&lt;- phe</span></span><br><span class="line"><span class="comment"># UniCox&lt;- function(x)&#123;</span></span><br><span class="line"><span class="comment">#   FML&lt;- as.formula(paste0('mySurv~',x))</span></span><br><span class="line"><span class="comment">#   Gcox&lt;- coxph(FML,data = survival_dat)</span></span><br><span class="line"><span class="comment">#   GSum&lt;- summary(Gcox)</span></span><br><span class="line"><span class="comment">#   HR&lt;- round(GSum$coefficients[,2],2)</span></span><br><span class="line"><span class="comment">#   Pvalue&lt;- round(GSum$coefficients[,5],3)</span></span><br><span class="line"><span class="comment">#   CI&lt;- paste0(round(GSum$conf.int[,3:4],2),collapse = '-')</span></span><br><span class="line"><span class="comment">#   Unicox&lt;- data.frame('characterisiics'=x,</span></span><br><span class="line"><span class="comment">#                       'Hazard Ratio'=HR,</span></span><br><span class="line"><span class="comment">#                       'Pval'=Pvalue)</span></span><br><span class="line"><span class="comment">#   return(Unicox)</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br></pre></td></tr></table></figure>

<p>有时候因为基因表达量太低，导致分组时出现错误，解决如下。</p>
<blockquote>
<p>cox_res&lt;- as.data.frame(do.call(‘rbind’, setNames(t(cox_results), names(cox_results)))) ##### 这个太关键了，终于把rownames 搞出来了</p>
</blockquote>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ## 批量生存分析 使用 coxph 回归方法</span></span><br><span class="line">rm(list = ls())</span><br><span class="line">load()</span><br><span class="line">exprSet&lt;- expr_TCGA</span><br><span class="line">phe&lt;- pheno</span><br><span class="line"><span class="keyword">library</span>(survival)</span><br><span class="line"><span class="keyword">library</span>(survminer)</span><br><span class="line">phe$event=as.numeric(phe$event)</span><br><span class="line"></span><br><span class="line">colnames(phe)</span><br><span class="line">mySurv=with(phe,Surv(time, event))</span><br><span class="line">cox_results &lt;-apply(exprSet , <span class="number">1</span> , <span class="keyword">function</span>(gene)&#123;</span><br><span class="line">  phe$group=ifelse(gene&gt;median(gene),<span class="string">'high'</span>,<span class="string">'low'</span>)</span><br><span class="line">  <span class="keyword">if</span>(table(table(phe$group))!=<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment"># survival_dat &lt;- data.frame(group=phe$group,grade=phe$grade,size=phe$size,stringsAsFactors = F)</span></span><br><span class="line">  <span class="comment"># m=coxph(mySurv ~ grade + size + group, data =  survival_dat)</span></span><br><span class="line">  survival_dat &lt;- data.frame(group=phe$group,T_stage=phe$pathologic_T,N_stage=phe$pathologic_N,M_stage=phe$pathologic_M,stringsAsFactors = <span class="literal">F</span>)</span><br><span class="line">  m=coxph(mySurv ~T_stage+N_stage+M_stage + group, data =  survival_dat)</span><br><span class="line">  <span class="comment"># m=coxph(mySurv ~group, data =  survival_dat)</span></span><br><span class="line">  beta &lt;- coef(m)</span><br><span class="line">  se &lt;- sqrt(diag(vcov(m)))</span><br><span class="line">  HR &lt;- exp(beta)</span><br><span class="line">  HRse &lt;- HR * se</span><br><span class="line"></span><br><span class="line">  <span class="comment">#summary(m)</span></span><br><span class="line">  tmp &lt;- round(cbind(coef = beta, se = se, z = beta/se, p = <span class="number">1</span> - pchisq((beta/se)^<span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">                     HR = HR, HRse = HRse,</span><br><span class="line">                     HRz = (HR - <span class="number">1</span>) / HRse, HRp = <span class="number">1</span> - pchisq(((HR - <span class="number">1</span>)/HRse)^<span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">                     HRCILL = exp(beta - qnorm(<span class="number">.975</span>, <span class="number">0</span>, <span class="number">1</span>) * se),</span><br><span class="line">                     HRCIUL = exp(beta + qnorm(<span class="number">.975</span>, <span class="number">0</span>, <span class="number">1</span>) * se)), <span class="number">7</span>)</span><br><span class="line">  <span class="keyword">return</span>(tmp[<span class="string">'grouplow'</span>,])&#125;</span><br><span class="line">  <span class="keyword">if</span>(table(table(phe$group))!=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="literal">NA</span>)&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gene_name&lt;- names(cox_results)</span><br><span class="line"></span><br><span class="line">cox_res&lt;- as.data.frame(do.call(<span class="string">'rbind'</span>, setNames(t(cox_results), names(cox_results)))) <span class="comment">##### 这个太关键了，终于把rownames 搞出来了</span></span><br><span class="line"></span><br><span class="line">save(cox_res,exprSet,phe,file = <span class="string">'./Rdata/surviva_uni_coxph.Rdata'</span>)</span><br></pre></td></tr></table></figure>







<h1 id="Cox-风险比例模型–生存分析"><a href="#Cox-风险比例模型–生存分析" class="headerlink" title="Cox_风险比例模型–生存分析"></a>Cox_风险比例模型–生存分析</h1><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(survival)</span><br><span class="line"><span class="keyword">library</span>(survminer)</span><br><span class="line"></span><br><span class="line">e&lt;- exprSet[gene_name,]</span><br><span class="line">e=log2(e+<span class="number">1</span>)</span><br><span class="line">dim(e)</span><br><span class="line"></span><br><span class="line">dat=cbind(phe,e)</span><br><span class="line">colnames(dat)[ncol(dat)]&lt;- gene_name</span><br><span class="line">dat$pathologic_T[grepl(<span class="string">'T1'</span>,phe$pathologic_T)]&lt;- <span class="string">'T1'</span></span><br><span class="line">dat$pathologic_T[grepl(<span class="string">'T2'</span>,phe$pathologic_T)]&lt;- <span class="string">'T2'</span></span><br><span class="line">dat$pathologic_T[grepl(<span class="string">'T3'</span>,phe$pathologic_T)]&lt;- <span class="string">'T3'</span></span><br><span class="line">dat$pathologic_T[grepl(<span class="string">'T4'</span>,phe$pathologic_T)]&lt;- <span class="string">'T4'</span></span><br><span class="line">dat$pathologic_N[grepl(<span class="string">'N0'</span>,phe$pathologic_N)]&lt;- <span class="string">'N0'</span></span><br><span class="line">dat$pathologic_N[grepl(<span class="string">'N1'</span>,phe$pathologic_N)]&lt;- <span class="string">'N1'</span></span><br><span class="line">dat$pathologic_N[grepl(<span class="string">'N2'</span>,phe$pathologic_N)]&lt;- <span class="string">'N2'</span></span><br><span class="line">dat$pathologic_N[grepl(<span class="string">'N3'</span>,phe$pathologic_N)]&lt;- <span class="string">'N3'</span></span><br><span class="line"><span class="comment"># dat$pathologic_N[grepl('M0',phe$pathologic_M)]&lt;- 'M0'</span></span><br><span class="line"><span class="comment"># dat$pathologic_M[grepl('M1',phe$pathologic_M)]&lt;- 'M1'</span></span><br><span class="line">dat$T_stage=as.numeric(factor(dat$pathologic_T))</span><br><span class="line">dat$N_stage=as.numeric(factor(dat$pathologic_N))</span><br><span class="line"></span><br><span class="line">colnames(dat) </span><br><span class="line">dat2&lt;- na.omit(dat)</span><br><span class="line">mfl&lt;- as.formula(paste0(<span class="string">'Surv(time, event) ~ '</span>,paste0(gene_name,collapse = <span class="string">'+'</span>)))</span><br><span class="line"><span class="comment"># mfl&lt;- as.formula(paste0('Surv(time, event) ~ ',paste0(gene_name,collapse = '+'),'+ T_stage + N_stage'))</span></span><br><span class="line">mfl</span><br><span class="line"><span class="comment"># s=Surv(time, event) ~ NUTM2A + AP003481.1 + CAMSAP3 + LAMC1 + APCDD1L+ SIAE+ UFM1+SRC+ABHD12</span></span><br><span class="line">model &lt;- coxph(mfl, data = dat )</span><br><span class="line"></span><br><span class="line">summary(model,data=dat)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/12/02/cox_regression/1575259971671.png" alt="1575259971671"></p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>regression</tag>
        <tag>单因素cox</tag>
        <tag>多因素cox</tag>
        <tag>survival_analysis</tag>
        <tag>生存分析</tag>
      </tags>
  </entry>
  <entry>
    <title>ggplot-R可视化</title>
    <url>/2019/12/02/ggplot/</url>
    <content><![CDATA[<h2 id="可视化数据探索-R作图ggplot"><a href="#可视化数据探索-R作图ggplot" class="headerlink" title="可视化数据探索 R作图ggplot"></a>可视化数据探索 R作图ggplot</h2><h3 id="ggplot用于发表"><a href="#ggplot用于发表" class="headerlink" title="ggplot用于发表"></a>ggplot用于发表</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">setwd( <span class="string">"E:/R_Project/GEO-undermine/GSE53625_fresh_new"</span>)</span><br><span class="line"><span class="comment">#######################################  单基因的表达</span></span><br><span class="line">rm(list = ls())</span><br><span class="line"><span class="comment"># load(file='./Rdata/step1_common_gene.Rdata')</span></span><br><span class="line">load(file = <span class="string">'./Rdata/!step0_cleaned_phe_exprSer.Rdata'</span>)</span><br><span class="line"><span class="comment"># boxplot(exprSet)</span></span><br><span class="line"><span class="comment"># library('preprocessCore')</span></span><br><span class="line"><span class="comment"># exprSet2&lt;- as.matrix(exprSet)</span></span><br><span class="line"><span class="comment"># exprSet2&lt;- normalize.quantiles(exprSet)</span></span><br><span class="line"><span class="comment"># boxplot(exprSet2,las=2)</span></span><br><span class="line"></span><br><span class="line">exprSet[<span class="number">1</span>:<span class="number">4</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># phe&lt;- phe[phe$V2=='normal',]</span></span><br><span class="line"><span class="comment"># phe&lt;- phe[phe$`Adjuvant therapy`!='yes',]</span></span><br><span class="line">exprSet&lt;- exprSet[,colnames(exprSet)%<span class="keyword">in</span>%phe$GSM_ID]</span><br><span class="line"></span><br><span class="line"><span class="comment"># tmp&lt;- exprSet[grepl('GAPDH',row.names(exprSet)),]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># save(exprSet,file = './Rdata/step2.2_normalization.Rdata')</span></span><br><span class="line"><span class="comment"># a&lt;- as.data.frame(row.names(exprSet))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gene_name&lt;- c('PLAU','SPP1','BGN','NDC80','BUB1B','KIF2C','AURKB','BUB1','CXCL1','CXCL10','CXCL8','MMP9','CDC6','MCM10','MCM2')</span></span><br><span class="line"><span class="comment"># gene_up&lt;- c('COL5A1', 'SPP1', 'COL1A1', 'MMP3', 'MMP1', 'SERPINH1', 'POSTN', 'COL1A2', 'BGN', 'ELN', 'SPARC')</span></span><br><span class="line"><span class="comment"># gene_down&lt;- c('CDC25B', 'CENPF', 'TOP2A', 'KIF4A', 'KIF23', 'AURKA', 'TPX2')</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># gene_diff&lt;- c('COL3A1', 'POSTN', 'BGN', 'ELN', 'SPARC')</span></span><br><span class="line"><span class="comment"># peognostic_gene&lt;- c('BGN','CSTB','GPX3')</span></span><br><span class="line"><span class="comment"># gene_name&lt;-  unique(c(gene_diff,gene_down,gene_up,peognostic_gene))</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># gene_name&lt;- c('THBS2','SEMA3C','ITGB6' ,'ANOS1','JAKMIP3' ,'LINC01197' , 'LNCAROD' , 'LMO7DN', 'SEMA6D' ,'UBE2QL1','NTRK2' , 'MAGEA11','KCNH1' ,  'SLC28A3' ,  'HOXA9' , 'AC106771.1' ,'LINC01733' , 'SULT6B1'  ,'COL22A1', 'PAX1')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gene_name&lt;- c('LINC00551')</span></span><br><span class="line"><span class="comment"># gene_name&lt;- c('MMP3','COL1A1','COL1A2','COL5A1','COL11A1','SERPINE1','THBS2','LUM','BGN','SPP1')</span></span><br><span class="line">gene_name&lt;- c(<span class="string">'MYBL2'</span>,<span class="string">'CDCA5'</span>,<span class="string">'CMC2'</span>,<span class="string">'UBE2C'</span>,<span class="string">'DTL'</span>,<span class="string">'TPX2'</span>,<span class="string">'GINS1'</span>,<span class="string">'KIF20A'</span>,<span class="string">'RNASEH2A'</span>)</span><br><span class="line"><span class="keyword">library</span>(reshape2)</span><br><span class="line"><span class="comment">########### 探索数据   </span></span><br><span class="line"><span class="keyword">library</span>(ggpubr)</span><br><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(reshape2)</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">T</span>)&#123;</span><br><span class="line">  gene_expression&lt;- as.data.frame(t(exprSet[gene_name,]))</span><br><span class="line">  match(colnames(exprSet),phe$GSM_ID)</span><br><span class="line">  gene_expression$group&lt;- factor(phe$V2)</span><br><span class="line">  <span class="comment"># gene_expression$samlple&lt;- rownames(gene_expression)</span></span><br><span class="line">  exprSet_L&lt;- melt(gene_expression,id.vars = c(<span class="string">'group'</span>))</span><br><span class="line">  names(exprSet_L)[<span class="number">2</span>]&lt;- c(<span class="string">'sample'</span>)</span><br><span class="line">  p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_boxplot() + stat_compare_means(method = <span class="string">'wilcox.test'</span>,label=<span class="string">'p.signif'</span>) + theme(axis.title.x  = element_text(angle = <span class="number">0</span>,hjust = <span class="number">.5</span>,vjust = <span class="number">.5</span>))+</span><br><span class="line">  theme(axis.text.x = element_text(angle = <span class="number">0</span>, hjust = <span class="number">0.5</span>, vjust = <span class="number">0.5</span>,size = <span class="number">8</span>))</span><br><span class="line">  print(p)</span><br><span class="line">&#125;</span><br><span class="line">ggsave(<span class="string">'./figure/ggplot_boxplot_module2_version1130.pdf'</span>,p,width = <span class="number">25</span>, height = <span class="number">12.5</span>, units = <span class="string">'cm'</span>)</span><br></pre></td></tr></table></figure>





<a id="more"></a>



<p><img src="/2019/12/02/ggplot/1575355576822.png" alt="1575355576822"></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">exprSet[<span class="string">'GAPDH'</span>,]</span><br><span class="line">exprSet[<span class="string">'ACTB'</span>,]</span><br><span class="line">boxplot(exprSet,las=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>ggplot2 探索数据</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">T</span>)&#123;</span><br><span class="line">  gene_expression&lt;- as.data.frame(exprSet[<span class="string">'COL11A1'</span>,])</span><br><span class="line">  gene_expression$group&lt;- group_list</span><br><span class="line">  exprSet_L&lt;- melt(gene_expression)</span><br><span class="line">  names(exprSet_L)[<span class="number">2</span>]&lt;- c(<span class="string">'sample'</span>)</span><br><span class="line">  p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_boxplot()</span><br><span class="line">  print(p)&#125;</span><br><span class="line">logFC_cutoff &lt;- with(DEG,mean(abs( logFC)) + <span class="number">2</span>*sd(abs( logFC)) )</span><br><span class="line">DEG$change = as.factor(ifelse(DEG$P.Value &lt; <span class="number">0.05</span> &amp; abs(DEG$logFC) &gt; logFC_cutoff,</span><br><span class="line">                              ifelse(DEG$logFC &gt; logFC_cutoff ,<span class="string">'UP'</span>,<span class="string">'DOWN'</span>),<span class="string">'NOT'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="做成合并的图"><a href="#做成合并的图" class="headerlink" title="做成合并的图"></a>做成合并的图</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">gene_name&lt;- c(<span class="string">'PLAU'</span>,<span class="string">'SPP1'</span>,<span class="string">'BGN'</span>,<span class="string">'NDC80'</span>,<span class="string">'BUB1B'</span>,<span class="string">'KIF2C'</span>,<span class="string">'AURKB'</span>,<span class="string">'BUB1'</span>,<span class="string">'CXCL1'</span>,<span class="string">'CXCL10'</span>,<span class="string">'CXCL8'</span>,<span class="string">'MMP9'</span>,<span class="string">'CDC6'</span>,<span class="string">'MCM10'</span>,<span class="string">'MCM2'</span>)</span><br><span class="line"><span class="keyword">library</span>(reshape2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">T</span>)&#123;</span><br><span class="line">  gene_expression&lt;- as.data.frame(t(exprSet[gene_name,]))</span><br><span class="line">  match(colnames(exprSet),phe$submitter_id.samples)</span><br><span class="line">  gene_expression$group&lt;- factor(phe$group_list,levels = c(<span class="string">'tumor'</span>,<span class="string">'normal'</span>))</span><br><span class="line">  <span class="comment"># gene_expression$samlple&lt;- rownames(gene_expression)</span></span><br><span class="line">  exprSet_L&lt;- melt(gene_expression,id.vars = c(<span class="string">'group'</span>))</span><br><span class="line">  names(exprSet_L)[<span class="number">2</span>]&lt;- c(<span class="string">'sample'</span>)</span><br><span class="line">  p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_boxplot()+ stat_compare_means(method = <span class="string">"wilcox.test"</span>,label=<span class="string">"p.signif"</span>)</span><br><span class="line">  ggsave(<span class="string">'./figure/multi_gene_ggplot.pdf'</span>, p)</span><br><span class="line">  print(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2019/12/02/ggplot/1575259896360.png" alt="1575259896360"></p>
<p>exprSet_L</p>
<p><img src="/2019/12/02/ggplot/1575259921759.png" alt="1575259921759"></p>
<p>最终效果</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # Example 2</span></span><br><span class="line"><span class="comment"># #::::::::::::::::::::::::::::::::::::::::::</span></span><br><span class="line"><span class="comment"># ToothGrowth</span></span><br><span class="line"><span class="comment"># class(ToothGrowth)</span></span><br><span class="line"><span class="comment"># ggpaired(ToothGrowth, x = "supp", y = "len",</span></span><br><span class="line"><span class="comment">#          color = "supp", line.color = "gray", </span></span><br><span class="line"><span class="comment">#          facet.by = "dose",</span></span><br><span class="line"><span class="comment">#          line.size = 0.4,</span></span><br><span class="line"><span class="comment">#          palette = "npg")</span></span><br><span class="line"><span class="comment">#######################################  单基因的表达</span></span><br><span class="line">rm(list = ls())</span><br><span class="line"></span><br><span class="line">load(file = <span class="string">'./Rdata/step0.Rdata'</span>)</span><br><span class="line">load(file = <span class="string">'./Rdata/@step00_idtransed.Rdata'</span>)</span><br><span class="line"></span><br><span class="line">exprSet[<span class="number">1</span>:<span class="number">4</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">########### 探索数据 配对数据</span></span><br><span class="line"><span class="comment"># gene_name&lt;- c('PLAU','SPP1','BGN','NDC80')</span></span><br><span class="line"><span class="comment"># gene_name&lt;- c('BUB1B','KIF2C','AURKB','BUB1','CXCL1','CXCL10','CXCL8','MMP9','CDC6','MCM10','MCM2')</span></span><br><span class="line">gene_name&lt;- c(<span class="string">'PLAU'</span>,<span class="string">'SPP1'</span>,<span class="string">'BGN'</span>,<span class="string">'NDC80'</span>,<span class="string">'BUB1B'</span>,<span class="string">'KIF2C'</span>,<span class="string">'AURKB'</span>,<span class="string">'BUB1'</span>,<span class="string">'CXCL1'</span>,<span class="string">'CXCL10'</span>,<span class="string">'CXCL8'</span>,<span class="string">'MMP9'</span>,<span class="string">'CDC6'</span>,<span class="string">'MCM10'</span>,<span class="string">'MCM2'</span>)</span><br><span class="line"><span class="keyword">library</span>(ggpubr)</span><br><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(reshape2)</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">T</span>)&#123;</span><br><span class="line">  gene_expression&lt;- as.data.frame(t(exprSet[gene_name,]))</span><br><span class="line">  match(colnames(exprSet),sample_id$V1)</span><br><span class="line">  gene_expression$group&lt;- factor(sample_id$V2)</span><br><span class="line">  gene_expression$ID&lt;- sample_id$V6</span><br><span class="line">  <span class="comment"># gene_expression$samlple&lt;- rownames(gene_expression)</span></span><br><span class="line">  exprSet_L&lt;- melt(gene_expression,id.vars = c(<span class="string">'group'</span>,<span class="string">'ID'</span>))</span><br><span class="line">  names(exprSet_L)[<span class="number">3</span>]&lt;- c(<span class="string">'gene'</span>)</span><br><span class="line">  exprSet_L&lt;- exprSet_L[order(exprSet_L$group),]</span><br><span class="line">  <span class="comment"># ID 在数据框中，才能保证正确排序</span></span><br><span class="line">  <span class="comment"># 排序这一步很重要</span></span><br><span class="line">  p=ggpaired(exprSet_L, x=<span class="string">"group"</span>, y=<span class="string">"value"</span>, color = <span class="string">"group"</span>, </span><br><span class="line">             facet.by = <span class="string">"gene"</span>,</span><br><span class="line">             line.color = <span class="string">"gray"</span>, </span><br><span class="line">             line.size = <span class="number">0.4</span>, palette = <span class="string">"jco"</span>)+ </span><br><span class="line">    stat_compare_means(paired = <span class="literal">TRUE</span>,method = <span class="string">"wilcox.test"</span>,label=<span class="string">"p.signif"</span>)</span><br><span class="line">  print(p)</span><br><span class="line">&#125;</span><br><span class="line">ggsave(<span class="string">'./figure/ggplot_boxplot_paired_test.pdf'</span>,p,width = <span class="number">20</span>, height = <span class="number">60</span>, units = <span class="string">"cm"</span>)</span><br><span class="line"></span><br><span class="line">?ggplot</span><br><span class="line">?ggsave</span><br></pre></td></tr></table></figure>

<h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="/2019/12/02/ggplot/1575259932449.png" alt="1575259932449"></p>
<h3 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h3><blockquote>
<p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.shixiangwang.top%2Fpost%2Fggpubr-add-pvalue-and-siglevels%2F" target="_blank" rel="noopener">https://www.shixiangwang.top/post/ggpubr-add-pvalue-and-siglevels/</a><br><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.sthda.com%2Fenglish%2Fwiki%2Fcomparing-means-in-r" target="_blank" rel="noopener">http://www.sthda.com/english/wiki/comparing-means-in-r</a><br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F27491381" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27491381</a></p>
</blockquote>
<ul>
<li>Comparing one-sample mean to a standard known mean:<ul>
<li><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.sthda.com%2Fenglish%2Fwiki%2Fone-sample-t-test-in-r" target="_blank" rel="noopener">One-Sample T-test (parametric)</a></li>
<li><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.sthda.com%2Fenglish%2Fwiki%2Fone-sample-wilcoxon-signed-rank-test-in-r" target="_blank" rel="noopener">One-Sample Wilcoxon Test (non-parametric)</a></li>
</ul>
</li>
<li>Comparing the means of two independent groups:<ul>
<li><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.sthda.com%2Fenglish%2Fwiki%2Funpaired-two-samples-t-test-in-r" target="_blank" rel="noopener">Unpaired Two Samples T-test (parametric)</a></li>
<li><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.sthda.com%2Fenglish%2Fwiki%2Funpaired-two-samples-wilcoxon-test-in-r" target="_blank" rel="noopener">Unpaired Two-Samples Wilcoxon Test (non-parametric)</a></li>
</ul>
</li>
<li>Comparing the means of paired samples:<ul>
<li><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.sthda.com%2Fenglish%2Fwiki%2Fpaired-samples-t-test-in-r" target="_blank" rel="noopener">Paired Samples T-test (parametric)</a></li>
<li><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.sthda.com%2Fenglish%2Fwiki%2Fpaired-samples-wilcoxon-test-in-r" target="_blank" rel="noopener">Paired Samples Wilcoxon Test (non-parametric)</a></li>
</ul>
</li>
<li>Comparing the means of more than two groups<ul>
<li>Analysis of variance (ANOVA, parametric):<ul>
<li><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.sthda.com%2Fenglish%2Fwiki%2Fone-way-anova-test-in-r" target="_blank" rel="noopener">One-Way ANOVA Test in R</a></li>
<li><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.sthda.com%2Fenglish%2Fwiki%2Ftwo-way-anova-test-in-r" target="_blank" rel="noopener">Two-Way ANOVA Test in R</a></li>
<li><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.sthda.com%2Fenglish%2Fwiki%2Fmanova-test-in-r-multivariate-analysis-of-variance" target="_blank" rel="noopener">MANOVA Test in R: Multivariate Analysis of Variance</a></li>
</ul>
</li>
<li><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.sthda.com%2Fenglish%2Fwiki%2Fkruskal-wallis-test-in-r" target="_blank" rel="noopener">Kruskal-Wallis Test in R (non parametric alternative to one-way ANOVA)</a></li>
</ul>
</li>
</ul>
<p><img src="/2019/12/02/ggplot/1575259943802.png" alt="1575259943802"></p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>ggplot2</tag>
        <tag>可视化</tag>
        <tag>柱状图</tag>
      </tags>
  </entry>
  <entry>
    <title>NCBI下载SRA数据</title>
    <url>/2019/12/16/download_data_from_NCBI/</url>
    <content><![CDATA[<h1 id="NCBI下载SRA数据——配置aspera"><a href="#NCBI下载SRA数据——配置aspera" class="headerlink" title="NCBI下载SRA数据——配置aspera"></a>NCBI下载SRA数据——配置aspera</h1><h3 id="第0步：为了加快下载速度需要配置aspera网址"><a href="#第0步：为了加快下载速度需要配置aspera网址" class="headerlink" title="第0步：为了加快下载速度需要配置aspera网址"></a>第0步：为了加快下载速度需要配置aspera<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdownloads.asperasoft.com%2Fen%2Fdownloads%2F8%3Flist" target="_blank" rel="noopener">网址</a></h3><p><img src="/2019/12/16/download_data_from_NCBI/13817032-6df18cbba3ad706c.webp" alt="img"></p>
<p>下载页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup wget -c https://download.asperasoft.com/download/sw/connect/3.9.6/ibm-aspera-connect-3.9.6.173386-linux-g2.12-64.tar.gz &amp;</span><br><span class="line"></span><br><span class="line">tar zxvf ibm-aspera-connect-3.9.6.173386-linux-g2.12-64.tar.gz</span><br><span class="line">bash ibm-aspera-connect-3.9.6.173386-linux-g2.12-64.sh </span><br><span class="line">cd # 去根目录</span><br><span class="line">ls -a # 如果看到.aspera文件夹，代表安装成功</span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久添加环境变量</span></span><br><span class="line">echo $PATH </span><br><span class="line"><span class="meta">#</span><span class="bash"> /home/chenyuqiao/miniconda2/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制下来用来备份</span></span><br><span class="line">echo export PATH="/home/chenyuqiao/.aspera/connect/bin:$PATH" &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看帮助文档</span></span><br><span class="line">ascp --help</span><br></pre></td></tr></table></figure>

<h5 id="配置环境变量出错-这一句话就可以补救回来"><a href="#配置环境变量出错-这一句话就可以补救回来" class="headerlink" title="配置环境变量出错,这一句话就可以补救回来"></a>配置环境变量出错,这一句话就可以补救回来</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/<span class="built_in">local</span>/bin</span></span><br></pre></td></tr></table></figure>

<h5 id="下面这句话可以把几乎所有的都补救回来"><a href="#下面这句话可以把几乎所有的都补救回来" class="headerlink" title="下面这句话可以把几乎所有的都补救回来"></a>下面这句话可以把几乎所有的都补救回来</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=/home/chenyuqiao/miniconda2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games</span><br></pre></td></tr></table></figure>

<p>安装成功标志：</p>
<p><img src="/2019/12/16/download_data_from_NCBI/13817032-92dc6dfd8019c493.webp" alt="img"></p>
<p>echo $PATH</p>
<p><img src="/2019/12/16/download_data_from_NCBI/13817032-3975857a8897538d.webp" alt="img"></p>
<p>下载时出现fasp表示安装成功</p>
<h3 id="第一步：找到并下载下载SRR-Acc-List"><a href="#第一步：找到并下载下载SRR-Acc-List" class="headerlink" title="第一步：找到并下载下载SRR_Acc_List"></a>第一步：找到并下载下载SRR_Acc_List</h3><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.ncbi.nlm.nih.gov%2Fsra" target="_blank" rel="noopener">NCBI SRA数据库地址</a><br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.ncbi.nlm.nih.gov%2Fgds%2F%3Fterm%3DGSM2810116" target="_blank" rel="noopener">GEO数据库地址</a><br>Step0：直接在GEO搜索ESCC RNA-seq，点击SRA Run Selector</p>
<p><img src="/2019/12/16/download_data_from_NCBI/13817032-ab86e5a127c141f5.webp" alt="img"></p>
<p>step0：直接在GEO数据库中搜索ESCC RNA-seq即可</p>
<p>step1：找到SRP号（project）不能是SRR号（单个样本）</p>
<p><img src="/2019/12/16/download_data_from_NCBI/13817032-b793f6df3098cc6c.webp" alt="img"></p>
<p>step1：找到SRP号</p>
<p><img src="/2019/12/16/download_data_from_NCBI/13817032-6997755513586253.webp" alt="img"></p>
<p>必须是SRP号，不能使SRR号</p>
<p><img src="/2019/12/16/download_data_from_NCBI/13817032-07aae459cff7b5de.webp" alt="img"></p>
<p>step2</p>
<p><img src="/2019/12/16/download_data_from_NCBI/13817032-028e929e78f8e0c8.webp" alt="img"></p>
<p>step3：下载SRR_Acc_List</p>
<h3 id="第二步下载数据"><a href="#第二步下载数据" class="headerlink" title="第二步下载数据"></a>第二步下载数据</h3><p>激活rna环境后 使用prefetch下载数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">######可以使用循环下载</span></span><br><span class="line">cat SRR_Acc_List.txt |  <span class="keyword">while</span> <span class="built_in">read</span> id; <span class="keyword">do</span> (nohup prefetch <span class="variable">$&#123;id&#125;</span> -O ./original_data 1&gt;log.txt 2&gt;&amp;1 &amp;) ;<span class="keyword">done</span></span><br></pre></td></tr></table></figure>



<p><img src="/2019/12/16/download_data_from_NCBI/13817032-621e09e884f5b0fb.webp" alt="img"></p>
<p>激活rna环境后 使用prefetch下载数据</p>
<p>下载时可以查看硬盘大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">df -sh ./ <span class="comment">###查看当前文件夹大小 disk free human-readable</span></span><br><span class="line">free -h <span class="comment">###应该是内存吧</span></span><br></pre></td></tr></table></figure>



<p><img src="/2019/12/16/download_data_from_NCBI/13817032-a25c8a4d3c157dec.webp" alt="img"></p>
<p>查看硬盘大小</p>
]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>批量下载数据</tag>
      </tags>
  </entry>
  <entry>
    <title>R包安装</title>
    <url>/2019/11/24/install_R_Packages/</url>
    <content><![CDATA[<h3 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h3><p>R-Package的安装最主要的因素在于网络</p>
<p>如果安装失败首先要排除VPN网络原因</p>
<p>Bioconductor version cannot be validated; no internet connection?</p>
<p>如果出现这样的字样，首先要排查的是网络。</p>
<p>我的个人体会是，不需要重新卸载安装R。网络问题解决了，一般问题都能解决。</p>
<h3 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rm(list = ls())   </span><br><span class="line">options()$repos </span><br><span class="line">options()$BioC_mirror</span><br><span class="line">options(BioC_mirror=<span class="string">"https://mirrors.ustc.edu.cn/bioc/"</span>)</span><br><span class="line">options(<span class="string">"repos"</span> = c(CRAN=<span class="string">"https://mirrors.tuna.tsinghua.edu.cn/CRAN/"</span>))</span><br><span class="line"><span class="comment"># options("repos" = c(CRAN="https://mirrors.ustc.edu.cn/CRAN/"))</span></span><br><span class="line">options()$repos </span><br><span class="line">options()$BioC_mirror</span><br></pre></td></tr></table></figure>



<p>更多镜像<a href="https://cran.r-project.org/mirrors.html" target="_blank" rel="noopener">https://cran.r-project.org/mirrors.html</a></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">China</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/CRAN/	TUNA Team, Tsinghua University</span><br><span class="line">https://mirrors.ustc.edu.cn/CRAN/	University of Science and Technology of China</span><br><span class="line">https://mirror-hk.koddos.net/CRAN/	KoDDoS <span class="keyword">in</span> Hong Kong</span><br><span class="line">https://mirror.lzu.edu.cn/CRAN/	Lanzhou University Open Source Society</span><br><span class="line">https://mirrors.tongji.edu.cn/CRAN/	Tongji University</span><br></pre></td></tr></table></figure>





<a id="more"></a>



<h3 id="linux-安装R"><a href="#linux-安装R" class="headerlink" title="linux 安装R"></a>linux 安装R</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install r-base-core</span><br><span class="line">sudo apt upgrade r-base-core</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开R</span></span><br><span class="line">sudo -i R</span><br></pre></td></tr></table></figure>









<p>大神的提醒。。。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 强调，不是所有的R包都需要安装成功的。</span></span><br><span class="line"><span class="comment">## 强调，不是所有的R包都需要安装成功的。</span></span><br><span class="line"><span class="comment">## 强调，不是所有的R包都需要安装成功的。</span></span><br><span class="line"><span class="comment">## 强调，不是所有的R包都需要安装成功的。</span></span><br><span class="line"><span class="comment">## 失败就失败，大不了从头再来，卸载R语言，从新开始。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 强调，中国大陆的粉丝务必注意下载镜像。</span></span><br><span class="line"><span class="comment">## 强调，管是什么电脑，都请务必安装好R及Rstudio哦</span></span><br><span class="line"><span class="comment"># 所有的软件都安装在c盘哦，然后系统用户名最好是不要用中文，写代码最怕中文字符串哦！</span></span><br><span class="line"><span class="comment"># 生信0基础第一步，下载R和Rstudio并且安装在自己的电脑上面。官网链接是 </span></span><br><span class="line"><span class="comment"># - R: https://mirrors.tuna.tsinghua.edu.cn/CRAN/</span></span><br><span class="line"><span class="comment"># - RStudio：https://www.rstudio.com/products/rstudio/download/#download </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rm(list = ls()) </span><br><span class="line"><span class="comment">#清空当前工作空间变量  </span></span><br><span class="line">options()$repos  </span><br><span class="line"><span class="comment">#查看当前工作空间默认的下载包路径</span></span><br><span class="line">options()$BioC_mirror </span><br><span class="line"><span class="comment">#查看使用BioCManager下载包的默认路径</span></span><br><span class="line">options(BioC_mirror=<span class="string">"https://mirrors.ustc.edu.cn/bioc/"</span>) </span><br><span class="line"><span class="comment"># 指定使用BioCManager下载的路径</span></span><br><span class="line">options(<span class="string">"repos"</span> = c(CRAN=<span class="string">"https://mirrors.tuna.tsinghua.edu.cn/CRAN/"</span>)) </span><br><span class="line"><span class="comment"># 指定使用install.packages下载包的路径</span></span><br><span class="line">options()$repos </span><br><span class="line">options()$BioC_mirror</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://bioconductor.org/packages/release/bioc/html/GEOquery.html</span></span><br><span class="line"><span class="keyword">if</span> (!requireNamespace(<span class="string">"BiocManager"</span>, quietly = <span class="literal">TRUE</span>))</span><br><span class="line">  install.packages(<span class="string">"BiocManager"</span>) </span><br><span class="line"><span class="comment">#判断是否存在BiocManger包，没有的话下载该包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#BiocManager::install("KEGG.db",ask = F,update = F)</span></span><br><span class="line"><span class="comment">#BiocManager::install(c("GSEABase","GSVA","clusterProfiler" ),ask = F,update = F)</span></span><br><span class="line"><span class="comment">#BiocManager::install(c("GEOquery","limma","impute" ),ask = F,update = F)</span></span><br><span class="line"><span class="comment">#BiocManager::install(c("genefu","org.Hs.eg.db","hgu133plus2.db" ),ask = F,update = F)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断是否存在这些包，不存在的话安装这些包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"GenomicDataCommons"</span>)) BiocManager::install(<span class="string">"GenomicDataCommons"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"DT"</span>)) BiocManager::install(<span class="string">"DT"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"BSgenome.Hsapiens.UCSC.hg38"</span>)) BiocManager::install(<span class="string">"BSgenome.Hsapiens.UCSC.hg38"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"deconstructSigs"</span>)) BiocManager::install(<span class="string">"deconstructSigs"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"VennDiagram"</span>)) BiocManager::install(<span class="string">"VennDiagram"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"reshape2"</span>)) BiocManager::install(<span class="string">"reshape2"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"glmnet"</span>)) BiocManager::install(<span class="string">"glmnet"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"KEGG.db"</span>)) BiocManager::install(<span class="string">"KEGG.db"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"GSEABase"</span>)) BiocManager::install(<span class="string">"GSEABase"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"GSVA"</span>)) BiocManager::install(<span class="string">"GSVA"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"clusterProfiler"</span>)) BiocManager::install(<span class="string">"clusterProfiler"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"GEOquery"</span>)) BiocManager::install(<span class="string">"GEOquery"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"limma"</span>)) BiocManager::install(<span class="string">"limma"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"impute"</span>)) BiocManager::install(<span class="string">"impute"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"genefu"</span>)) BiocManager::install(<span class="string">"genefu"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"org.Hs.eg.db"</span>)) BiocManager::install(<span class="string">"org.Hs.eg.db"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"hgu133plus2.db"</span>)) BiocManager::install(<span class="string">"hgu133plus2.db"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"ConsensusClusterPlus"</span>)) BiocManager::install(<span class="string">"ConsensusClusterPlus"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line">BiocManager::install(c(<span class="string">'airway'</span>,<span class="string">'DESeq2'</span>,<span class="string">'edgeR'</span>,<span class="string">'limma'</span>),</span><br><span class="line">                     ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">require</span>(<span class="string">"maftools"</span>)) BiocManager::install(<span class="string">"maftools"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">require</span>(<span class="string">"genefilter"</span>)) BiocManager::install(<span class="string">"genefilter"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">require</span>(<span class="string">"CLL"</span>)) BiocManager::install(<span class="string">"CLL"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">require</span>(<span class="string">"org.Hs.eg.db"</span>)) BiocManager::install(<span class="string">'org.Hs.eg.db'</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">require</span>(<span class="string">"maftools"</span>)) BiocManager::install(<span class="string">"maftools"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">require</span>(<span class="string">"RTCGA"</span>)) BiocManager::install(<span class="string">"RTCGA"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">require</span>(<span class="string">"RTCGA.clinical"</span>)) BiocManager::install(<span class="string">"RTCGA.clinical"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"><span class="comment"># https://bioconductor.org/packages/3.6/data/experiment/src/contrib/RTCGA.clinical_20151101.8.0.tar.gzn</span></span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">require</span>(<span class="string">"RTCGA.miRNASeq"</span>)) BiocManager::install(<span class="string">"RTCGA.miRNASeq"</span>,ask = <span class="literal">F</span>,update = <span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果万一是 R3.4 版本之前的，请使用下面代码下载该项目所需要的包</span></span><br><span class="line"><span class="comment"># source("https://bioconductor.org/BiocManager::install.R") </span></span><br><span class="line"><span class="comment"># library('BiocInstaller') </span></span><br><span class="line"><span class="comment"># options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/") </span></span><br><span class="line"><span class="comment"># BiocInstaller::BiocManager::install("GEOquery")</span></span><br><span class="line"><span class="comment"># BiocInstaller::BiocManager::install(c("limma"))</span></span><br><span class="line"><span class="comment"># BiocInstaller::BiocManager::install(c("impute"))</span></span><br><span class="line"></span><br><span class="line">options()$repos</span><br><span class="line"></span><br><span class="line"><span class="comment">#install.packages('WGCNA')</span></span><br><span class="line"><span class="comment">#install.packages(c("FactoMineR", "factoextra"))</span></span><br><span class="line"><span class="comment">#install.packages(c("ggplot2", "pheatmap","ggpubr"))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断是否存在这些包，不存在的话安装这些包</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"WGCNA"</span>)) install.packages(<span class="string">"WGCNA"</span>,update = <span class="literal">F</span>,ask = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"FactoMineR"</span>)) install.packages(<span class="string">"FactoMineR"</span>,update = <span class="literal">F</span>,ask = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"factoextra"</span>)) install.packages(<span class="string">"factoextra"</span>,update = <span class="literal">F</span>,ask = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"ggplot2"</span>)) install.packages(<span class="string">"ggplot2"</span>,update = <span class="literal">F</span>,ask = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"pheatmap"</span>)) install.packages(<span class="string">"pheatmap"</span>,update = <span class="literal">F</span>,ask = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"ggpubr"</span>)) install.packages(<span class="string">"ggpubr"</span>,update = <span class="literal">F</span>,ask = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"glmnet"</span>)) install.packages(<span class="string">"glmnet"</span>,update = <span class="literal">F</span>,ask = <span class="literal">F</span>)</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">require</span>(<span class="string">"randomForest"</span>)) install.packages(<span class="string">"randomForest"</span>,update = <span class="literal">F</span>,ask = <span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">library</span>(<span class="string">"FactoMineR"</span>)</span><br><span class="line"><span class="keyword">library</span>(<span class="string">"factoextra"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">library</span>(GSEABase)</span><br><span class="line"><span class="keyword">library</span>(GSVA)</span><br><span class="line"><span class="keyword">library</span>(clusterProfiler)</span><br><span class="line"><span class="keyword">library</span>(genefu)</span><br><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(ggpubr)</span><br><span class="line"><span class="keyword">library</span>(hgu133plus2.db)</span><br><span class="line"><span class="keyword">library</span>(limma)</span><br><span class="line"><span class="keyword">library</span>(org.Hs.eg.db)</span><br><span class="line"><span class="keyword">library</span>(pheatmap)</span><br><span class="line"></span><br><span class="line">install.packages(c(<span class="string">"devtools"</span>,<span class="string">"reshape2"</span>,<span class="string">"pheatmap"</span>,</span><br><span class="line">                   <span class="string">"ggplot2"</span>,<span class="string">"ggfortify"</span>,<span class="string">"stringr"</span>,</span><br><span class="line">                   <span class="string">"survival"</span>,<span class="string">"survminer"</span>,<span class="string">"lars"</span>,</span><br><span class="line">                   <span class="string">"glmnet"</span>,<span class="string">"timeROC"</span>,<span class="string">"ggpubr"</span>,</span><br><span class="line">                   <span class="string">"randomForest"</span>,<span class="string">"ROCR"</span>,<span class="string">"Hmisc"</span>,</span><br><span class="line">                   <span class="string">"caret"</span>,<span class="string">"ggstatsplot"</span>,<span class="string">"tableone"</span>, </span><br><span class="line">                   <span class="string">"devtools"</span>,<span class="string">"reshape2"</span>,<span class="string">"randomForest"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">library</span>(devtools)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>install</tag>
        <tag>R-Packages</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo个人博客搭建2-next</title>
    <url>/2019/11/18/hexo_next/</url>
    <content><![CDATA[<h1 id="hexo-theme-next"><a href="#hexo-theme-next" class="headerlink" title="hexo-theme-next"></a>hexo-theme-next</h1><p><strong>将yilia的主题改为next的主题</strong></p>
<p><strong>用这个主题，主要是因为可以很方便进行搜索</strong></p>
<p>这个功能太重要的了，我可以随时随地进行笔记搜索。</p>
<p>重要参考：<a href="https://yashuning.github.io/2018/06/29/hexo-Next-主题添加搜索功能/" target="_blank" rel="noopener">next添加搜索功能</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next.git </span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以使用浏览器下载</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &#39;chenyuqiao1116@gmail.com&#39;</span><br><span class="line">git config --global user.name &#39;chenyuqiao1&#39;</span><br><span class="line">ssh-keygen -t rsa -C &#39;chenyuqiao1116@gmail.com&#39;</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/chenyuqiao1/chenyuqiao1.github.io.git</span><br><span class="line"><span class="meta"> #</span><span class="bash"> repo: ubuntu@49.234.226.202:/var/repo/hexo_static</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure>





<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/myblog</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<a id="more"></a>



<p>补充写在最前面：</p>
<p><img src="/2019/11/18/hexo_next/1574597433995.png" alt="1574597433995"></p>
<blockquote>
<p>在部署博客的时候出现了错误。估计是被墙了。</p>
</blockquote>
<p>那我就只能在自己的服务器上让它持续跑起来,暂时解决这个问题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s &amp;</span><br></pre></td></tr></table></figure>



<h1 id="解决本地markdown写作直接上传问题"><a href="#解决本地markdown写作直接上传问题" class="headerlink" title="解决本地markdown写作直接上传问题"></a>解决本地markdown写作直接上传问题</h1><h4 id="解决hexo图片插入相关问题"><a href="#解决hexo图片插入相关问题" class="headerlink" title="解决hexo图片插入相关问题"></a>解决hexo图片插入相关问题</h4><p>在typro中修改偏好设置如下</p>
<p><img src="/2019/11/18/hexo_next/1574038045735.png" alt="1574038045735"></p>
<p>这样就可以得到和Markdown文件一致的文件夹，里面储存图片</p>
<p><img src="/2019/11/18/hexo_next/1574038150890.png" alt="1574038150890"></p>
<p>同样修改hexo的config文件，这样我就可以直接将本地的Markdown传到这个目录下。就可以自动识别</p>
<p><img src="/2019/11/18/hexo_next/1574038208594.png" alt="1574038208594"></p>
<p><strong>如果使用yilia，那么图片文件可以直接使用，格式是![title/image.png]</strong></p>
<p><strong>但是如果使用next，那么图片文件不可以直接使用，因为格式直接以![image.png]，没有一个相对路径，所以我写了一个小程序解决这个问题，但是在写程序的时候由遇到了别的坑。做一个详细记录</strong></p>
<p><img src="/2019/11/18/hexo_next/1574153748191.png" alt="1574153748191"></p>
<p>错误示范</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/myblog/source/_posts</span><br><span class="line">ls *.md|while read id</span><br><span class="line">do</span><br><span class="line">	title=$&#123;id%%.*&#125;</span><br><span class="line">	echo "sed -i 's/$&#123;title&#125;\///g' ~/myblog/source/_posts/$id"</span><br><span class="line">	echo $title</span><br><span class="line">	sed -i 's/$&#123;title&#125;\///g' ~/myblog/source/_posts/$id</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<p><strong>原来在shell里用sed，如果有$这样的特殊字符，单引号要换成双引号才可以</strong></p>
<p>正确代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/myblog/source/_posts</span><br><span class="line">ls *.md|while read id</span><br><span class="line">do</span><br><span class="line">	title=$&#123;id%%.*&#125;</span><br><span class="line">	sed -i "s/$&#123;title&#125;\///g" ~/myblog/source/_posts/$id</span><br><span class="line">done</span><br></pre></td></tr></table></figure>







<h1 id="使用-LocalSearch-搜索功能"><a href="#使用-LocalSearch-搜索功能" class="headerlink" title="使用 LocalSearch 搜索功能"></a>使用 LocalSearch 搜索功能</h1><h4 id="安装相关插件"><a href="#安装相关插件" class="headerlink" title="安装相关插件"></a>安装相关插件</h4><p>安装搜索插件： <code>hexo-generator-searchdb</code></p>
<p>在博客根目录下执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;myblog</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h4 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h4><p>安装完成，编辑博客配置文件：<code>_config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:  </span><br><span class="line">path: search.xml  </span><br><span class="line">field: post  </span><br><span class="line">format: html  </span><br><span class="line">limit: 10000</span><br></pre></td></tr></table></figure>

<h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>Next 主题自带搜索设置，编辑主题配置文件：<code>_config.yml</code></p>
<p>找到文件中 Local search 的相关配置，设为 <code>true</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;myblog&#x2F;themes&#x2F;next # 需要到主题配置文件</span><br><span class="line"></span><br><span class="line"># Local search</span><br><span class="line">local_search:  </span><br><span class="line">enable: true</span><br></pre></td></tr></table></figure>

<p>hexo 重新部署</p>
<p><img src="/2019/11/18/hexo_next/1574140109909.png" alt="1574140109909"></p>
<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><ul>
<li>比如要创建标签文件夹，终端中输入（前提在<strong>Hexo</strong>文件路径下）：</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="string">"tags"</span></span><br><span class="line">输出：</span><br><span class="line">INFO  Created: ~<span class="regexp">/Desktop/</span>MyBlog/Blog/source/tags/index.md</span><br></pre></td></tr></table></figure>

<ul>
<li>成功过后目录如下：</li>
<li><img src="/2019/11/18/hexo_next/1574242905675.png" alt="1574242905675"></li>
<li>编辑<code>Blog/source/tags</code>中<strong>index.md</strong>文件，添加<code>type: &quot;tags&quot;</code>，其他Menu也同理创建。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2018-01-20 18:57:48</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span></span><br></pre></td></tr></table></figure>





<p>同理使用categories</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page "categories"</span><br><span class="line">cd ~/myblog/source/categories</span><br><span class="line">vim index.md</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/hexo_next/1574296097726.png" alt="1574296097726"></p>
<h4 id="如何解决反复要输入密码的麻烦，修改-git-下面的配置文件就可以看了"><a href="#如何解决反复要输入密码的麻烦，修改-git-下面的配置文件就可以看了" class="headerlink" title="如何解决反复要输入密码的麻烦，修改.git 下面的配置文件就可以看了"></a>如何解决反复要输入密码的麻烦，修改.git 下面的配置文件就可以看了</h4><p><img src="/2019/11/18/hexo_next/1574327889534.png" alt="1574327889534"></p>
<p>这样以后就不用每次都重复输入git的密码了</p>
<h2 id="添加站点访问计数"><a href="#添加站点访问计数" class="headerlink" title="添加站点访问计数"></a>添加站点访问计数</h2><p>next 添加访问量很方面，现在只需要修改一下主题配置文件就可以了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/myblog/themes/next</span><br><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/hexo_next/1574241326406.png" alt="1574241326406"></p>
<h1 id="hexo-Next-主题添加评论功能"><a href="#hexo-Next-主题添加评论功能" class="headerlink" title="hexo - Next 主题添加评论功能"></a>hexo - Next 主题添加评论功能</h1><p>Hexo 的 Next 主题继承了多种评论系统，我在这里介绍两种个人觉得不错的评论系统：Valine 和 gitment</p>
<h3 id="Valine-评论系统"><a href="#Valine-评论系统" class="headerlink" title="Valine 评论系统"></a>Valine 评论系统</h3><p>使用 Valine 评论系统，这款系统不需要登录便可以登录，没有后端，Next 主题最新已经支持安装</p>
<ul>
<li>基于 Leancloud 的系统</li>
<li>支持 MarkDown 语法</li>
<li>无后端实现，快速高效</li>
</ul>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="注册-LeanCloud"><a href="#注册-LeanCloud" class="headerlink" title="注册 LeanCloud"></a>注册 LeanCloud</h5><p>因为 Valine 是基于 LeanCloud 系统的，所以先在 LeanCloud 中注册账号</p>
<p><a href="https://leancloud.cn/dashboard/login.html#/signin" target="_blank" rel="noopener">LeanCloud官网登录入口</a></p>
<p>注册登陆后，访问控制台，创建应用，选择开发版，创建好之后就生成了 <code>App ID</code> 和 <code>App Key</code></p>
<p><img src="/2019/11/18/hexo_next/1574297242397.png" alt="1574297242397"></p>
<h5 id="设置-Next-主题"><a href="#设置-Next-主题" class="headerlink" title="设置 Next 主题"></a>设置 Next 主题</h5><p>在主题的配置文件中，修改关于 valine 的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Valine.</span><br><span class="line"># You can get your appid and appkey from https:&#x2F;&#x2F;leancloud.cn</span><br><span class="line"># more info please open https:&#x2F;&#x2F;valine.js.org</span><br><span class="line">valine:  </span><br><span class="line">enable: true # 是否开启  </span><br><span class="line">appid:   # 上一步获取的 </span><br><span class="line">App ID  appkey:  # 上一步获取的 App Key  </span><br><span class="line">notify: false # 新留言是否需要通知 https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki  </span><br><span class="line">verify: false # 是否需要验证，验证比较反人类建议false关闭  </span><br><span class="line">placeholder: 请在此输入您的留言 # 默认留言框内的文字  </span><br><span class="line">avatar: mm # 默认头像  </span><br><span class="line">guest_info: nick,mail # 默认留言框的头部需要访问者输入的信息  </span><br><span class="line">pageSize: 10 # pagination size #默认单页的留言条数</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/hexo_next/1574297950491.png" alt="1574297950491">重新部署</p>
<h4 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h4><p>如果想要管理评论，进入 leancloud 官网，找到 <code>控制台</code>-&gt;<code>存储</code>-&gt;<code>commet</code> 中进行管理</p>
<h3 id="Gitment-评论系统"><a href="#Gitment-评论系统" class="headerlink" title="Gitment 评论系统"></a>Gitment 评论系统</h3><p>gitment，它是基于 github 开发的，是依靠于 <code>GitHub Issues</code> 的评论系统，Next 主题最新已经支持安装</p>
<p>前提：更新 Next 主题（5.1.2 主题）</p>
<h4 id="注册OAuth-application"><a href="#注册OAuth-application" class="headerlink" title="注册OAuth application"></a>注册OAuth application</h4><ol>
<li><p>在 github 中进行注册，进入 <a href="https://github.com/settings/profile" target="_blank" rel="noopener">https://github.com/settings/profile</a></p>
</li>
<li><p>点击左侧 Developer settings</p>
</li>
<li><p>Register a new GitHub App</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Application name:	#应用名称</span><br><span class="line">Homepage URL：  		#网站URL(填自己的博客主页地址)</span><br><span class="line">Application description		#描述</span><br><span class="line">Authorization callback URL:	#网站URL(填自己的博客主页地址)</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册完成之后，会得到：<code>Client ID</code> 和 <code>Client Secret</code></p>
</li>
</ol>
<h4 id="新建存放博客评论仓库"><a href="#新建存放博客评论仓库" class="headerlink" title="新建存放博客评论仓库"></a>新建存放博客评论仓库</h4><p>可以在 github 中建一个项目，专门用来存储你的博客评论</p>
<h4 id="配置-next-主题文件"><a href="#配置-next-主题文件" class="headerlink" title="配置 next 主题文件"></a>配置 next 主题文件</h4><p>编辑主题配置文件：themes\next\ _config.yml，找到有关 gitment 的设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitment:     </span><br><span class="line">enable:  true  </span><br><span class="line">mint: true    </span><br><span class="line">count: true   </span><br><span class="line">lazy: false  						#评论懒加载，如果true，则默认不展示评论，点击按钮查看评论  cleanly: false  	  </span><br><span class="line">language: 		  </span><br><span class="line">github_user: 						#github名称  </span><br><span class="line">github_repo: BlogComments			#上一步新建存放评论的仓库名  </span><br><span class="line">client_id: b8bad0exxxx			#上面注册 OAuth Application 的 </span><br><span class="line">Client ID  client_secret: bcee560xxxxxx		#上面注册 OAuth Application 申请的 </span><br><span class="line">Client Secret  proxy_gateway:   </span><br><span class="line">redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint</span><br></pre></td></tr></table></figure>

<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>在设置完成之后，hexo 重新部署</p>
<p>每篇文章都要点击初始化评论按钮</p>
<h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><p>评论显示在新建存放评论的仓库中的 <code>issue</code> 中</p>
<h3 id="关闭某个页面的评论"><a href="#关闭某个页面的评论" class="headerlink" title="关闭某个页面的评论"></a>关闭某个页面的评论</h3><p>在页面的 <code>Front-matter</code> 中添加 <code>comments</code> 字段，设为 <code>false</code></p>
<p>比如标签页不想要评论，则在标签页面中做以下设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2015-12-16 17:05:24</span><br><span class="line">type: &quot;tags&quot;comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>







<h3 id="Hexo配置-给NexT主题添加备案号"><a href="#Hexo配置-给NexT主题添加备案号" class="headerlink" title="Hexo配置-给NexT主题添加备案号"></a>Hexo配置-给NexT主题添加备案号</h3><p>基于NexT主题，修改footer.swig文件，</p>
<p>文件存放路径为’/themes/next/layout/ partial’，</p>
<p>只需要在<code>endif</code>前加入备案相关的结构代码即可。代码如下：</p>
<p><img src="/2019/11/18/hexo_next/1583371662280.png" alt="1583371662280"></p>
<p>：插入部分内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;BbeiAn-info&quot;&gt;</span><br><span class="line">&#123;&#123; __(&#39;浙ICP备&#39;)&#125;&#125; - </span><br><span class="line">&lt;a target&#x3D;&quot;_blank&quot;  href&#x3D;&quot;http:&#x2F;&#x2F;beian.miit.gov.cn&#x2F;&quot;&gt;19049525号&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>myblog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>myblog</tag>
      </tags>
  </entry>
  <entry>
    <title>chip-seq实战</title>
    <url>/2019/12/23/ZNF582%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h4 id="step1-下载数据"><a href="#step1-下载数据" class="headerlink" title="step1 下载数据"></a>step1 下载数据</h4><p>需要用rna 环境下，否则需要中心配置下载设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/project/ZNF582_chip_seq/original_data</span><br><span class="line">source activate rna</span><br><span class="line">nohup prefetch SRR5197188 &amp;</span><br><span class="line"></span><br><span class="line">nohup prefetch SRR5197033 &amp; ### control</span><br><span class="line">mv SRR5197188.sra ~/project/ZNF582_chip_seq/original_data/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>/home/chenyuqiao/ncbi/public/sra</p>
<p>默认下载地址</p>
</blockquote>
<a id="more"></a>



<h4 id="step2-下载相应的软件"><a href="#step2-下载相应的软件" class="headerlink" title="step2 下载相应的软件"></a>step2 下载相应的软件</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">conda  create -n chipseq  python=<span class="number">2</span></span><br><span class="line"><span class="keyword">source</span> activate chipseq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用search先进行检索</span></span><br><span class="line">conda search trim_galore</span><br><span class="line">conda search trim-galore</span><br><span class="line"><span class="comment">## 保证所有的软件都是安装在 wes 这个环境下面</span></span><br><span class="line">conda install -y sra-tools  </span><br><span class="line">conda install -y trim-galore  samtools</span><br><span class="line">conda install -y deeptools homer  meme</span><br><span class="line">conda install -y macs2 bowtie bowtie2 </span><br><span class="line"></span><br><span class="line"><span class="comment"># BiocManager::install(c('ChIPpeakAnno','ChIPseeker','TxDb.Mmusculus.UCSC.mm10.knownGene','TxDb.Hsapiens.UCSC.hg19.knownGene','TxDb.Hsapiens.UCSC.hg38.knownGene'))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if (!requireNamespace("BiocManager", quietly = TRUE))</span></span><br><span class="line"><span class="comment">#   install.packages("BiocManager")</span></span><br><span class="line"><span class="comment"># BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")</span></span><br><span class="line"><span class="comment"># 值得注意的是Y叔的包检查会有版本的问题，包括 ChIPseeker                              </span></span><br><span class="line"><span class="comment"># library(TxDb.Hsapiens.UCSC.hg19.knownGene) </span></span><br><span class="line"><span class="comment"># library(TxDb.Mmusculus.UCSC.mm10.knownGene) </span></span><br><span class="line"><span class="comment"># library(TxDb.Hsapiens.UCSC.hg38.knownGene) </span></span><br><span class="line">BiocManager::install(c(<span class="string">'ChIPpeakAnno'</span>,<span class="string">'ChIPseeker'</span>))</span><br><span class="line"><span class="keyword">library</span>(ChIPpeakAnno) </span><br><span class="line"><span class="keyword">library</span>(ChIPseeker) </span><br><span class="line"><span class="keyword">library</span>(GenomicFeatures)</span><br></pre></td></tr></table></figure>



<h4 id="step3-sra格式转化成fastq"><a href="#step3-sra格式转化成fastq" class="headerlink" title="step3 sra格式转化成fastq"></a>step3 sra格式转化成fastq</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/project/ZNF582_chip_seq </span><br><span class="line">mkdir &#123;sra,raw,clean,align,peaks,motif,qc&#125;</span><br><span class="line"></span><br><span class="line">cd ~/project/ZNF582_chip_seq/sra</span><br><span class="line">ln -s ../original_data/SRR5197033.sra</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#用循环语句</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂后台</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls ./*.sra | <span class="keyword">while</span> <span class="built_in">read</span> id; <span class="keyword">do</span> (nohup fastq-dump --gzip --split-3 -O ./fastq/ <span class="variable">$&#123;id&#125;</span> &amp;); <span class="keyword">done</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其实这句话就可以多线程跑</span></span><br><span class="line"></span><br><span class="line">cd ~/project/ZNF582_chip_seq/sra</span><br><span class="line"></span><br><span class="line">touch sra2fastq.sh</span><br><span class="line">cat $1 | while read id;</span><br><span class="line">do </span><br><span class="line">	sra=$&#123;id&#125;.sra</span><br><span class="line">	fastq-dump --gzip --split-3 -O ../raw/ $&#123;sra&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">nohup bash sra2fastq.sh ../SRR_Acc_List.txt &amp;</span><br><span class="line">nohup bash sra2fastq.sh ../SRR_control &amp;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>慢慢跑。我下班了。</p>
</blockquote>
<h4 id="step4：单端测序的文件进行trim-galore"><a href="#step4：单端测序的文件进行trim-galore" class="headerlink" title="step4：单端测序的文件进行trim_galore"></a>step4：单端测序的文件进行trim_galore</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/project/ZNF582_chip_seq/raw</span><br><span class="line">touch trim_galore_single.sh</span><br><span class="line">vim trim_galore_single.sh ####要有一个shell脚本</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###脚本内容如下</span></span></span><br><span class="line">cat $1 |while read id</span><br><span class="line">do</span><br><span class="line"> 	trim_galore --phred33 -q 28 -e 0.1 --length 36 --stringency 3   -o ../clean  ./$&#123;id&#125;.fastq.gz</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#####</span></span></span><br><span class="line">nohup bash trim_galore_single.sh ../SRR_Acc_List.txt &amp; ####后台运行</span><br><span class="line">nohup bash trim_galore_single.sh ../SRR_control &amp; </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######</span></span></span><br><span class="line">bash语句中最后的config 就可以传给循环语句中的$1</span><br></pre></td></tr></table></figure>



<p>很明显，QC应该走一波</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;project&#x2F;ZNF582_chip_seq&#x2F;qc</span><br><span class="line">## 相对目录需要理解</span><br><span class="line">ls ..&#x2F;raw&#x2F;*gz|xargs fastqc -t 10 -o  .&#x2F;</span><br><span class="line">ls ..&#x2F;clean&#x2F;*gz|xargs fastqc -t 10 -o  .&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title></a></h3><h4 id="step5-使用bowtie2进行比对"><a href="#step5-使用bowtie2进行比对" class="headerlink" title="step5: 使用bowtie2进行比对"></a>step5: 使用bowtie2进行比对</h4><p>然后直接<strong>用bowtie2进行比对和统计比对率,</strong> 需要提前下载参考基因组然后使用命令构建索引，或者直接就下载索引文件：</p>
<p>只能自己构建索引</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/my_disk/reference/NCBI/GCA/index/bowtie2</span><br><span class="line">nohup bowtie2-build   ~/my_disk/reference/NCBI/GCA/GCA_000001405.15_GRCh38_full_analysis_set.fna  hg38_NCBI 1&gt;hg38.bowtie2.log   2&gt;hg38.bowtie2.error   &amp;</span><br></pre></td></tr></table></figure>

<p>也可以直接在网上下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>单端测序数据的比对代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/project/ZNF582_chip_seq/align</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 相对目录需要理解</span></span></span><br><span class="line">bowtie2_index="~/my_disk/reference/NCBI/GCA/index/bowtie/GCA_000001405.15_GRCh38_full_analysis_set.fna.bowtie_index"</span><br><span class="line">bowtie2_index="~/my_disk/reference/NCBI/GCA/index/bowtie2/hg38_NCBI"</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 一定要搞清楚自己的bowtie2软件安装在哪里，以及自己的索引文件在什么地方！！！</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nohup bowtie2 -p 3 -x ~/my_disk/reference/NCBI/GCA/index/bowtie2/hg38_NCBI \</span><br><span class="line">	-U ~/project/ZNF582_chip_seq/clean/SRR5197188_trimmed.fq.gz 2&gt;SRR5197188.log \</span><br><span class="line">	| samtools sort -@ 2 -m 1G  -o ~/project/ZNF582_chip_seq/align/SRR5197188.bam - 1&gt;SRR5197188_bam.log &amp;</span><br><span class="line">	</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 出现很多错误，包括index，memory等问题	</span></span></span><br><span class="line"></span><br><span class="line">touch bowtie.sh</span><br><span class="line"></span><br><span class="line">ls ../clean/*gz |while read id;</span><br><span class="line">do </span><br><span class="line">bowtie2_index="~/my_disk/reference/NCBI/GCA/index/bowtie/GCA_000001405.15_GRCh38_full_analysis_set.fna.bowtie_index"</span><br><span class="line">bowtie2_index="~/my_disk/reference/NCBI/GCA/index/bowtie2/hg38_NCBI"</span><br><span class="line">file=$(basename $id )</span><br><span class="line">sample=$&#123;file%%.*&#125;</span><br><span class="line">echo $file $sample</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 比对过程3分钟一个样本</span></span></span><br><span class="line">bowtie2 -p 3 -x $bowtie2_index  $id |samtools sort -m 2G -@ 4 -o ../align/$&#123;sample&#125;.bam - 1&gt; $&#123;sample&#125;.bam.log </span><br><span class="line">done </span><br><span class="line"></span><br><span class="line">nohup bash bowtie.sh &amp;</span><br></pre></td></tr></table></figure>



<h5 id="最终有效果版本"><a href="#最终有效果版本" class="headerlink" title="最终有效果版本"></a>最终有效果版本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup bowtie2 -p 3 -x ~/my_disk/reference/NCBI/GCA/index/bowtie2/hg38_NCBI \</span><br><span class="line">	-U ~/project/ZNF582_chip_seq/clean/SRR5197188_trimmed.fq.gz 2&gt;SRR5197188.log \</span><br><span class="line">	| samtools sort -@ 2 -m 1G  -o ~/project/ZNF582_chip_seq/align/SRR5197188.bam - 1&gt;SRR5197188_bam.log &amp;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">nohup bowtie2 -p 3 -x ~/my_disk/reference/NCBI/GCA/index/bowtie2/hg38_NCBI \</span><br><span class="line">	-U ~/project/ZNF582_chip_seq/clean/SRR5197033_trimmed.fq.gz 2&gt;SRR5197033.log \</span><br><span class="line">	| samtools sort -@ 3 -m 2G  -o ~/project/ZNF582_chip_seq/align/SRR5197033.bam - 1&gt;SRR5197033_bam.log &amp;</span><br><span class="line">	</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 下面的这些代码是跑不了的。我也不知道为什么。</span></span></span><br><span class="line">touch NCBI_mapping.sh</span><br><span class="line"></span><br><span class="line">ref='~/my_disk/reference/NCBI/GCA/index/bowtie2/hg38_NCBI'</span><br><span class="line">cat $1 |while read id</span><br><span class="line">do</span><br><span class="line">		bowtie2 -p 3 -x $ref \</span><br><span class="line">	-U ~/project/ZNF582_chip_seq/clean/$&#123;id&#125;_trimmed.fq.gz 2&gt;$&#123;id&#125;.log \</span><br><span class="line">	| samtools sort -@ 2 -m 2G  -o ~/project/ZNF582_chip_seq/align/$&#123;id&#125;.bam - 1&gt;$&#123;id&#125;_bam.log</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">nohup bash NCBI_mapping.sh ../SRR_control &amp;</span><br></pre></td></tr></table></figure>





<h4 id="step6-假如需要去除PCR重复（对bam文件进行QC）"><a href="#step6-假如需要去除PCR重复（对bam文件进行QC）" class="headerlink" title="step6 假如需要去除PCR重复（对bam文件进行QC）"></a>step6 假如需要去除PCR重复（对bam文件进行QC）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/project/ZNF582_chip_seq/align</span><br><span class="line">ls  *.bam  |xargs -i samtools index &#123;&#125; </span><br><span class="line">ls  *.bam  | while read id ;do (nohup samtools flagstat $id &gt; $(basename $id ".bam").stat &amp; );done</span><br><span class="line">ls  *.bam  | while read id ;do (nohup samtools markdup -r $id $(basename $id ".bam").rmdup.bam &amp; );done</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### QC</span></span></span><br><span class="line">ls  *.rmdup.bam  |xargs -i samtools index &#123;&#125; </span><br><span class="line">ls  *.rmdup.bam  | while read id ;do (nohup samtools flagstat $id &gt; $(basename $id ".bam").stat &amp; );done</span><br></pre></td></tr></table></figure>





<h4 id="step7-使用macs2进行找peaks"><a href="#step7-使用macs2进行找peaks" class="headerlink" title="step7 使用macs2进行找peaks"></a>step7 使用macs2进行找peaks</h4><p>macs2包含一系列的子命令，其中最主要的就是<code>callpeak</code>， 官方提供了<strong>使用实例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">macs2 callpeak -t ChIP.bam -c Control.bam -f BAM -g hs -n test -B -q 0.01</span><br></pre></td></tr></table></figure>

<p>一般而言，我们照葫芦画瓢，按照这个实例替换对应部分就行了，介绍一下各个参数的意义</p>
<ul>
<li>-t: 实验组的输出结果</li>
<li>-c: 对照组的输出结果</li>
<li>-f: -t和-c提供文件的格式，可以是”ELAND”, “BED”, “ELANDMULTI”, “ELANDEXPORT”, “ELANDMULTIPET” (for pair-end tags), “SAM”, “BAM”, “BOWTIE”, “BAMPE” “BEDPE” 任意一个。如果不提供这项，就是自动检测选择。</li>
<li>-g: 基因组大小， 默认提供了hs, mm, ce, dm选项， 不在其中的话，比如说拟南芥，就需要自己提供了。</li>
<li>-n: 输出文件的前缀名</li>
<li>-B: <strong>会保存更多的信息在bedGraph文件中</strong>，如fragment pileup, control lambda, -log10pvalue and -log10qvalue scores</li>
<li>-q: q值，也就是最小的PDR阈值， 默认是0.05。q值是根据p值利用BH计算，也就是多重试验矫正后的结果。</li>
<li>-p： 这个是p值，指定p值后MACS2就不会用q值了。</li>
<li>-m: 和MFOLD有关，而MFOLD和MACS预构建模型有关，默认是5：50，MACS会先寻找100多个peak区构建模型，一般不用改，因为你很大概率上不会懂。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd  ~/project/ZNF582_chip_seq/align</span><br><span class="line">nohup macs2 callpeak -c  SRR5197033.rmdup.bam -t SRR5197188.rmdup.bam -f BAM -B -g mm -n SRR5197188 --outdir ../peaks  2&gt; SRR5197188.log &amp;</span><br></pre></td></tr></table></figure>



<p>其实上面的<code>-B</code> 参数意义也不大，得到的bedgraph文件没啥用。</p>
<p>得到的bed格式的peaks文件的行数如下：</p>
<h4 id="step8-使用deeptool是进行可视化"><a href="#step8-使用deeptool是进行可视化" class="headerlink" title="step8 使用deeptool是进行可视化"></a>step8 使用deeptool是进行可视化</h4><p>下面的文字摘抄自生信技能树论坛：<a href="https://vip.biotrainee.com/d/226" target="_blank" rel="noopener">https://vip.biotrainee.com/d/226</a> 不过代码纯粹是我自己手打。</p>
<p>deeptools提供<code>bamCoverage</code>和<code>bamCompare</code>进行格式转换，为了能够比较不同的样本，需要对先将基因组分成等宽分箱(bin)，统计每个分箱的read数，最后得到描述性统计值。对于两个样本，描述性统计值可以是两个样本的比率，或是比率的log2值，或者是差值。如果是单个样本，可以用SES方法进行标准化。</p>
<p><code>bamCoverage</code>的基本用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source activate chipseq</span><br><span class="line">bamCoverage -e 170 -bs 10 -b ap2_chip_rep1_2_sorted.bam -o ap2_chip_rep1_2.bw</span><br><span class="line"><span class="meta">#</span><span class="bash"> ap2_chip_rep1_2_sorted.bam是前期比对得到的BAM文件</span></span><br></pre></td></tr></table></figure>



<p>得到的bw文件就可以送去IGV/Jbrowse进行可视化。 这里的参数仅使用了<code>-e/--extendReads</code>和<code>-bs/--binSize</code>即拓展了原来的read长度，且设置分箱的大小。其他参数还有</p>
<ul>
<li><code>--filterRNAstrand {forward, reverse}</code>: 仅统计指定正链或负链</li>
<li><code>--region/-r CHR:START:END</code>: 选取某个区域统计</li>
<li><code>--smoothLength</code>: 通过使用分箱附近的read对分箱进行平滑化</li>
</ul>
<p>如果为了其他结果进行比较，还需要进行标准化，deeptools提供了如下参数：</p>
<ul>
<li><code>--scaleFactor</code>: 缩放系数</li>
<li><code>--normalizeUsingRPKMReads</code>: Per Kilobase per Million mapped reads (RPKM)标准化</li>
<li><code>--normalizeTo1x</code>: 按照1x测序深度(reads per genome coverage, RPGC)进行标准化</li>
<li><code>--ignoreForNormalization</code>： 指定那些染色体不需要经过标准化</li>
</ul>
<p>如果需要以100为分箱，并且标准化到1x，且仅统计某一条染色体区域的正链，输出格式为bedgraph,那么命令行可以这样写</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bamCoverage -e 170 -bs 100 -of bedgraph -r Chr4:12985884:12997458 --normalizeTo1x 100000000 -b 02-read-alignment/ap2_chip_rep1_1_sorted.bam -o chip.bedgraph</span><br></pre></td></tr></table></figure>



<p><code>bamCompare</code>和<code>bamCoverage</code>类似，只不过需要提供两个样本，并且采用SES方法进行标准化，于是多了<code>--ratio</code>参数。</p>
<h5 id="首先把bam文件转为bw文件，详情：http-www-bio-info-trainee-com-1815-html"><a href="#首先把bam文件转为bw文件，详情：http-www-bio-info-trainee-com-1815-html" class="headerlink" title="首先把bam文件转为bw文件，详情：http://www.bio-info-trainee.com/1815.html"></a>首先把bam文件转为bw文件，详情：<a href="http://www.bio-info-trainee.com/1815.html" target="_blank" rel="noopener">http://www.bio-info-trainee.com/1815.html</a></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd  ~/project/ZNF582_chip_seq/align </span><br><span class="line">source activate chipseq</span><br><span class="line"><span class="meta">#</span><span class="bash"> ls  *.rmdup.bam  |xargs -i samtools index &#123;&#125; </span></span><br><span class="line">ls *.rmdup.bam |while read id;</span><br><span class="line">do</span><br><span class="line">nohup bamCoverage --normalizeUsing CPM -b $id -o $&#123;id%%.*&#125;.bw &amp; </span><br><span class="line">done </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> bamCoverage --normalizeUsing CPM -b ./SRR5197188.rmdup.bam -o SRR5197188.bw</span></span><br></pre></td></tr></table></figure>



<h5 id="整理TSS文件"><a href="#整理TSS文件" class="headerlink" title="整理TSS文件"></a>整理TSS文件</h5><p><img src="/2019/12/23/ZNF582%E5%AE%9E%E6%88%98/1572019821727.png" alt="1572019821727"></p>
<p>其实里面可以设置直接下载所有基因的TSS区域的bed文件，可是我不会设置各种参数，也懒得去摸索，直接对上面的文件我可以写脚本处理得到需要的数据形式。 需要输出的是bed格式文件，如下： chrom / chromStart /chromEnd /name /score /strand 我这里定义的TSS(转录起始位点)区域上下游2.5kb，所以代码如下：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">perl -alne <span class="string">'&#123;next if /^#/;if($F[3] eq "+")&#123;$start=$F[4]-2500;$end=$F[4]+2500&#125;else&#123;$start=$F[5]-2500;$end=$F[5]+2500&#125;print join("\t",$F[2],$start,$end,$F[12],0,$F[3])&#125;'</span> hg38_NCBI_RefSe<span class="string">q |sort -u &gt;NCBI.refseq.tss.bed</span></span><br></pre></td></tr></table></figure>









<h5 id="查看TSS附件信号强度："><a href="#查看TSS附件信号强度：" class="headerlink" title="查看TSS附件信号强度："></a>查看TSS附件信号强度：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 首先对单一样本绘图： </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># both -R and -S can accept multiple files </span></span></span><br><span class="line">mkdir -p  ~/project/ZNF582_chip_seq/tss</span><br><span class="line">cd  ~/project/ZNF582_chip_seq/tss </span><br><span class="line">computeMatrix reference-point  --referencePoint TSS  -p 10  \</span><br><span class="line">-b 2000 -a 2000    \</span><br><span class="line">-R ~/my_disk/reference/chip_seq/NCBI.refseq.tss.bed  \</span><br><span class="line">-S ~/project/ZNF582_chip_seq/align/SRR5197188.bw  \</span><br><span class="line">--skipZeros  -o matrix1_test_TSS.gz  \</span><br><span class="line">--outFileSortedRegions regions1_test_genes.bed</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#     both plotHeatmap and plotProfile will use the output from   computeMatrix</span></span></span><br><span class="line">plotHeatmap -m matrix1_test_TSS.gz  -out test_Heatmap.png</span><br><span class="line">plotHeatmap -m matrix1_test_TSS.gz  -out test_Heatmap.pdf --plotFileFormat pdf  --dpi 720  </span><br><span class="line">plotProfile -m matrix1_test_TSS.gz  -out test_Profile.png</span><br><span class="line">plotProfile -m matrix1_test_TSS.gz  -out test_Profile.pdf --plotFileFormat pdf --perGroup --dpi 720 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 如果要批处理 ，需要学习好linux命令。</span></span></span><br></pre></td></tr></table></figure>



<h5 id="首先画10K附近（批量）"><a href="#首先画10K附近（批量）" class="headerlink" title="首先画10K附近（批量）"></a>首先画10K附近（批量）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bed&#x3D;&#x2F;home&#x2F;chenyuqiao&#x2F;my_disk&#x2F;reference&#x2F;chip_seq&#x2F;NCBI.refseq.tss.bed</span><br><span class="line">for id in  ~&#x2F;project&#x2F;ZNF582_chip_seq&#x2F;align&#x2F;*bw ;</span><br><span class="line">do </span><br><span class="line">echo $id</span><br><span class="line">file&#x3D;$(basename $id )</span><br><span class="line">sample&#x3D;$&#123;file%%.*&#125; </span><br><span class="line">echo $sample  </span><br><span class="line"></span><br><span class="line">computeMatrix reference-point  --referencePoint TSS  -p 15  \</span><br><span class="line">-b 10000 -a 10000    \</span><br><span class="line">-R  $bed \</span><br><span class="line">-S $id  \</span><br><span class="line">--skipZeros  -o matrix1_$&#123;sample&#125;_TSS_10K.gz  \</span><br><span class="line">--outFileSortedRegions regions1_$&#123;sample&#125;_TSS_10K.bed</span><br><span class="line"># 输出的gz为文件用于plotHeatmap, plotProfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##     both plotHeatmap and plotProfile will use the output from   computeMatrix</span><br><span class="line">plotHeatmap -m matrix1_$&#123;sample&#125;_TSS_10K.gz  -out $&#123;sample&#125;_Heatmap_10K.png</span><br><span class="line">plotHeatmap -m matrix1_$&#123;sample&#125;_TSS_10K.gz  -out $&#123;sample&#125;_Heatmap_10K.pdf --plotFileFormat pdf  --dpi 720  </span><br><span class="line">plotProfile -m matrix1_$&#123;sample&#125;_TSS_10K.gz  -out $&#123;sample&#125;_Profile_10K.png</span><br><span class="line">plotProfile -m matrix1_$&#123;sample&#125;_TSS_10K.gz  -out $&#123;sample&#125;_Profile_10K.pdf --plotFileFormat pdf --perGroup --dpi 720 </span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>使用命令批量提交：<code>nohup bash 10k.sh 1&gt;10k.log &amp;</code></p>
<h5 id="然后画2K的（批量）"><a href="#然后画2K的（批量）" class="headerlink" title="然后画2K的（批量）"></a>然后画2K的（批量）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bed&#x3D;&#x2F;public&#x2F;annotation&#x2F;CHIPseq&#x2F;mm10&#x2F;ucsc.refseq.bed</span><br><span class="line">for id in  &#x2F;home&#x2F;jmzeng&#x2F;project&#x2F;epi&#x2F;mergeBam&#x2F;*bw ;</span><br><span class="line">do </span><br><span class="line">echo $id</span><br><span class="line">file&#x3D;$(basename $id )</span><br><span class="line">sample&#x3D;$&#123;file%%.*&#125; </span><br><span class="line">echo $sample </span><br><span class="line"></span><br><span class="line">computeMatrix reference-point  --referencePoint TSS  -p 15  \</span><br><span class="line">-b 2000 -a 2000    \</span><br><span class="line">-R  $bed \</span><br><span class="line">-S $id  \</span><br><span class="line">--skipZeros  -o matrix1_$&#123;sample&#125;_TSS_2K.gz  \</span><br><span class="line">--outFileSortedRegions regions1_$&#123;sample&#125;_TSS_2K.bed</span><br><span class="line"></span><br><span class="line">##     both plotHeatmap and plotProfile will use the output from   computeMatrix</span><br><span class="line">plotHeatmap -m matrix1_$&#123;sample&#125;_TSS_2K.gz  -out $&#123;sample&#125;_Heatmap_2K.png</span><br><span class="line">plotHeatmap -m matrix1_$&#123;sample&#125;_TSS_2K.gz  -out $&#123;sample&#125;_Heatmap_2K.pdf --plotFileFormat pdf  --dpi 720  </span><br><span class="line">plotProfile -m matrix1_$&#123;sample&#125;_TSS_2K.gz  -out $&#123;sample&#125;_Profile_2K.png</span><br><span class="line">plotProfile -m matrix1_$&#123;sample&#125;_TSS_2K.gz  -out $&#123;sample&#125;_Profile_2K.pdf --plotFileFormat pdf --perGroup --dpi 720 </span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>使用命令批量提交：<code>nohup bash 2k.sh 1&gt;2k.log &amp;</code></p>
<p>还可以给多个bed文件来绘图，还可以画genebody的图，因为原理一样，我就不做过多介绍啦。</p>
<p>上面的批量代码其实就是为了统计全基因组范围的peak在基因特征的分布情况，也就是需要用到<code>computeMatrix</code>计算，用<code>plotHeatmap</code>以<strong>热图的方式</strong>对覆盖进行可视化，用<code>plotProfile</code>以<strong>折线图的方式</strong>展示覆盖情况。</p>
<p><code>computeMatrix</code>具有两个模式:<code>scale-region</code>和<code>reference-point</code>。前者用来信号在一个区域内分布，后者查看信号相对于某一个点的分布情况。无论是那个模式，都有有两个参数是必须的，-S是提供bigwig文件，-R是提供基因的注释信息。还有更多个性化的可视化选项。</p>
<h4 id="step9-使用R包对找到的peaks文件进行注释"><a href="#step9-使用R包对找到的peaks文件进行注释" class="headerlink" title="step9 使用R包对找到的peaks文件进行注释"></a>step9 使用R包对找到的peaks文件进行注释</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># BiocManager::install(c('ChIPpeakAnno','ChIPseeker','TxDb.Mmusculus.UCSC.mm10.knownGene','TxDb.Hsapiens.UCSC.hg19.knownGene','TxDb.Hsapiens.UCSC.hg38.knownGene'))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if (!requireNamespace("BiocManager", quietly = TRUE))</span></span><br><span class="line"><span class="comment">#   install.packages("BiocManager")</span></span><br><span class="line"><span class="comment"># BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")</span></span><br><span class="line"><span class="comment"># 值得注意的是Y叔的包检查会有版本的问题，包括 ChIPseeker                              </span></span><br><span class="line"><span class="comment"># library(TxDb.Hsapiens.UCSC.hg19.knownGene) </span></span><br><span class="line"><span class="comment"># library(TxDb.Mmusculus.UCSC.mm10.knownGene) </span></span><br><span class="line"><span class="comment"># library(TxDb.Hsapiens.UCSC.hg38.knownGene) </span></span><br><span class="line">BiocManager::install(c(<span class="string">'ChIPpeakAnno'</span>,<span class="string">'ChIPseeker'</span>))</span><br><span class="line"><span class="keyword">library</span>(ChIPpeakAnno) </span><br><span class="line"><span class="keyword">library</span>(ChIPseeker) </span><br><span class="line"><span class="keyword">library</span>(GenomicFeatures)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误: package 'GenomicFeatures' 1.34.8 was found, but &gt;= 1.35.11 is required by 'TxDb.Hsapiens.UCSC.hg38.knownGene'</span></span><br><span class="line"><span class="comment"># 停止执行</span></span><br><span class="line"><span class="comment"># 也就是要更新package 'GenomicFeatures'</span></span><br><span class="line"></span><br><span class="line">bedPeaksFile         = <span class="string">'SRR5197188_summits.bed'</span>; </span><br><span class="line">bedPeaksFile</span><br><span class="line"><span class="comment">## loading packages</span></span><br><span class="line"><span class="keyword">require</span>(ChIPseeker)</span><br><span class="line"><span class="comment"># require(TxDb.Hsapiens.UCSC.hg19.knownGene)</span></span><br><span class="line"><span class="comment"># txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene</span></span><br><span class="line"><span class="keyword">require</span>(TxDb.Hsapiens.UCSC.hg38.knownGene)</span><br><span class="line">txdb &lt;- TxDb.Hsapiens.UCSC.hg38.knownGene</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(clusterProfiler) </span><br><span class="line">peak &lt;- readPeakFile( bedPeaksFile )  </span><br><span class="line">keepChr= !grepl(<span class="string">'_'</span>,seqlevels(peak))</span><br><span class="line">seqlevels(peak, pruning.mode=<span class="string">"coarse"</span>) &lt;- seqlevels(peak)[keepChr]</span><br><span class="line">peakAnno &lt;- annotatePeak(peak, tssRegion=c(-<span class="number">3000</span>, <span class="number">3000</span>), </span><br><span class="line">                         TxDb=txdb, annoDb=<span class="string">"org.Hs.eg.db"</span>) </span><br><span class="line">peakAnno_df &lt;- as.data.frame(peakAnno)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/12/23/ZNF582%E5%AE%9E%E6%88%98/1572022713283.png" alt="1572022713283"></p>
<h4 id="step-10-homer软件来寻找motif"><a href="#step-10-homer软件来寻找motif" class="headerlink" title="step 10 homer软件来寻找motif"></a>step 10 homer软件来寻找motif</h4><p>这个软件安装当初特别麻烦： <a href="https://github.com/jmzeng1314/NGS-pipeline/blob/master/CHIPseq/step8-Homer-findMotif.sh" target="_blank" rel="noopener">https://github.com/jmzeng1314/NGS-pipeline/blob/master/CHIPseq/step8-Homer-findMotif.sh</a></p>
<p>但是现在有了conda，一句话搞定：<code>conda install -c bioconda homer</code> , 找到自己安装的homer，然后使用其附带的配置脚本来下载数据库咯。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source activate chipseq</span><br><span class="line">conda install -c bioconda homer</span><br></pre></td></tr></table></figure>

<p>下载数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">perl /home/chenyuqiao/miniconda2/envs/chipseq/share/homer-4.10-0/.//configureHomer.pl -install hg38</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 这个路径好奇怪，但是刚刚没有下载成功就是因为路径没有正确，</span></span></span><br></pre></td></tr></table></figure>

<p>​            </p>
<blockquote>
<p>下方的代码是不对的，因为后面程序运行的时候出现了奇怪的路径，所以我认为正确的路径其实是有问题的。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/my_disk/biosoft/biosoft</span><br><span class="line">mkdir homer &amp;&amp; cd homer</span><br><span class="line">wget http://homer.salk.edu/homer/configureHomer.pl</span><br><span class="line">perl ~/my_disk/biosoft/homer/configureHomer.pl -install hg38</span><br><span class="line">mv ~/my_disk/biosoft/homer/data/genomes/ ~/miniconda2/envs/chipseq/share/homer-4.10-0/data/ ### 将下载好的数据转移过去</span><br></pre></td></tr></table></figure>

<p><img src="/2019/12/23/ZNF582%E5%AE%9E%E6%88%98/1572051260788.png" alt="1572051260788"></p>
<p>找到motif</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd  ~/project/ZNF582_chip_seq/motif  </span><br><span class="line"></span><br><span class="line">touch runMotif.sh</span><br><span class="line"></span><br><span class="line">for id in /home/chenyuqiao/project/ZNF582_chip_seq/peaks/*.bed;</span><br><span class="line">do</span><br><span class="line">echo $id</span><br><span class="line">file=$(basename $id )</span><br><span class="line">sample=$&#123;file%%.*&#125; </span><br><span class="line">echo $sample  </span><br><span class="line">awk '&#123;print $4"\t"$1"\t"$2"\t"$3"\t+"&#125;' $id &gt;homer_peaks.tmp  </span><br><span class="line">findMotifsGenome.pl homer_peaks.tmp hg38 $&#123;sample&#125;_motifDir -len 8,10,12</span><br><span class="line">annotatePeaks.pl    homer_peaks.tmp hg38 1&gt;$&#123;sample&#125;.peakAnn.xls 2&gt;$&#123;sample&#125;.annLog.txt </span><br><span class="line">done </span><br><span class="line"></span><br><span class="line">nohup bash runMotif.sh 1&gt;motif.log &amp;</span><br></pre></td></tr></table></figure>



<p><img src="/2019/12/23/ZNF582%E5%AE%9E%E6%88%98/1572138572025.png" alt="1572138572025"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">perl ~/miniconda3/envs/chipseq/share/homer-4.9.1-5/configureHomer.pl  -install mm10 </span><br><span class="line">ls -lh  ~/miniconda3/envs/chipseq/share/homer-4.9.1-5/data/</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 我们上游分析是基于mm10找到的peaks文件</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 数据库下载取决于网速咯</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 下载成功后会多出 ~/miniconda3/envs/chipseq/share/homer-4.9.1-5/data/genomes/mm9/ 文件夹, 共 4.9G</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 这个文件夹取决于你把homer这个软件安装到了什么地方。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 或者用下面代码安装:</span></span></span><br><span class="line"></span><br><span class="line">cd ~/biosoft</span><br><span class="line">mkdir homer &amp;&amp;  cd homer</span><br><span class="line">wget http://homer.salk.edu/homer/configureHomer.pl </span><br><span class="line">perl configureHomer.pl -install</span><br><span class="line">perl configureHomer.pl -install hg19</span><br></pre></td></tr></table></figure>



<p>homer软件找motif整合了两个方法，包括依赖于数据库的查询，和de novo的推断,都是读取ChIP-seq数据上游分析得到的bed格式的peaks文件。</p>
<p>运行homer软件</p>
<p>但是使用起来很简单：<a href="http://homer.ucsd.edu/homer/ngs/peakMotifs.html" target="_blank" rel="noopener">http://homer.ucsd.edu/homer/ngs/peakMotifs.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd  ~&#x2F;project&#x2F;epi&#x2F;motif  </span><br><span class="line">for id in &#x2F;home&#x2F;chenyuqiao&#x2F;project&#x2F;ZNF582_chip_seq&#x2F;peaks&#x2F;*.bed;</span><br><span class="line">do</span><br><span class="line">echo $id</span><br><span class="line">file&#x3D;$(basename $id )</span><br><span class="line">sample&#x3D;$&#123;file%%.*&#125; </span><br><span class="line">echo $sample  </span><br><span class="line">awk &#39;&#123;print $4&quot;\t&quot;$1&quot;\t&quot;$2&quot;\t&quot;$3&quot;\t+&quot;&#125;&#39; $id &gt;homer_peaks.tmp  </span><br><span class="line">findMotifsGenome.pl homer_peaks.tmp mm10 $&#123;sample&#125;_motifDir -len 8,10,12</span><br><span class="line">annotatePeaks.pl    homer_peaks.tmp mm10  1&gt;$&#123;sample&#125;.peakAnn.xls 2&gt;$&#123;sample&#125;.annLog.txt </span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>把上面的代码保存为脚本<code>runMotif.sh</code>，然后运行：<code>nohup bash runMotif.sh 1&gt;motif.log &amp;</code></p>
<p>不仅仅找了motif，还顺便把<strong>peaks注释</strong>了一下。得到的后缀为<code>peakAnn.xls</code> 的文件就可以看到和使用R包注释的结果是差不多的。</p>
<p>还可以使用meme来找motif，需要通过bed格式的peaks的坐标来获取fasta序列。MEME，链接：<a href="http://meme-suite.org/" target="_blank" rel="noopener">http://meme-suite.org/</a></p>
<h3 id="其它高级分析"><a href="#其它高级分析" class="headerlink" title="其它高级分析"></a>其它高级分析</h3><p>比如可以 比较不同的peaks文件，代码见：<a href="https://github.com/jmzeng1314/NGS-pipeline/blob/master/CHIPseq/step6-ChIPpeakAnno-Venn.R" target="_blank" rel="noopener">https://github.com/jmzeng1314/NGS-pipeline/blob/master/CHIPseq/step6-ChIPpeakAnno-Venn.R</a></p>
<ul>
<li>当然了，本教程讲解的是单端测序数据的处理，如果是双端测序，里面的很多参数是需要修改的。</li>
<li>不过，只要你完整的看完了我前面的流程，掌握了linux和R，以及必备的基础生物信息学知识，我相信你肯定能hold住双端测序数据的学习啦。</li>
<li>本来以为我把ChIP-seq教程写完了： <a href="http://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247486356&idx=1&sn=ab810ec2f845ce5ae04347ee45708c3d&chksm=9b484b2fac3fc239794797740a23f045c60398c3d8a3a95a86cb00b22bc90b3ac0574ff98ec2&scene=21#wechat_redirect" target="_blank" rel="noopener">一不小心就把ChIP-seq数据分析教程给写完了</a></li>
<li>结果忘记了还有视频这回事，赶紧录制了，同样的B站免费送给大家看，但是不提供售后，网易云课堂也有视频，<strong>点击下面的阅读原文</strong>直达！</li>
</ul>
]]></content>
      <categories>
        <category>project</category>
        <category>chip-seq</category>
      </categories>
      <tags>
        <tag>chip-seq</tag>
        <tag>ZNF582</tag>
      </tags>
  </entry>
  <entry>
    <title>键盘键位修改及管理（Windows篇）</title>
    <url>/2019/12/09/keyboard_setting/</url>
    <content><![CDATA[<h1 id="键盘键位修改及管理（Windows篇）"><a href="#键盘键位修改及管理（Windows篇）" class="headerlink" title="键盘键位修改及管理（Windows篇）"></a>键盘键位修改及管理（Windows篇）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|\ 这个键的 扫描码是 2b</span><br><span class="line">backspace 这个键的 扫描码是0e</span><br></pre></td></tr></table></figure>

<p>先打开Windows注册表编辑器（在cmd或powershell命令行下键入regedit回车即可打开），然后在”HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout”这个项下新建一个名为”ScanCode Map”键（<strong>右键新建二进制值</strong>），然后再右键名称列下的这个”ScanCode Map”修改，这时就可以依次键入编辑那一串hex值了，最后确定就完成了注册表的修改了！</p>
<p>0000000000000000050000001D003A003A001D002B000E000E002B0000000000</p>
<p>我的需求是将backspace和其下方的按键互换，capslock 和左侧control互换。</p>
<a id="more"></a>

<p><img src="/2019/12/09/keyboard_setting/1575880230336.png" alt="1575880230336"></p>
<p>不知道大家生活中有没有遇到这些情况：键盘上某个比较重要的键损坏或失灵而要重新更换键盘，或者在一些游戏、办公软件重的一些默认按键不合理，又或者希望自己DIY出一套属于自己的键位布局。那么我想这篇文章对你会很有帮助。</p>
<p>前几个月因心血来潮想尝试一些其他键位布局（例如Dvorak、Norman、Colemak等），需要修改键盘键位。其实，修改键位的方法也有很多，比较常见的是安装第三方辅助软件修改键位映射和功能。但对于我个人来说，出于简洁安全、自由可控的原因，不太喜欢在自己计算机上安装一些不必要的软件，这个功能完全可以在Windows上通过修改底层的注册表实现。</p>
<p>先说一下这篇文章的大致内容：</p>
<ol>
<li><strong>实现原理</strong></li>
<li><strong>自制管理工具（Python3）</strong></li>
</ol>
<p><strong>实现原理</strong></p>
<p>在Windows注册表中有个”Scancode Map”(即扫描码映射)的键，我们可以通过修改这个键的值来实现键位映射的更改。</p>
<p>“Scancode Map”的值的格式是”hex:00,00,00,00,00,00,00,00,xx,00,00,00,[yy,yy,yy,yy,…,yy,yy,yy,yy,]00,00,00,00”</p>
<p>前8个16进制的值（即前8组00）表示版本号和头部字节，后4个16进制的值（即最后的4组00）表示结束标志，中间xx表示映射数目，最小值为01（考虑到结束标志的4组00）,中括号内为可写项，也是我们修改键位比较关键的部分，每四个代表一组映射。</p>
<p>在我们键盘上每一个按键都有其十六进制扫描码，例如A的扫描码为”1e”,其十六进制扫描码修正形式（为了表示方便就这么说吧）就是”001e”,B的扫描码为”0030”,右ctrl键的扫描码为”e01d”,右alt键的扫描码则表示为”e038”，空值的扫描码为”0000”（可实现无效按键或者说是屏蔽按键）。具体其他按键扫描码在源码中贴有。</p>
<p>既然我们知道键盘上每一个键都具有其对应的扫描码，那么我们假设需要A和B键互换，应该怎么做呢？这个时候就需要我们向中括号中添加我们需要的值，”30,00,1e,00,”就可以实现将B键的功能映射到物理键盘A上（通俗点说就是敲击键盘上的A键会打出B字符，同时要注意值的顺序）。你以为这样就完了吗？不然。”30,00,1e,00,”只能将B键功能映射在物理键盘A键位上，而物理键位B键并未被映射成A！这很危险，相当于键盘上没有一个按键能实现A的功能，所以我们还得添加一项”1e,00,30,00,”。最后我们的”Scancode Map”的完整值就为”hex:00,00,00,00,00,00,00,00,03,00,00,00,30,00,1e,00,1e,00,30,00,00,00,00,00”。就这一串值就可完全调换A，B键的功能。</p>
<p>再来一个，我们要实现右Alt键能实现右Ctrl键的功能，并且屏蔽掉右Ctrl键，那么其”Scancode Map”值就为”hex:00,00,00,00,00,00,00,00,03,00,00,00,1d,e0,38,e0,00,00,1d,e0,00,00,00,00”。</p>
<p>那么问题来了，既然我知道这个键位和所谓的键盘扫描码之间的对应关系和Scancode值之后，具体怎么实现呢？</p>
<p>别急，我们一步步来，先打开Windows注册表编辑器（在cmd或powershell命令行下键入regedit回车即可打开），然后在”HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout”这个项下新建一个名为”ScanCode Map”键（<strong>右键新建二进制值</strong>），然后再右键名称列下的这个”ScanCode Map”修改，这时就可以依次键入编辑那一串hex值了，最后确定就完成了注册表的修改了！</p>
<p>图示如下，先新建这个ScanCode Map的键（右键Keyboard Layout或空白处，然后选择新建二进制值）</p>
<p><img src="/2019/12/09/keyboard_setting/v2-ac694290a9325081ae1658010571ca14_hd.jpg" alt="img"></p>
<p>然后修改值（我的这个hex值功能是实现左Ctrl和CapsLock互换，毕竟Emacs党）</p>
<p><img src="/2019/12/09/keyboard_setting/v2-9b20f51d669814d62a10601864980067_hd.jpg" alt="img"></p>
<p>但是，<strong>修改完了后并不能立即生效</strong>，因为是通过注册表修改底层键位映射所以需要重启计算机，重启资源管理器也是没有用的。</p>
<p>那么，要还原按键怎么办？也很简单，有两种方法，一是从注册表中删除你创建的ScanCode Map这个键，或者用”hex:00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00”覆盖掉原来的值就行了。</p>
<p>当然，如果修改的键位比较多的话，通过查各个键位映射值，修改注册表写hex值，就麻烦很多了（很佩服曾经的自己硬是这样写了一些键位布局）。这时我们需要一个工具来管理，可以用第三方软件。但是既然原理我们已经知道了，也并不难远未达到工程级的量级，那完全可以自己实现这个管理工具。我们可以用Java，C++，Python等来写，这不重要，自己喜欢什么就用什么吧。下面是我用Python写的一个布局管理工具。</p>
<p><strong>自制管理工具</strong></p>
<p>这个工具名为layout_manage.py，功能是实现将我们要修改的键位关系转换为hex，并导出bat或reg文件（bat是Windows批处理文件，reg是Windows注册表脚本文件，在这里的功能是将hex值写入前面注册表中”ScanCode Map”这个键中）到layout_bat或layout_reg文件夹中。<strong>其本身不带有修改注册表功能（python自身的权限问题）</strong>，只是生成的文件具有此功能。</p>
<p>即我们想修改以下键位：将qwer和asdf调换位置，小键盘123和789调换位置，屏蔽右shift键。这时我们只需要新建一个文本文件（例如一个名为test.txt的文件），将以下内容写入：</p>
<p><img src="/2019/12/09/keyboard_setting/v2-75a37940df6e4a1c44a38023630a8894_hd.jpg" alt="img"></p>
<p>这个文件内容是按键值对组成的，”Q: A”的意思是将物理按键Q映射为A字符，即按Q键敲出A，更容易让人理解，冒号前为物理按键，冒号后为按键功能。说一下这个格式规则：</p>
<ol>
<li>忽略大小写</li>
<li>忽略换行符、冒号、分号前后的空白字符（位于两单词间的空格不忽略，如Left Ctrl中间只能有一个空格）</li>
<li>小键盘上的字符前需要加n，例如小键盘上的’0’和’.’应分别写为”n0”和’n.’</li>
<li>一些功能键需正确写入，如：Tab、Esc、CapsLock、Backspace、Delete、Enter、Left Ctrl、Left Windows等</li>
</ol>
<p>然后我们将这个文件作为参数，传递给layout_manage.py并执行。有两种方法，第一种是直接拖动这个txt文件到layout_manage.py图标上，这样layout_manage.py也能顺利执行。第二种方法是在cmd或powershell中执行命令”python layout_manage.py test.txt”,注意路径问题。</p>
<p>此外如果没有其他参数传递给该脚本文件时（即双击直接执行），将会生成一个recover文件，即还原初始键位的文件，也很方便。</p>
<p>附上源码，注释应该很清楚了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">save_format = <span class="string">"bat"</span>    <span class="comment">#这个值可以修改，有两个选项(bat和reg)，可选择生成bat批处理文件或者reg注册表脚本文件,功能一样</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountError</span><span class="params">(Exception)</span>:</span>    <span class="comment">#文本文件格式错误异常</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileFormatError</span><span class="params">(Exception)</span>:</span>    <span class="comment">#save_format值异常</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> save_format <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">"bat"</span>,<span class="string">"reg"</span>]:</span><br><span class="line">    <span class="keyword">raise</span> FileFormatError(<span class="string">"The variable 'save_format'`s value must be 'bat' or 'reg'."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">"layout_"</span>+save_format):</span><br><span class="line">        os.mkdir(<span class="string">"layout_"</span>+save_format)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> save_format == <span class="string">"bat"</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"layout_bat/recover.bat"</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">'@echo off\nreg delete "hklm\\system\\currentcontrolset\\control\\keyboard layout" /v "ScanCode Map" /f\necho "键位已恢复，重启系统后生效"\npause'</span>)</span><br><span class="line">            input(<span class="string">"恢复文件recover.bat已生成至layout_bat文件夹下，以管理员身份右键执行该文件后重启系统生效。\n按回车键退出程序..."</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"layout_reg/recover.reg"</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">'Windows Registry Editor Version 5.00\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout]\n"ScanCode Map"=hex:00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00'</span>)</span><br><span class="line">            input(<span class="string">"恢复文件recover.reg已生成至layout_reg文件夹下，双击执行该文件后重启系统生效。\n按回车键退出程序..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        scan_code_dict = &#123;</span><br><span class="line">            <span class="string">"00 00"</span>:<span class="string">"None"</span>,</span><br><span class="line">            <span class="string">"01 00"</span>:<span class="string">"Esc"</span>,    <span class="comment">#即Esc键的扫描码是"0001"</span></span><br><span class="line">            <span class="string">"02 00"</span>:<span class="string">"1"</span>,</span><br><span class="line">            <span class="string">"03 00"</span>:<span class="string">"2"</span>,</span><br><span class="line">            <span class="string">"04 00"</span>:<span class="string">"3"</span>,</span><br><span class="line">            <span class="string">"05 00"</span>:<span class="string">"4"</span>,</span><br><span class="line">            <span class="string">"06 00"</span>:<span class="string">"5"</span>,</span><br><span class="line">            <span class="string">"07 00"</span>:<span class="string">"6"</span>,</span><br><span class="line">            <span class="string">"08 00"</span>:<span class="string">"7"</span>,</span><br><span class="line">            <span class="string">"09 00"</span>:<span class="string">"8"</span>,</span><br><span class="line">            <span class="string">"0a 00"</span>:<span class="string">"9"</span>,</span><br><span class="line">            <span class="string">"0b 00"</span>:<span class="string">"0"</span>,</span><br><span class="line">            <span class="string">"0c 00"</span>:<span class="string">"-"</span>,</span><br><span class="line">            <span class="string">"0d 00"</span>:<span class="string">"="</span>,</span><br><span class="line">            <span class="string">"0e 00"</span>:<span class="string">"Backspace"</span>,</span><br><span class="line">            <span class="string">"0f 00"</span>:<span class="string">"Tab"</span>,</span><br><span class="line">            <span class="string">"10 00"</span>:<span class="string">"Q"</span>,</span><br><span class="line">            <span class="string">"11 00"</span>:<span class="string">"W"</span>,</span><br><span class="line">            <span class="string">"12 00"</span>:<span class="string">"E"</span>,</span><br><span class="line">            <span class="string">"13 00"</span>:<span class="string">"R"</span>,</span><br><span class="line">            <span class="string">"14 00"</span>:<span class="string">"T"</span>,</span><br><span class="line">            <span class="string">"15 00"</span>:<span class="string">"Y"</span>,</span><br><span class="line">            <span class="string">"16 00"</span>:<span class="string">"U"</span>,</span><br><span class="line">            <span class="string">"17 00"</span>:<span class="string">"I"</span>,</span><br><span class="line">            <span class="string">"18 00"</span>:<span class="string">"O"</span>,</span><br><span class="line">            <span class="string">"19 00"</span>:<span class="string">"P"</span>,</span><br><span class="line">            <span class="string">"1a 00"</span>:<span class="string">"["</span>,</span><br><span class="line">            <span class="string">"1b 00"</span>:<span class="string">"]"</span>,</span><br><span class="line">            <span class="string">"1c 00"</span>:<span class="string">"Enter"</span>,</span><br><span class="line">            <span class="string">"1d 00"</span>:<span class="string">"Left Ctrl"</span>,</span><br><span class="line">            <span class="string">"1e 00"</span>:<span class="string">"A"</span>,</span><br><span class="line">            <span class="string">"1f 00"</span>:<span class="string">"S"</span>,</span><br><span class="line">            <span class="string">"20 00"</span>:<span class="string">"D"</span>,</span><br><span class="line">            <span class="string">"21 00"</span>:<span class="string">"F"</span>,</span><br><span class="line">            <span class="string">"22 00"</span>:<span class="string">"G"</span>,</span><br><span class="line">            <span class="string">"23 00"</span>:<span class="string">"H"</span>,</span><br><span class="line">            <span class="string">"24 00"</span>:<span class="string">"J"</span>,</span><br><span class="line">            <span class="string">"25 00"</span>:<span class="string">"K"</span>,</span><br><span class="line">            <span class="string">"26 00"</span>:<span class="string">"L"</span>,</span><br><span class="line">            <span class="string">"27 00"</span>:<span class="string">"Semicolon"</span>,    <span class="comment">#由评论区指出，键盘上的“;”应该用其他值代替，否则会与配置文本文件中的“;”混淆</span></span><br><span class="line">            <span class="string">"28 00"</span>:<span class="string">"'"</span>,</span><br><span class="line">            <span class="string">"29 00"</span>:<span class="string">"`"</span>,</span><br><span class="line">            <span class="string">"2a 00"</span>:<span class="string">"Left Shift"</span>,</span><br><span class="line">            <span class="string">"2b 00"</span>:<span class="string">"\\"</span>,</span><br><span class="line">            <span class="string">"2c 00"</span>:<span class="string">"Z"</span>,</span><br><span class="line">            <span class="string">"2d 00"</span>:<span class="string">"X"</span>,</span><br><span class="line">            <span class="string">"2e 00"</span>:<span class="string">"C"</span>,</span><br><span class="line">            <span class="string">"2f 00"</span>:<span class="string">"V"</span>,</span><br><span class="line">            <span class="string">"30 00"</span>:<span class="string">"B"</span>,</span><br><span class="line">            <span class="string">"31 00"</span>:<span class="string">"N"</span>,</span><br><span class="line">            <span class="string">"32 00"</span>:<span class="string">"M"</span>,</span><br><span class="line">            <span class="string">"33 00"</span>:<span class="string">","</span>,</span><br><span class="line">            <span class="string">"34 00"</span>:<span class="string">"."</span>,</span><br><span class="line">            <span class="string">"35 00"</span>:<span class="string">"/"</span>,</span><br><span class="line">            <span class="string">"36 00"</span>:<span class="string">"Right Shift"</span>,</span><br><span class="line">            <span class="string">"37 00"</span>:<span class="string">"n*"</span>,</span><br><span class="line">            <span class="string">"38 00"</span>:<span class="string">"Left Alt"</span>,</span><br><span class="line">            <span class="string">"39 00"</span>:<span class="string">"Space"</span>,</span><br><span class="line">            <span class="string">"3a 00"</span>:<span class="string">"Caps Lock"</span>,</span><br><span class="line">            <span class="string">"3b 00"</span>:<span class="string">"F1"</span>,</span><br><span class="line">            <span class="string">"3c 00"</span>:<span class="string">"F2"</span>,</span><br><span class="line">            <span class="string">"3d 00"</span>:<span class="string">"F3"</span>,</span><br><span class="line">            <span class="string">"3e 00"</span>:<span class="string">"F4"</span>,</span><br><span class="line">            <span class="string">"3f 00"</span>:<span class="string">"F5"</span>,</span><br><span class="line">            <span class="string">"40 00"</span>:<span class="string">"F6"</span>,</span><br><span class="line">            <span class="string">"41 00"</span>:<span class="string">"F7"</span>,</span><br><span class="line">            <span class="string">"42 00"</span>:<span class="string">"F8"</span>,</span><br><span class="line">            <span class="string">"43 00"</span>:<span class="string">"F9"</span>,</span><br><span class="line">            <span class="string">"44 00"</span>:<span class="string">"F10"</span>,</span><br><span class="line">            <span class="string">"45 00"</span>:<span class="string">"Num Lock"</span>,</span><br><span class="line">            <span class="string">"46 00"</span>:<span class="string">"Scroll Lock"</span>,</span><br><span class="line">            <span class="string">"47 00"</span>:<span class="string">"n7"</span>,</span><br><span class="line">            <span class="string">"48 00"</span>:<span class="string">"n8"</span>,</span><br><span class="line">            <span class="string">"49 00"</span>:<span class="string">"n9"</span>,</span><br><span class="line">            <span class="string">"4a 00"</span>:<span class="string">"n-"</span>,</span><br><span class="line">            <span class="string">"4b 00"</span>:<span class="string">"n4"</span>,</span><br><span class="line">            <span class="string">"4c 00"</span>:<span class="string">"n5"</span>,</span><br><span class="line">            <span class="string">"4d 00"</span>:<span class="string">"n6"</span>,</span><br><span class="line">            <span class="string">"4e 00"</span>:<span class="string">"n+"</span>,</span><br><span class="line">            <span class="string">"4f 00"</span>:<span class="string">"n1"</span>,</span><br><span class="line">            <span class="string">"50 00"</span>:<span class="string">"n2"</span>,</span><br><span class="line">            <span class="string">"51 00"</span>:<span class="string">"n3"</span>,</span><br><span class="line">            <span class="string">"52 00"</span>:<span class="string">"n0"</span>,</span><br><span class="line">            <span class="string">"53 00"</span>:<span class="string">"n."</span>,</span><br><span class="line">            <span class="string">"57 00"</span>:<span class="string">"F11"</span>,</span><br><span class="line">            <span class="string">"58 00"</span>:<span class="string">"F12"</span>,</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="string">"1c e0"</span>:<span class="string">"nEnter"</span>,</span><br><span class="line">            <span class="string">"1d e0"</span>:<span class="string">"Right Ctrl"</span>,</span><br><span class="line">            <span class="string">"37 e0"</span>:<span class="string">"PrtSc"</span>,</span><br><span class="line">            <span class="string">"38 e0"</span>:<span class="string">"Right Alt"</span>,</span><br><span class="line">            <span class="string">"47 e0"</span>:<span class="string">"Home"</span>,</span><br><span class="line">            <span class="string">"48 e0"</span>:<span class="string">"Up"</span>,</span><br><span class="line">            <span class="string">"49 e0"</span>:<span class="string">"Page Up"</span>,</span><br><span class="line">            <span class="string">"4b e0"</span>:<span class="string">"Left"</span>,</span><br><span class="line">            <span class="string">"4d e0"</span>:<span class="string">"Right"</span>,</span><br><span class="line">            <span class="string">"4f e0"</span>:<span class="string">"End"</span>,</span><br><span class="line">            <span class="string">"50 e0"</span>:<span class="string">"Down"</span>,</span><br><span class="line">            <span class="string">"51 e0"</span>:<span class="string">"Page Down"</span>,</span><br><span class="line">            <span class="string">"52 e0"</span>:<span class="string">"Insert"</span>,</span><br><span class="line">            <span class="string">"53 e0"</span>:<span class="string">"Delete"</span>,</span><br><span class="line">            <span class="string">"5b e0"</span>:<span class="string">"Left Windows"</span>,</span><br><span class="line">            <span class="string">"5c e0"</span>:<span class="string">"Right Windows"</span>,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        fun_key_dict = dict((m.upper(),n) <span class="keyword">for</span> n,m <span class="keyword">in</span> scan_code_dict.items())    <span class="comment">#键值互换,键值全大写</span></span><br><span class="line">        content = <span class="string">'00 00 00 00 00 00 00 00'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#用于暂时保存映射前后的键位，判断这次键位修改是否有风险</span></span><br><span class="line">        before_map_set = set()</span><br><span class="line">        after_map_set = set()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(sys.argv[<span class="number">1</span>]) <span class="keyword">as</span> f:</span><br><span class="line">            p = f.read().strip().split(<span class="string">';'</span>)</span><br><span class="line">            p.remove(<span class="string">''</span>)</span><br><span class="line">            content += <span class="string">' &#123;:0&gt;2x&#125; 00 00 00'</span>.format(len(p)+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">                    <span class="keyword">if</span> len(i.strip().split(<span class="string">':'</span>)) == <span class="number">2</span>:</span><br><span class="line">                        before_map_set.add(i.split(<span class="string">':'</span>)[<span class="number">0</span>].strip().upper())</span><br><span class="line">                        after_map_set.add(i.split(<span class="string">':'</span>)[<span class="number">1</span>].strip().upper())</span><br><span class="line">                        content += <span class="string">' '</span>+fun_key_dict[i.split(<span class="string">':'</span>)[<span class="number">1</span>].strip().upper()]+<span class="string">' '</span>+fun_key_dict[i.split(<span class="string">':'</span>)[<span class="number">0</span>].strip().upper()]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">raise</span> CountError</span><br><span class="line">                content += <span class="string">' 00 00 00 00'</span></span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                print(<span class="string">"文件中键名称有误"</span>)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">except</span> CountError:</span><br><span class="line">                print(<span class="string">"文件中未按格式书写"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> before_map_set != after_map_set:</span><br><span class="line">                    run = input(<span class="string">"此次键位替换存在风险，&#123;&#125;键功能将在键盘上无对应按键，是否继续？(输入y继续，否则退出程序)"</span>.format(str(before_map_set-after_map_set)[<span class="number">1</span>:<span class="number">-1</span>]))</span><br><span class="line">                    <span class="keyword">if</span> run != <span class="string">'y'</span>:</span><br><span class="line">                        sys.exit()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> save_format == <span class="string">"bat"</span>:</span><br><span class="line">                    <span class="keyword">with</span> open(<span class="string">"layout_bat/"</span>+<span class="string">'.'</span>.join(sys.argv[<span class="number">1</span>].split(<span class="string">'\\'</span>)[<span class="number">-1</span>].split(<span class="string">'.'</span>)[:<span class="number">-1</span>])+<span class="string">'.bat'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> g:</span><br><span class="line">                        g.write(<span class="string">'@echo off\nreg add "hklm\\system\\currentcontrolset\\control\\keyboard layout" /v "ScanCode Map" /t REG_BINARY /d "&#123;&#125;" /f\necho "键位已完成修改，重启系统后生效"\npause'</span>.format(<span class="string">''</span>.join(content.split())))</span><br><span class="line">                    input(<span class="string">"...\n&#123;&#125;文件已生成至layout_bat目录下，右键以管理员身份执行该文件后重启系统生效。\n按回车键退出程序..."</span>.format(<span class="string">'.'</span>.join(sys.argv[<span class="number">1</span>].split(<span class="string">'\\'</span>)[<span class="number">-1</span>].split(<span class="string">'.'</span>)[:<span class="number">-1</span>])+<span class="string">'.'</span>+save_format))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">with</span> open(<span class="string">"layout_reg/"</span>+<span class="string">'.'</span>.join(sys.argv[<span class="number">1</span>].split(<span class="string">'\\'</span>)[<span class="number">-1</span>].split(<span class="string">'.'</span>)[:<span class="number">-1</span>])+<span class="string">'.reg'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> g:</span><br><span class="line">                        g.write(<span class="string">'Windows Registry Editor Version 5.00\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout]\n"ScanCode Map"=hex:&#123;&#125;'</span>.format(<span class="string">','</span>.join(content.split())))</span><br><span class="line"></span><br><span class="line">                    input(<span class="string">"...\n&#123;&#125;文件已生成至layout_reg目录下，双击执行该文件后重启系统生效。\n按回车键退出程序..."</span>.format(<span class="string">'.'</span>.join(sys.argv[<span class="number">1</span>].split(<span class="string">'\\'</span>)[<span class="number">-1</span>].split(<span class="string">'.'</span>)[:<span class="number">-1</span>])+<span class="string">'.'</span>+save_format))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        input(<span class="string">"传入参数错误，按回车键退出程序..."</span>)</span><br></pre></td></tr></table></figure>



<p>另外通过此脚本生成的bat或reg文件可以将其保存好，在其他Windows系统电脑上可以直接执行并修改为你想要的键位，这样可以<strong>一次生成，多处适用</strong>！切勿用来恶作剧哦。</p>
<p>关于键位布局：我用了一个多月的Dvorak和两个多月的Norman，刚开始练习使用新键位的一周非常痛苦和新鲜，适应之后在英文文章输入的确要快点，但不是很明显。如果是敲code的话，就没什么可比性了。考虑到种种因素（尤其是在用其他人设备时），所以最后还是回归了QWERTY键位。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The scancodes in translated scancode set 2 are given in hex. Between parentheses the keycap on a US keyboard. The scancodes are given in order, grouped according to groups of keys that are usually found next to each other.</span><br><span class="line"></span><br><span class="line">00 is normally an error code</span><br><span class="line"></span><br><span class="line">01 (Esc)</span><br><span class="line"></span><br><span class="line">02 (1!), 03 (2@), 04 (3#), 05 (4$), 06 (5%E), 07 (6^), 08 (7&amp;), 09 (8*), 0a (9(), 0b (0)), 0c (-_), 0d (&#x3D;+), 0e (Backspace)</span><br><span class="line"></span><br><span class="line">0f (Tab), 10 (Q), 11 (W), 12 (E), 13 (R), 14 (T), 15 (Y), 16 (U), 17 (I), 18 (O), 19 (P), 1a ([&#123;), 1b (]&#125;)</span><br><span class="line"></span><br><span class="line">1c (Enter)</span><br><span class="line"></span><br><span class="line">1d (LCtrl)</span><br><span class="line"></span><br><span class="line">1e (A), 1f (S), 20 (D), 21 (F), 22 (G), 23 (H), 24 (J), 25 (K), 26 (L), 27 (;:), 28 (&#39;&quot;)</span><br><span class="line"></span><br><span class="line">29 (&#96;~)</span><br><span class="line"></span><br><span class="line">2a (LShift)</span><br><span class="line"></span><br><span class="line">2b (\|), on a 102-key keyboard</span><br><span class="line"></span><br><span class="line">2c (Z), 2d (X), 2e (C), 2f (V), 30 (B), 31 (N), 32 (M), 33 (,&lt;), 34 (.&gt;), 35 (&#x2F;?), 36 (RShift)</span><br><span class="line"></span><br><span class="line">37 (Keypad-*) or (*&#x2F;PrtScn) on a 83&#x2F;84-key keyboard</span><br><span class="line"></span><br><span class="line">38 (LAlt), 39 (Space bar),</span><br><span class="line"></span><br><span class="line">3a (CapsLock)</span><br><span class="line"></span><br><span class="line">3b (F1), 3c (F2), 3d (F3), 3e (F4), 3f (F5), 40 (F6), 41 (F7), 42 (F8), 43 (F9), 44 (F10)</span><br><span class="line"></span><br><span class="line">45 (NumLock)</span><br><span class="line"></span><br><span class="line">46 (ScrollLock)</span><br><span class="line"></span><br><span class="line">47 (Keypad-7&#x2F;Home), 48 (Keypad-8&#x2F;Up), 49 (Keypad-9&#x2F;PgUp)</span><br><span class="line"></span><br><span class="line">4a (Keypad--)</span><br><span class="line"></span><br><span class="line">4b (Keypad-4&#x2F;Left), 4c (Keypad-5), 4d (Keypad-6&#x2F;Right), 4e (Keypad-+)</span><br><span class="line"></span><br><span class="line">4f (Keypad-1&#x2F;End), 50 (Keypad-2&#x2F;Down), 51 (Keypad-3&#x2F;PgDn)</span><br><span class="line"></span><br><span class="line">52 (Keypad-0&#x2F;Ins), 53 (Keypad-.&#x2F;Del)</span><br><span class="line"></span><br><span class="line">54 (Alt-SysRq) on a 84+ key keyboard</span><br><span class="line"></span><br><span class="line">55 is less common; occurs e.g. as F11 on a Cherry G80-0777 keyboard, as F12 on a Telerate keyboard, as PF1 on a Focus 9000 keyboard, and as FN on an IBM ThinkPad.</span><br><span class="line"></span><br><span class="line">56 mostly on non-US keyboards. It is often an unlabelled key to the left or to the right of the left Alt key.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">57 (F11), 58 (F12) both on a 101+ key keyboard</span><br><span class="line"></span><br><span class="line">59-5a-...-7f are less common. Assignment is essentially random. Scancodes 55-59 occur as F11-F15 on the Cherry G80-0777 keyboard. Scancodes 59-5c occur on the RC930 keyboard. X calls 5d &#96;KEY_Begin&#39;. Scancodes 61-64 occur on a Telerate keyboard. Scancodes 55, 6d, 6f, 73, 74, 77, 78, 79, 7a, 7b, 7c, 7e occur on the Focus 9000 keyboard. Scancodes 65, 67, 69, 6b occur on a Compaq Armada keyboard. Scancodes 66-68, 73 occur on the Cherry G81-3000 keyboard. Scancodes 70, 73, 79, 7b, 7d occur on a Japanese 86&#x2F;106 keyboard.</span><br><span class="line"></span><br><span class="line">Scancodes f1 and f2 occur on Korean keyboards.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>键盘</tag>
      </tags>
  </entry>
  <entry>
    <title>突变热图作图</title>
    <url>/2019/11/29/mutation_heatmap/</url>
    <content><![CDATA[<h1 id="一个函数实现基因内具有多种突变类型的热图的绘制"><a href="#一个函数实现基因内具有多种突变类型的热图的绘制" class="headerlink" title="一个函数实现基因内具有多种突变类型的热图的绘制"></a><a href="https://www.cnblogs.com/ywliao/p/8991346.html" target="_blank" rel="noopener">一个函数实现基因内具有多种突变类型的热图的绘制</a></h1><p>这里需要致谢这个大神，分享代码。</p>
<p>代码还需要慢慢理解。。。</p>
<a id="more"></a>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(data.table)</span><br><span class="line"><span class="keyword">library</span>(RColorBrewer)</span><br><span class="line"><span class="keyword">library</span>(plyr)  <span class="comment">### 否则报错，没有.() 这个函数</span></span><br><span class="line">my_heatmap &lt;- <span class="keyword">function</span>(vr, </span><br><span class="line">                       <span class="comment"># 下面是配置颜色</span></span><br><span class="line">                       pal = c(<span class="string">"#F2F2F2"</span>,</span><br><span class="line">                               colorRampPalette(c(<span class="string">"blue"</span>, <span class="string">"white"</span>, <span class="string">"red"</span>))(<span class="number">5</span>)[c(<span class="number">1</span>,<span class="number">2</span>)],</span><br><span class="line">                               <span class="string">"#F2F2F2"</span>,</span><br><span class="line">                               colorRampPalette(c(<span class="string">"blue"</span>, <span class="string">"white"</span>, <span class="string">"red"</span>))(<span class="number">5</span>)[c(<span class="number">4</span>,<span class="number">5</span>)],</span><br><span class="line">                               brewer.pal(n = <span class="number">8</span>, name =<span class="string">"Accent"</span>)[c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)],</span><br><span class="line">                               <span class="string">"#E31A1C"</span>,<span class="string">"#6A3D9A"</span>),</span><br><span class="line">                       <span class="comment"># 配置突变类型</span></span><br><span class="line">                       <span class="comment"># Frame_Shift_Del   Frame_Shift_Ins      In_Frame_Del      In_Frame_Ins Missense_Mutation Nonsense_Mutation            Silent</span></span><br><span class="line">                       type = c(<span class="string">"DEL"</span>,<span class="string">"LOSS"</span>,<span class="string">"In_Frame_Del"</span>,<span class="string">"In_Frame_Ins"</span>,<span class="string">"Silent"</span>,<span class="string">"Nonsense_Mutation"</span>,<span class="string">"Missense_Mutation"</span>,<span class="string">"intronic"</span>,<span class="string">"stopgain"</span>,<span class="string">"nonframeshift deletion"</span>,<span class="string">"splicing"</span>, <span class="string">"Frame_Shift_Del"</span>,<span class="string">"UTR3"</span>,<span class="string">"Frame_Shift_Ins"</span>,<span class="string">"UTR5"</span>),</span><br><span class="line">                       <span class="comment"># type = c("DEL","LOSS","NEUTRAL","GAIN","AMPL","nonsynonymous SNV","synonymous SNV","intronic","stopgain","nonframeshift deletion","splicing", "frameshift deletion","UTR3","frameshift insertion","UTR5"),</span></span><br><span class="line">                       order_gene = <span class="literal">T</span>, </span><br><span class="line">                       order_patient = <span class="literal">T</span>, </span><br><span class="line">                       hist_plot = <span class="literal">T</span>, </span><br><span class="line">                       legend_dist = <span class="number">0.4</span>, </span><br><span class="line">                       col_text_cex = <span class="number">1</span>,</span><br><span class="line">                       row_text_cex = <span class="number">1</span>, </span><br><span class="line">                       sub_gene= <span class="literal">NULL</span>,</span><br><span class="line">                       heatmap_mar = c(<span class="number">5</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">2</span>), </span><br><span class="line">                       heatmap_oma=c(<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">0.2</span>),</span><br><span class="line">                       heatmap_mex=<span class="number">0.5</span>, </span><br><span class="line">                       legend_mar = c(<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>),</span><br><span class="line">                       xlab_adj=<span class="number">1</span>, </span><br><span class="line">                       order_omit=c(<span class="string">"NEUTRAL"</span>), </span><br><span class="line">                       annotation_col=<span class="literal">NULL</span>,</span><br><span class="line">                       annotation_colors = <span class="literal">NULL</span>, </span><br><span class="line">                       heatmap_height = <span class="number">3</span>, </span><br><span class="line">                       heatmap_width = <span class="number">3</span>, </span><br><span class="line">                       anno_height=<span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>((length(pal) - length(type)) !=<span class="number">1</span> )&#123;<span class="keyword">stop</span>(<span class="string">"Pal must be one longer than type, because first one pal is col for no mutation"</span>)&#125;</span><br><span class="line">  <span class="keyword">if</span>(!is.null(sub_gene))&#123;</span><br><span class="line">    pal_dt &lt;- data.table(pal, type=c(<span class="string">"NoMut"</span>,type))</span><br><span class="line">    vr &lt;- vr[Gene %<span class="keyword">in</span>% sub_gene,]</span><br><span class="line">    type &lt;- pal_dt[type %<span class="keyword">in</span>% unique(vr$Type),type]</span><br><span class="line">    pal &lt;- c(pal[<span class="number">1</span>],pal_dt[type, on=<span class="string">"type"</span>][,pal])</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    pal_dt &lt;- data.table(pal, type=c(<span class="string">"NoMut"</span>,type))</span><br><span class="line">    type &lt;- pal_dt[type %<span class="keyword">in</span>% unique(vr$Type),type]</span><br><span class="line">    pal &lt;- c(pal[<span class="number">1</span>],pal_dt[type, on=<span class="string">"type"</span>][,pal])</span><br><span class="line">  &#125;</span><br><span class="line">  dt &lt;- unique(vr[,.(Gene,Type,Patient)])</span><br><span class="line">  dt$Type &lt;- factor(dt$Type, levels = type)</span><br><span class="line">  <span class="keyword">if</span>(order_gene)&#123;gene &lt;- dt[!Type %<span class="keyword">in</span>% order_omit,.(N=length(unique(Patient))),by=Gene][order(N),Gene]&#125;<span class="keyword">else</span>&#123;gene &lt;- unique(dt[!Type %<span class="keyword">in</span>% order_omit, Gene])&#125;</span><br><span class="line">  dt$Gene &lt;- factor(dt$Gene, levels = gene)</span><br><span class="line">  <span class="keyword">if</span>(order_patient)&#123;patient &lt;- data.table(table(vr[!Type %<span class="keyword">in</span>% order_omit,]$Patient))[order(-N),V1]&#125;<span class="keyword">else</span>&#123;patient &lt;- unique(dt[!Type %<span class="keyword">in</span>% order_omit, Patient])&#125;</span><br><span class="line">  dt$Patient &lt;- factor(dt$Patient, levels = c(patient, setdiff(unique(dt$Patient),patient)))</span><br><span class="line">  </span><br><span class="line">  setkey(dt, <span class="string">"Type"</span>)</span><br><span class="line">  </span><br><span class="line">  n &lt;- length(unique(dt$Type))</span><br><span class="line">  </span><br><span class="line">  dt$Gene_Patients &lt;- paste(dt$Gene, dt$Patient)</span><br><span class="line">  dt_inf &lt;- dt[,.N,by=.(Gene, Patient)]</span><br><span class="line">  max_mut_num &lt;- max(dt_inf$N)</span><br><span class="line">  dt[,Mut_num:=seq_len(.N),by=.(Patient,Gene)]</span><br><span class="line">  <span class="comment">#main plot</span></span><br><span class="line">  </span><br><span class="line">  dt1 &lt;- copy(dt)</span><br><span class="line">  dt1[Mut_num !=<span class="number">1</span>, Type:=<span class="literal">NA</span>]</span><br><span class="line">  dc &lt;- data.frame(dcast(dt1, Patient ~ Gene, value.var = <span class="string">"Type"</span>, fun.aggregate = <span class="keyword">function</span>(x)(x[!is.na(x)][<span class="number">1</span>])))</span><br><span class="line">  rownames(dc)&lt;- dc[,<span class="number">1</span>]</span><br><span class="line">  data_matrix&lt;-data.matrix(dc[,-<span class="number">1</span>])</span><br><span class="line">  data_matrix[is.na(data_matrix)] &lt;- <span class="number">0</span></span><br><span class="line">  pal=pal</span><br><span class="line">  breaks&lt;-seq(-<span class="number">1</span>,<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span>(!hist_plot &amp; is.null(annotation_col))&#123;</span><br><span class="line">    layout(matrix(data=c(<span class="number">1</span>,<span class="number">2</span>), nrow=<span class="number">1</span>, ncol=<span class="number">2</span>), widths=c(<span class="number">8</span>,<span class="number">2</span>), heights=c(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">    par(mar=heatmap_mar, oma=heatmap_oma, mex=heatmap_mex)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(hist_plot &amp; is.null(annotation_col))&#123;</span><br><span class="line">    layout(matrix(c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>),<span class="number">2</span>,<span class="number">2</span>,byrow=<span class="literal">TRUE</span>), widths=c(heatmap_width,<span class="number">1</span>), </span><br><span class="line">           heights=c(<span class="number">1</span>,heatmap_height), <span class="literal">TRUE</span>)</span><br><span class="line">    par(mar=heatmap_mar)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(hist_plot &amp; !is.null(annotation_col))&#123;</span><br><span class="line">    <span class="keyword">if</span>(is.null(anno_height))&#123;anno_height &lt;- <span class="number">0.02</span> * ncol(annotation_col)&#125;</span><br><span class="line">    layout(matrix(data=c(<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>), nrow=<span class="number">3</span>, ncol=<span class="number">2</span>, byrow=<span class="literal">TRUE</span>), widths=c(heatmap_width,<span class="number">1</span>), heights=c(<span class="number">1</span>, anno_height, heatmap_height))</span><br><span class="line">    par(mar=heatmap_mar, oma=heatmap_oma, mex=heatmap_mex)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!hist_plot &amp; !is.null(annotation_col))&#123;</span><br><span class="line">    <span class="keyword">if</span>(is.null(anno_height))&#123;anno_height &lt;- <span class="number">0.02</span> * ncol(annotation_col)&#125;</span><br><span class="line">    layout(matrix(data=c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>), nrow=<span class="number">2</span>, ncol=<span class="number">2</span>, byrow=<span class="literal">TRUE</span>), widths=c(<span class="number">8</span>,<span class="number">2</span>), heights=c(anno_height,<span class="number">1</span>))</span><br><span class="line">    par(mar=heatmap_mar, oma=heatmap_oma, mex=heatmap_mex)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  image(x=<span class="number">1</span>:nrow(data_matrix),y=<span class="number">1</span>:ncol(data_matrix),</span><br><span class="line">        z=data_matrix,xlab=<span class="string">""</span>,ylab=<span class="string">""</span>,breaks=breaks,</span><br><span class="line">        col=pal[<span class="number">1</span>:<span class="number">11</span>],axes=<span class="literal">FALSE</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">#sub plot</span></span><br><span class="line">  add_plot &lt;- <span class="keyword">function</span>(dt, i)&#123;</span><br><span class="line">    dt1 &lt;- copy(dt)</span><br><span class="line">    dt1[Mut_num != i, Type:=<span class="literal">NA</span>]</span><br><span class="line">    dc &lt;- data.frame(dcast(dt1, Patient ~ Gene, value.var = <span class="string">"Type"</span>, fun.aggregate = <span class="keyword">function</span>(x)&#123;ifelse(length(x) &gt;<span class="number">1</span>,x[!is.na(x)][<span class="number">1</span>],factor(<span class="literal">NA</span>))&#125;))</span><br><span class="line">    rownames(dc)&lt;- dc[,<span class="number">1</span>]</span><br><span class="line">    data_matrix &lt;- data.matrix(dc[,-<span class="number">1</span>])</span><br><span class="line">    xy &lt;- which(data_matrix !=<span class="number">0</span>, arr.ind = <span class="literal">T</span>)</span><br><span class="line">    <span class="comment">#apply(xy, 1, function(x)points(x[1], x[2],pch=15, cex=2.5 -0.5*i, col=pal[data_matrix[x[1],x[2]]+1]))</span></span><br><span class="line">    apply(xy, <span class="number">1</span>, <span class="keyword">function</span>(x)points(x[<span class="number">1</span>]-<span class="number">0.6</span>+i*<span class="number">0.25</span>, x[<span class="number">2</span>],pch=<span class="number">15</span>, cex=<span class="number">1.2</span> - i*<span class="number">0.08</span>, col=pal[data_matrix[x[<span class="number">1</span>],x[<span class="number">2</span>]]+<span class="number">1</span>]))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ploti &lt;- data.frame(i=<span class="number">2</span>:max_mut_num)</span><br><span class="line">  apply(ploti, <span class="number">1</span>, <span class="keyword">function</span>(i)&#123;print(add_plot(dt, i))&#125;)</span><br><span class="line">  </span><br><span class="line">  text(x=<span class="number">1</span>:nrow(data_matrix)+<span class="number">0.1</span>, y=par(<span class="string">"usr"</span>)[<span class="number">1</span>] - xlab_adj, </span><br><span class="line">       srt = <span class="number">90</span>, adj = <span class="number">0.5</span>, labels = rownames(data_matrix), </span><br><span class="line">       xpd = <span class="literal">TRUE</span>, cex=col_text_cex)</span><br><span class="line">  axis(<span class="number">2</span>,at=<span class="number">1</span>:ncol(data_matrix),labels=colnames(data_matrix),</span><br><span class="line">       col=<span class="string">"white"</span>,las=<span class="number">1</span>, cex.lab=<span class="number">0.1</span>, cex.axis=row_text_cex)</span><br><span class="line">  abline(h=c(<span class="number">1</span>:ncol(data_matrix))+<span class="number">0.5</span>,v=c(<span class="number">1</span>:nrow(data_matrix))+<span class="number">0.5</span>,</span><br><span class="line">         col=<span class="string">"white"</span>,lwd=<span class="number">2</span>,xpd=<span class="literal">F</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#add annotation plot</span></span><br><span class="line">  <span class="keyword">if</span>(!is.null(annotation_col))&#123;</span><br><span class="line">    change_factor &lt;- <span class="keyword">function</span>(x)&#123;as.numeric(factor(x, labels = <span class="number">1</span>:length(levels(x))))&#125; <span class="comment">#change infomation to numeric       </span></span><br><span class="line">    colname_tmp &lt;- colnames(annotation_col)</span><br><span class="line">    annotation_col_mt &lt;- as.matrix(apply(annotation_col, <span class="number">2</span>, change_factor))</span><br><span class="line">    rownames(annotation_col_mt) &lt;- rownames(annotation_col)</span><br><span class="line">    colnames(annotation_col_mt) &lt;- colname_tmp</span><br><span class="line">    annotation_col_mt &lt;- annotation_col_mt[rownames(data_matrix),]</span><br><span class="line">    <span class="comment">## change infomation numric to unique number  </span></span><br><span class="line">    cumsum &lt;- <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(!is.null(dim(annotation_col_mt)))&#123;<span class="comment">#if more than one column, cummulate info numeric</span></span><br><span class="line">      <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:ncol(as.data.frame(annotation_col_mt)))&#123;</span><br><span class="line">        annotation_col_mt[,i] &lt;- cumsum + annotation_col_mt[,i]</span><br><span class="line">        cumsum &lt;- max(annotation_col_mt[,i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">## get color according to infomation</span></span><br><span class="line">    get_color &lt;- <span class="keyword">function</span>(anno)&#123;<span class="keyword">return</span>(annotation_colors[[anno]][levels(annotation_col[,anno])])&#125;</span><br><span class="line">    palAnn &lt;- <span class="literal">NULL</span></span><br><span class="line">    <span class="keyword">if</span>(is.null(dim(annotation_col_mt)))&#123;</span><br><span class="line">      rowname_tmp &lt;- rownames(annotation_col_mt)</span><br><span class="line">      annotation_col_mt &lt;- as.matrix(annotation_col_mt, nrow=<span class="number">1</span>)</span><br><span class="line">      rownames(annotation_col_mt) &lt;- rowname_tmp</span><br><span class="line">      colnames(annotation_col_mt) &lt;- colname_tmp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(anno <span class="keyword">in</span> colnames(annotation_col_mt))&#123;</span><br><span class="line">      palAnn &lt;- c(palAnn, get_color(anno))</span><br><span class="line">    &#125;</span><br><span class="line">    par(mar=c(<span class="number">0</span>,heatmap_mar[<span class="number">2</span>], <span class="number">0</span>,  heatmap_mar[<span class="number">4</span>]))</span><br><span class="line">    image(x=<span class="number">1</span>:nrow(annotation_col_mt), y=<span class="number">1</span>:ncol(annotation_col_mt), z= annotation_col_mt, col=palAnn, xlab=<span class="string">""</span>,ylab=<span class="string">""</span>,</span><br><span class="line">          axes=<span class="literal">FALSE</span>)</span><br><span class="line">    axis(<span class="number">2</span>,at=<span class="number">1</span>:ncol(annotation_col_mt),labels=colnames(annotation_col_mt),</span><br><span class="line">         col=<span class="string">"white"</span>,las=<span class="number">1</span>, cex.lab=<span class="number">0.1</span>, cex.axis=row_text_cex)</span><br><span class="line">    abline(h=c(<span class="number">1</span>:ncol(annotation_col_mt))+<span class="number">0.5</span>,v=c(<span class="number">1</span>:nrow(annotation_col_mt))+<span class="number">0.5</span>,</span><br><span class="line">           col=<span class="string">"white"</span>,lwd=<span class="number">2</span>,xpd=<span class="literal">F</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(hist_plot)&#123;</span><br><span class="line">    <span class="comment">#hist</span></span><br><span class="line">    par(mar=c(<span class="number">0</span>,<span class="number">2</span>+<span class="number">0.5</span>,<span class="number">3</span>,heatmap_mar[<span class="number">4</span>]-<span class="number">0.9</span>))</span><br><span class="line">    patient_dt &lt;- dt[,.N,by=.(Patient,Type)]</span><br><span class="line">    mt &lt;- data.frame(dcast(patient_dt, Type ~ Patient, value.var = <span class="string">"N"</span>))</span><br><span class="line">    data_matrix &lt;- data.matrix(mt[,-<span class="number">1</span>])</span><br><span class="line">    rownames(data_matrix) &lt;- mt[,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">tryCatch</span>(data_matrix &lt;- data_matrix[setdiff(type, order_omit), patient], error = <span class="keyword">function</span>(e)&#123;print(<span class="string">"type argument or your patient name format(include "</span>-<span class="string">" and so on )"</span>)&#125;)</span><br><span class="line">    data_matrix[is.na(data_matrix)] &lt;- <span class="number">0</span></span><br><span class="line">    omit_idx &lt;- <span class="literal">NULL</span></span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> order_omit)&#123;omit_idx &lt;- c(omit_idx,<span class="number">1</span>+which(type == i))&#125;</span><br><span class="line">    barplot(data_matrix, col=pal[-c(<span class="number">1</span>,omit_idx)],space=<span class="number">0</span>,border = <span class="string">"white"</span>,axes=<span class="literal">T</span>,xlab=<span class="string">""</span>,ann=<span class="literal">F</span>, xaxt=<span class="string">"n"</span>)</span><br><span class="line">    </span><br><span class="line">    par(mar=c( heatmap_mar[<span class="number">1</span>]-<span class="number">2</span> , <span class="number">0.8</span>, heatmap_mar[<span class="number">3</span>]+<span class="number">2.2</span>, <span class="number">3</span>),las=<span class="number">1</span>)</span><br><span class="line">    gene_dt &lt;- dt[,.N,by=.(Gene,Type)]</span><br><span class="line">    mt &lt;- data.frame(dcast(gene_dt, Type ~ Gene, value.var = <span class="string">"N"</span>))</span><br><span class="line">    data_matrix &lt;- data.matrix(mt[,-<span class="number">1</span>])</span><br><span class="line">    rownames(data_matrix) &lt;- mt[,<span class="number">1</span>]</span><br><span class="line">    gene &lt;- gsub(<span class="string">"ATM,"</span>, <span class="string">"ATM."</span>, gene)</span><br><span class="line">    <span class="keyword">tryCatch</span>(data_matrix &lt;- data_matrix[setdiff(type, order_omit), gene], error = <span class="keyword">function</span>(e)&#123;print(<span class="string">"type argument or check your gene name format(please not include "</span>-<span class="string">" and so on)"</span>)&#125;)</span><br><span class="line">    data_matrix[is.na(data_matrix)] &lt;- <span class="number">0</span></span><br><span class="line">    barplot(data_matrix, col=pal[-c(<span class="number">1</span>,omit_idx)],space=<span class="number">0</span>,border = <span class="string">"white"</span>,axes=<span class="literal">T</span>,xlab=<span class="string">""</span>, ann=<span class="literal">F</span>, horiz = <span class="literal">T</span>, yaxt=<span class="string">"n"</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#add legend   </span></span><br><span class="line">  par(mar=legend_mar)</span><br><span class="line">  plot(<span class="number">3</span>, <span class="number">8</span>,  axes=<span class="literal">F</span>, ann=<span class="literal">F</span>, type=<span class="string">"n"</span>)</span><br><span class="line">  <span class="keyword">if</span>(is.null(annotation_col))&#123;</span><br><span class="line">    ploti &lt;- data.frame(i=<span class="number">1</span>:length(type))</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">#add annotation legend</span></span><br><span class="line">    ploti &lt;- data.frame(i=<span class="number">1</span>:(length(type) + max(annotation_col_mt)))</span><br><span class="line">    pal &lt;- c(<span class="string">"NULL"</span>, palAnn, pal[-<span class="number">1</span>])</span><br><span class="line">    anno_label &lt;- <span class="literal">NULL</span></span><br><span class="line">    <span class="keyword">for</span> (anno <span class="keyword">in</span> colnames(annotation_col))&#123;</span><br><span class="line">      anno_label &lt;- c(anno_label, levels(annotation_col[[anno]]))</span><br><span class="line">    &#125;</span><br><span class="line">    type &lt;- c(anno_label,type)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!hist_plot)&#123;</span><br><span class="line">    tmp &lt;- apply(ploti, <span class="number">1</span>, <span class="keyword">function</span>(i)&#123;print(points(<span class="number">2</span>, <span class="number">10</span>+(length(type)-i)*legend_dist, pch=<span class="number">15</span>, cex=<span class="number">2</span>, col=pal[i+<span class="number">1</span>]))&#125;)</span><br><span class="line">    tmp &lt;- apply(ploti, <span class="number">1</span>, <span class="keyword">function</span>(i)&#123;print(text(<span class="number">3</span>, <span class="number">10</span>+(length(type)-i)*legend_dist, labels = type[i],pch=<span class="number">15</span>, cex=<span class="number">1</span>, col=<span class="string">"black"</span>))&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(hist_plot)&#123;</span><br><span class="line">    tmp &lt;- apply(ploti, <span class="number">1</span>, <span class="keyword">function</span>(i)&#123;print(points(<span class="number">2</span>, <span class="number">5</span>+(length(type)-i)*legend_dist, pch=<span class="number">15</span>, cex=<span class="number">0.9</span>, col=pal[i+<span class="number">1</span>]))&#125;)</span><br><span class="line">    tmp &lt;- apply(ploti, <span class="number">1</span>, <span class="keyword">function</span>(i)&#123;print(text(<span class="number">2.8</span>, <span class="number">5</span>+(length(type)-i)*legend_dist, labels = type[i],pch=<span class="number">15</span>, cex=<span class="number">0.9</span>, col=<span class="string">"black"</span>))&#125;)  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#####################################################################</span></span><br><span class="line"><span class="comment">######函数定义完成，开始作图</span></span><br><span class="line"><span class="comment">#####################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################</span></span><br><span class="line"><span class="comment">#########tumor</span></span><br><span class="line"><span class="comment">############################</span></span><br><span class="line">getwd()</span><br><span class="line"><span class="keyword">library</span>(maftools)</span><br><span class="line">var.annovar.maf = annovarToMaf(annovar = <span class="string">"./Rdata/Tumor_all_sample.txt"</span>, </span><br><span class="line">                               Center = <span class="string">'NA'</span>, </span><br><span class="line">                               refBuild = <span class="string">'hg38'</span>, </span><br><span class="line">                               tsbCol = <span class="string">'Tumor_Sample_Barcode'</span>, </span><br><span class="line">                               table = <span class="string">'refGene'</span>,</span><br><span class="line">                               sep = <span class="string">"\t"</span>)</span><br><span class="line"><span class="keyword">library</span>(stringr)</span><br><span class="line">var.annovar.maf$Tumor_Sample_Barcode&lt;- str_split(var.annovar.maf$Tumor_Sample_Barcode,<span class="string">'_'</span>,simplify = <span class="literal">T</span>)[,<span class="number">1</span>]</span><br><span class="line">table(is.na(var.annovar.maf$exon))</span><br><span class="line">var.annovar.maf&lt;- var.annovar.maf[is.na(var.annovar.maf$exon)==<span class="literal">F</span>,]</span><br><span class="line"></span><br><span class="line">vr=data.table(Gene=var.annovar.maf$Gene.refGene, </span><br><span class="line">              Type=var.annovar.maf$Variant_Classification,</span><br><span class="line">              Patient=var.annovar.maf$Tumor_Sample_Barcode</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">table(var.annovar.maf$Variant_Classification)</span><br><span class="line"></span><br><span class="line">pdf(<span class="string">"heatmap_cnv_mut.pdf"</span>, height=<span class="number">12</span>, width = <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">my_heatmap(vr, heatmap_mar = c(<span class="number">17</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">2</span>),hist_plot = <span class="literal">F</span>, legend_dist=<span class="number">0.1</span>, xlab_adj = <span class="number">1.2</span>, order_patient = <span class="literal">T</span>, order_gene = <span class="literal">T</span>)</span><br><span class="line"></span><br><span class="line">dev.off()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#only a few gene</span></span><br><span class="line">pdf(<span class="string">"Assoc_CN1.pdf"</span>, height=<span class="number">2</span>,width = <span class="number">14</span>)</span><br><span class="line">my_heatmap(vr, heatmap_mar = c(<span class="number">10</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">3</span>), sub_gene = c(<span class="string">"TP53"</span>, <span class="string">"NOTCH1"</span>, <span class="string">"PCLO"</span>, <span class="string">"PTEN"</span>, <span class="string">"CDKN2A"</span>, <span class="string">"FBXW7"</span>,</span><br><span class="line">                                                       <span class="string">"NFE2L2"</span>, <span class="string">"COL1A1"</span>, <span class="string">"FAT4"</span>, <span class="string">"FGFR3"</span>, <span class="string">"GRM8"</span>, <span class="string">"KMT2D"</span>),</span><br><span class="line">           hist_plot = <span class="literal">F</span>,legend_dist=<span class="number">0.2</span>, xlab_adj = <span class="number">0.9</span>, order_omit = <span class="string">"NEUTRAL"</span>)</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/29/mutation_heatmap/1575018561338.png" alt="1575018561338"></p>
<p><img src="/2019/11/29/mutation_heatmap/1093203-20180504203818609-1190162987.png" alt="img"><br><img src="/2019/11/29/mutation_heatmap/1093203-20180504203834020-1775735198.png" alt="img"><br><img src="/2019/11/29/mutation_heatmap/1093203-20180906163414548-140693379.png" alt="img"></p>
<p>  我们平常多见的基因突变热图是一个基因一个格子，一种突变类型，但实际上在同一个病人中，同一个基因往往具有多种突变类型，因此传统的热图绘制工具并不能满足我们绘图的需要。应研究需要，本人自己写了一个热图绘制函数，内部调用image 进行热图的绘制， barplot进行直方图绘制， 用data.table进行数据处理。对于一个基因内多种突变类型如何表现出来的问题， 这个函数先采用image将初步的热图绘制出来，再使用points，以方块形式将第二种突变，第三种突变依次添加， 在添加的同时方块位置稍为移动并且伴随着大小的略微缩小，以实现更好的显示效果，最多能在一个热图格子上表示四种突变。<br>  函数如下， 需要安装并加载data.table 1.10.4， 加载RColorBrewer</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">my_heatmap &lt;- <span class="keyword">function</span>(vr, </span><br><span class="line">                       <span class="comment"># 下面是配置颜色</span></span><br><span class="line">                       pal = c(<span class="string">"#F2F2F2"</span>,</span><br><span class="line">                               colorRampPalette(c(<span class="string">"blue"</span>, <span class="string">"white"</span>, <span class="string">"red"</span>))(<span class="number">5</span>)[c(<span class="number">1</span>,<span class="number">2</span>)],</span><br><span class="line">                               <span class="string">"#F2F2F2"</span>,</span><br><span class="line">                               colorRampPalette(c(<span class="string">"blue"</span>, <span class="string">"white"</span>, <span class="string">"red"</span>))(<span class="number">5</span>)[c(<span class="number">4</span>,<span class="number">5</span>)],</span><br><span class="line">                               brewer.pal(n = <span class="number">8</span>, name =<span class="string">"Accent"</span>)[c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)],</span><br><span class="line">                               <span class="string">"#E31A1C"</span>,<span class="string">"#6A3D9A"</span>),</span><br><span class="line">                       <span class="comment"># 配置突变类型</span></span><br><span class="line">                       type = c(<span class="string">"DEL"</span>,<span class="string">"LOSS"</span>,<span class="string">"NEUTRAL"</span>,<span class="string">"GAIN"</span>,<span class="string">"AMPL"</span>,<span class="string">"nonsynonymous SNV"</span>,<span class="string">"synonymous SNV"</span>,<span class="string">"intronic"</span>,<span class="string">"stopgain"</span>,<span class="string">"nonframeshift deletion"</span>,<span class="string">"splicing"</span>, <span class="string">"frameshift deletion"</span>,<span class="string">"UTR3"</span>,<span class="string">"frameshift insertion"</span>,<span class="string">"UTR5"</span>),</span><br><span class="line">                       order_gene = <span class="literal">T</span>, </span><br><span class="line">                       order_patient = <span class="literal">T</span>, </span><br><span class="line">                       hist_plot = <span class="literal">T</span>, </span><br><span class="line">                       legend_dist = <span class="number">0.4</span>, </span><br><span class="line">                       col_text_cex = <span class="number">1</span>,</span><br><span class="line">                       row_text_cex = <span class="number">1</span>, </span><br><span class="line">                       sub_gene= <span class="literal">NULL</span>,</span><br><span class="line">                       heatmap_mar = c(<span class="number">5</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">2</span>), </span><br><span class="line">                       heatmap_oma=c(<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">0.2</span>),</span><br><span class="line">                       heatmap_mex=<span class="number">0.5</span>, </span><br><span class="line">                       legend_mar = c(<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>),</span><br><span class="line">                       xlab_adj=<span class="number">1</span>, </span><br><span class="line">                       order_omit=c(<span class="string">"NEUTRAL"</span>), </span><br><span class="line">                       annotation_col=<span class="literal">NULL</span>,</span><br><span class="line">                       annotation_colors = <span class="literal">NULL</span>, </span><br><span class="line">                       heatmap_height = <span class="number">3</span>, </span><br><span class="line">                       heatmap_width = <span class="number">3</span>, </span><br><span class="line">                       anno_height=<span class="literal">NULL</span>)</span><br><span class="line">    </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>((length(pal) - length(type)) !=<span class="number">1</span> )&#123;<span class="keyword">stop</span>(<span class="string">"Pal must be one longer than type, because first one pal is col for no mutation"</span>)&#125;</span><br><span class="line">  <span class="keyword">if</span>(!is.null(sub_gene))&#123;</span><br><span class="line">    pal_dt &lt;- data.table(pal, type=c(<span class="string">"NoMut"</span>,type))</span><br><span class="line">    vr &lt;- vr[Gene %<span class="keyword">in</span>% sub_gene,]</span><br><span class="line">    type &lt;- pal_dt[type %<span class="keyword">in</span>% unique(vr$Type),type]</span><br><span class="line">    pal &lt;- c(pal[<span class="number">1</span>],pal_dt[type, on=<span class="string">"type"</span>][,pal])</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    pal_dt &lt;- data.table(pal, type=c(<span class="string">"NoMut"</span>,type))</span><br><span class="line">    type &lt;- pal_dt[type %<span class="keyword">in</span>% unique(vr$Type),type]</span><br><span class="line">    pal &lt;- c(pal[<span class="number">1</span>],pal_dt[type, on=<span class="string">"type"</span>][,pal])</span><br><span class="line">  &#125;</span><br><span class="line">  dt &lt;- unique(vr[,.(Gene,Type,Patient)])</span><br><span class="line">  dt$Type &lt;- factor(dt$Type, levels = type)</span><br><span class="line">  <span class="keyword">if</span>(order_gene)&#123;gene &lt;- dt[!Type %<span class="keyword">in</span>% order_omit,.(N=length(unique(Patient))),by=Gene][order(N),Gene]&#125;<span class="keyword">else</span>&#123;gene &lt;- unique(dt[!Type %<span class="keyword">in</span>% order_omit, Gene])&#125;</span><br><span class="line">  dt$Gene &lt;- factor(dt$Gene, levels = gene)</span><br><span class="line">  <span class="keyword">if</span>(order_patient)&#123;patient &lt;- data.table(table(vr[!Type %<span class="keyword">in</span>% order_omit,]$Patient))[order(-N),V1]&#125;<span class="keyword">else</span>&#123;patient &lt;- unique(dt[!Type %<span class="keyword">in</span>% order_omit, Patient])&#125;</span><br><span class="line">  dt$Patient &lt;- factor(dt$Patient, levels = c(patient, setdiff(unique(dt$Patient),patient)))</span><br><span class="line">  </span><br><span class="line">  setkey(dt, <span class="string">"Type"</span>)</span><br><span class="line">  </span><br><span class="line">  n &lt;- length(unique(dt$Type))</span><br><span class="line">  </span><br><span class="line">  dt$Gene_Patients &lt;- paste(dt$Gene, dt$Patient)</span><br><span class="line">  dt_inf &lt;- dt[,.N,by=.(Gene, Patient)]</span><br><span class="line">  max_mut_num &lt;- max(dt_inf$N)</span><br><span class="line">  dt[,Mut_num:=seq_len(.N),by=.(Patient,Gene)]</span><br><span class="line">  <span class="comment">#main plot</span></span><br><span class="line">  </span><br><span class="line">  dt1 &lt;- copy(dt)</span><br><span class="line">  dt1[Mut_num !=<span class="number">1</span>, Type:=<span class="literal">NA</span>]</span><br><span class="line">  dc &lt;- data.frame(dcast(dt1, Patient ~ Gene, value.var = <span class="string">"Type"</span>, fun.aggregate = <span class="keyword">function</span>(x)(x[!is.na(x)][<span class="number">1</span>])))</span><br><span class="line">  rownames(dc)&lt;- dc[,<span class="number">1</span>]</span><br><span class="line">  data_matrix&lt;-data.matrix(dc[,-<span class="number">1</span>])</span><br><span class="line">  data_matrix[is.na(data_matrix)] &lt;- <span class="number">0</span></span><br><span class="line">  pal=pal</span><br><span class="line">  breaks&lt;-seq(-<span class="number">1</span>,<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span>(!hist_plot &amp; is.null(annotation_col))&#123;</span><br><span class="line">    layout(matrix(data=c(<span class="number">1</span>,<span class="number">2</span>), nrow=<span class="number">1</span>, ncol=<span class="number">2</span>), widths=c(<span class="number">8</span>,<span class="number">2</span>), heights=c(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">    par(mar=heatmap_mar, oma=heatmap_oma, mex=heatmap_mex)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(hist_plot &amp; is.null(annotation_col))&#123;</span><br><span class="line">    layout(matrix(c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>),<span class="number">2</span>,<span class="number">2</span>,byrow=<span class="literal">TRUE</span>), widths=c(heatmap_width,<span class="number">1</span>), </span><br><span class="line">           heights=c(<span class="number">1</span>,heatmap_height), <span class="literal">TRUE</span>)</span><br><span class="line">    par(mar=heatmap_mar)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(hist_plot &amp; !is.null(annotation_col))&#123;</span><br><span class="line">    <span class="keyword">if</span>(is.null(anno_height))&#123;anno_height &lt;- <span class="number">0.02</span> * ncol(annotation_col)&#125;</span><br><span class="line">    layout(matrix(data=c(<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>), nrow=<span class="number">3</span>, ncol=<span class="number">2</span>, byrow=<span class="literal">TRUE</span>), widths=c(heatmap_width,<span class="number">1</span>), heights=c(<span class="number">1</span>, anno_height, heatmap_height))</span><br><span class="line">    par(mar=heatmap_mar, oma=heatmap_oma, mex=heatmap_mex)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!hist_plot &amp; !is.null(annotation_col))&#123;</span><br><span class="line">    <span class="keyword">if</span>(is.null(anno_height))&#123;anno_height &lt;- <span class="number">0.02</span> * ncol(annotation_col)&#125;</span><br><span class="line">    layout(matrix(data=c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>), nrow=<span class="number">2</span>, ncol=<span class="number">2</span>, byrow=<span class="literal">TRUE</span>), widths=c(<span class="number">8</span>,<span class="number">2</span>), heights=c(anno_height,<span class="number">1</span>))</span><br><span class="line">    par(mar=heatmap_mar, oma=heatmap_oma, mex=heatmap_mex)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  image(x=<span class="number">1</span>:nrow(data_matrix),y=<span class="number">1</span>:ncol(data_matrix),</span><br><span class="line">        z=data_matrix,xlab=<span class="string">""</span>,ylab=<span class="string">""</span>,breaks=breaks,</span><br><span class="line">        col=pal[<span class="number">1</span>:<span class="number">11</span>],axes=<span class="literal">FALSE</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">#sub plot</span></span><br><span class="line">  add_plot &lt;- <span class="keyword">function</span>(dt, i)&#123;</span><br><span class="line">    dt1 &lt;- copy(dt)</span><br><span class="line">    dt1[Mut_num != i, Type:=<span class="literal">NA</span>]</span><br><span class="line">    dc &lt;- data.frame(dcast(dt1, Patient ~ Gene, value.var = <span class="string">"Type"</span>, fun.aggregate = <span class="keyword">function</span>(x)&#123;ifelse(length(x) &gt;<span class="number">1</span>,x[!is.na(x)][<span class="number">1</span>],factor(<span class="literal">NA</span>))&#125;))</span><br><span class="line">    rownames(dc)&lt;- dc[,<span class="number">1</span>]</span><br><span class="line">    data_matrix &lt;- data.matrix(dc[,-<span class="number">1</span>])</span><br><span class="line">    xy &lt;- which(data_matrix !=<span class="number">0</span>, arr.ind = <span class="literal">T</span>)</span><br><span class="line">    <span class="comment">#apply(xy, 1, function(x)points(x[1], x[2],pch=15, cex=2.5 -0.5*i, col=pal[data_matrix[x[1],x[2]]+1]))</span></span><br><span class="line">    apply(xy, <span class="number">1</span>, <span class="keyword">function</span>(x)points(x[<span class="number">1</span>]-<span class="number">0.6</span>+i*<span class="number">0.25</span>, x[<span class="number">2</span>],pch=<span class="number">15</span>, cex=<span class="number">1.2</span> - i*<span class="number">0.08</span>, col=pal[data_matrix[x[<span class="number">1</span>],x[<span class="number">2</span>]]+<span class="number">1</span>]))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ploti &lt;- data.frame(i=<span class="number">2</span>:max_mut_num)</span><br><span class="line">  apply(ploti, <span class="number">1</span>, <span class="keyword">function</span>(i)&#123;print(add_plot(dt, i))&#125;)</span><br><span class="line">  </span><br><span class="line">  text(x=<span class="number">1</span>:nrow(data_matrix)+<span class="number">0.1</span>, y=par(<span class="string">"usr"</span>)[<span class="number">1</span>] - xlab_adj, </span><br><span class="line">       srt = <span class="number">90</span>, adj = <span class="number">0.5</span>, labels = rownames(data_matrix), </span><br><span class="line">       xpd = <span class="literal">TRUE</span>, cex=col_text_cex)</span><br><span class="line">  axis(<span class="number">2</span>,at=<span class="number">1</span>:ncol(data_matrix),labels=colnames(data_matrix),</span><br><span class="line">       col=<span class="string">"white"</span>,las=<span class="number">1</span>, cex.lab=<span class="number">0.1</span>, cex.axis=row_text_cex)</span><br><span class="line">  abline(h=c(<span class="number">1</span>:ncol(data_matrix))+<span class="number">0.5</span>,v=c(<span class="number">1</span>:nrow(data_matrix))+<span class="number">0.5</span>,</span><br><span class="line">         col=<span class="string">"white"</span>,lwd=<span class="number">2</span>,xpd=<span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#add annotation plot</span></span><br><span class="line">  <span class="keyword">if</span>(!is.null(annotation_col))&#123;</span><br><span class="line">    change_factor &lt;- <span class="keyword">function</span>(x)&#123;as.numeric(factor(x, labels = <span class="number">1</span>:length(levels(x))))&#125; <span class="comment">#change infomation to numeric       </span></span><br><span class="line">    colname_tmp &lt;- colnames(annotation_col)</span><br><span class="line">    annotation_col_mt &lt;- as.matrix(apply(annotation_col, <span class="number">2</span>, change_factor))</span><br><span class="line">    rownames(annotation_col_mt) &lt;- rownames(annotation_col)</span><br><span class="line">    colnames(annotation_col_mt) &lt;- colname_tmp</span><br><span class="line">    annotation_col_mt &lt;- annotation_col_mt[rownames(data_matrix),]</span><br><span class="line">    <span class="comment">## change infomation numric to unique number  </span></span><br><span class="line">    cumsum &lt;- <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(!is.null(dim(annotation_col_mt)))&#123;<span class="comment">#if more than one column, cummulate info numeric</span></span><br><span class="line">      <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:ncol(as.data.frame(annotation_col_mt)))&#123;</span><br><span class="line">        annotation_col_mt[,i] &lt;- cumsum + annotation_col_mt[,i]</span><br><span class="line">        cumsum &lt;- max(annotation_col_mt[,i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">## get color according to infomation</span></span><br><span class="line">    get_color &lt;- <span class="keyword">function</span>(anno)&#123;<span class="keyword">return</span>(annotation_colors[[anno]][levels(annotation_col[,anno])])&#125;</span><br><span class="line">    palAnn &lt;- <span class="literal">NULL</span></span><br><span class="line">    <span class="keyword">if</span>(is.null(dim(annotation_col_mt)))&#123;</span><br><span class="line">      rowname_tmp &lt;- rownames(annotation_col_mt)</span><br><span class="line">      annotation_col_mt &lt;- as.matrix(annotation_col_mt, nrow=<span class="number">1</span>)</span><br><span class="line">      rownames(annotation_col_mt) &lt;- rowname_tmp</span><br><span class="line">      colnames(annotation_col_mt) &lt;- colname_tmp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(anno <span class="keyword">in</span> colnames(annotation_col_mt))&#123;</span><br><span class="line">      palAnn &lt;- c(palAnn, get_color(anno))</span><br><span class="line">    &#125;</span><br><span class="line">    par(mar=c(<span class="number">0</span>,heatmap_mar[<span class="number">2</span>], <span class="number">0</span>,  heatmap_mar[<span class="number">4</span>]))</span><br><span class="line">    image(x=<span class="number">1</span>:nrow(annotation_col_mt), y=<span class="number">1</span>:ncol(annotation_col_mt), z= annotation_col_mt, col=palAnn, xlab=<span class="string">""</span>,ylab=<span class="string">""</span>,</span><br><span class="line">          axes=<span class="literal">FALSE</span>)</span><br><span class="line">    axis(<span class="number">2</span>,at=<span class="number">1</span>:ncol(annotation_col_mt),labels=colnames(annotation_col_mt),</span><br><span class="line">         col=<span class="string">"white"</span>,las=<span class="number">1</span>, cex.lab=<span class="number">0.1</span>, cex.axis=row_text_cex)</span><br><span class="line">    abline(h=c(<span class="number">1</span>:ncol(annotation_col_mt))+<span class="number">0.5</span>,v=c(<span class="number">1</span>:nrow(annotation_col_mt))+<span class="number">0.5</span>,</span><br><span class="line">           col=<span class="string">"white"</span>,lwd=<span class="number">2</span>,xpd=<span class="literal">F</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(hist_plot)&#123;</span><br><span class="line">    <span class="comment">#hist</span></span><br><span class="line">    par(mar=c(<span class="number">0</span>,<span class="number">2</span>+<span class="number">0.5</span>,<span class="number">3</span>,heatmap_mar[<span class="number">4</span>]-<span class="number">0.9</span>))</span><br><span class="line">    patient_dt &lt;- dt[,.N,by=.(Patient,Type)]</span><br><span class="line">    mt &lt;- data.frame(dcast(patient_dt, Type ~ Patient, value.var = <span class="string">"N"</span>))</span><br><span class="line">    data_matrix &lt;- data.matrix(mt[,-<span class="number">1</span>])</span><br><span class="line">    rownames(data_matrix) &lt;- mt[,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">tryCatch</span>(data_matrix &lt;- data_matrix[setdiff(type, order_omit), patient], error = <span class="keyword">function</span>(e)&#123;print(<span class="string">"type argument or your patient name format(include "</span>-<span class="string">" and so on )"</span>)&#125;)</span><br><span class="line">    data_matrix[is.na(data_matrix)] &lt;- <span class="number">0</span></span><br><span class="line">    omit_idx &lt;- <span class="literal">NULL</span></span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> order_omit)&#123;omit_idx &lt;- c(omit_idx,<span class="number">1</span>+which(type == i))&#125;</span><br><span class="line">    barplot(data_matrix, col=pal[-c(<span class="number">1</span>,omit_idx)],space=<span class="number">0</span>,border = <span class="string">"white"</span>,axes=<span class="literal">T</span>,xlab=<span class="string">""</span>,ann=<span class="literal">F</span>, xaxt=<span class="string">"n"</span>)</span><br><span class="line">    </span><br><span class="line">    par(mar=c( heatmap_mar[<span class="number">1</span>]-<span class="number">2</span> , <span class="number">0.8</span>, heatmap_mar[<span class="number">3</span>]+<span class="number">2.2</span>, <span class="number">3</span>),las=<span class="number">1</span>)</span><br><span class="line">    gene_dt &lt;- dt[,.N,by=.(Gene,Type)]</span><br><span class="line">    mt &lt;- data.frame(dcast(gene_dt, Type ~ Gene, value.var = <span class="string">"N"</span>))</span><br><span class="line">    data_matrix &lt;- data.matrix(mt[,-<span class="number">1</span>])</span><br><span class="line">    rownames(data_matrix) &lt;- mt[,<span class="number">1</span>]</span><br><span class="line">    gene &lt;- gsub(<span class="string">"ATM,"</span>, <span class="string">"ATM."</span>, gene)</span><br><span class="line">    <span class="keyword">tryCatch</span>(data_matrix &lt;- data_matrix[setdiff(type, order_omit), gene], error = <span class="keyword">function</span>(e)&#123;print(<span class="string">"type argument or check your gene name format(please not include "</span>-<span class="string">" and so on)"</span>)&#125;)</span><br><span class="line">    data_matrix[is.na(data_matrix)] &lt;- <span class="number">0</span></span><br><span class="line">    barplot(data_matrix, col=pal[-c(<span class="number">1</span>,omit_idx)],space=<span class="number">0</span>,border = <span class="string">"white"</span>,axes=<span class="literal">T</span>,xlab=<span class="string">""</span>, ann=<span class="literal">F</span>, horiz = <span class="literal">T</span>, yaxt=<span class="string">"n"</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#add legend   </span></span><br><span class="line">  par(mar=legend_mar)</span><br><span class="line">  plot(<span class="number">3</span>, <span class="number">8</span>,  axes=<span class="literal">F</span>, ann=<span class="literal">F</span>, type=<span class="string">"n"</span>)</span><br><span class="line">  <span class="keyword">if</span>(is.null(annotation_col))&#123;</span><br><span class="line">    ploti &lt;- data.frame(i=<span class="number">1</span>:length(type))</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">#add annotation legend</span></span><br><span class="line">    ploti &lt;- data.frame(i=<span class="number">1</span>:(length(type) + max(annotation_col_mt)))</span><br><span class="line">    pal &lt;- c(<span class="string">"NULL"</span>, palAnn, pal[-<span class="number">1</span>])</span><br><span class="line">    anno_label &lt;- <span class="literal">NULL</span></span><br><span class="line">    <span class="keyword">for</span> (anno <span class="keyword">in</span> colnames(annotation_col))&#123;</span><br><span class="line">      anno_label &lt;- c(anno_label, levels(annotation_col[[anno]]))</span><br><span class="line">    &#125;</span><br><span class="line">    type &lt;- c(anno_label,type)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!hist_plot)&#123;</span><br><span class="line">    tmp &lt;- apply(ploti, <span class="number">1</span>, <span class="keyword">function</span>(i)&#123;print(points(<span class="number">2</span>, <span class="number">10</span>+(length(type)-i)*legend_dist, pch=<span class="number">15</span>, cex=<span class="number">2</span>, col=pal[i+<span class="number">1</span>]))&#125;)</span><br><span class="line">    tmp &lt;- apply(ploti, <span class="number">1</span>, <span class="keyword">function</span>(i)&#123;print(text(<span class="number">3</span>, <span class="number">10</span>+(length(type)-i)*legend_dist, labels = type[i],pch=<span class="number">15</span>, cex=<span class="number">1</span>, col=<span class="string">"black"</span>))&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(hist_plot)&#123;</span><br><span class="line">    tmp &lt;- apply(ploti, <span class="number">1</span>, <span class="keyword">function</span>(i)&#123;print(points(<span class="number">2</span>, <span class="number">5</span>+(length(type)-i)*legend_dist, pch=<span class="number">15</span>, cex=<span class="number">0.9</span>, col=pal[i+<span class="number">1</span>]))&#125;)</span><br><span class="line">    tmp &lt;- apply(ploti, <span class="number">1</span>, <span class="keyword">function</span>(i)&#123;print(text(<span class="number">2.8</span>, <span class="number">5</span>+(length(type)-i)*legend_dist, labels = type[i],pch=<span class="number">15</span>, cex=<span class="number">0.9</span>, col=<span class="string">"black"</span>))&#125;)  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>描述</strong>：<br>  绘制一个基因可以同时显示多种突变类型的热图，输入三列的data table数据框， 列名分别是Gene，Type和 Patient，输出热图， 还可以在热图上方和右方添加突变的直方图。<br>用法：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">my_heatmap(vr, </span><br><span class="line">           pal = c(<span class="string">"#F2F2F2"</span>,</span><br><span class="line">                   colorRampPalette(c(<span class="string">"blue"</span>, <span class="string">"white"</span>, <span class="string">"red"</span>))(<span class="number">5</span>)[c(<span class="number">1</span>,<span class="number">2</span>)],</span><br><span class="line">                   <span class="string">"#F2F2F2"</span>,</span><br><span class="line">                   colorRampPalette(c(<span class="string">"blue"</span>, <span class="string">"white"</span>, <span class="string">"red"</span>))(<span class="number">5</span>)[c(<span class="number">4</span>,<span class="number">5</span>)],</span><br><span class="line">                   brewer.pal(n = <span class="number">8</span>, name =<span class="string">"Accent"</span>)[c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)],</span><br><span class="line">                   <span class="string">"#E31A1C"</span>,</span><br><span class="line">                   <span class="string">"#6A3D9A"</span>),</span><br><span class="line">           type = c(<span class="string">"DEL"</span>,<span class="string">"LOSS"</span>,<span class="string">"NEUTRAL"</span>,<span class="string">"GAIN"</span>,<span class="string">"AMPL"</span>,<span class="string">"nonsynonymous SNV"</span>,<span class="string">"synonymous SNV"</span>,<span class="string">"intronic"</span>,<span class="string">"stopgain"</span>,<span class="string">"nonframeshift deletion"</span>,<span class="string">"splicing"</span>, <span class="string">"frameshift deletion"</span>,<span class="string">"UTR3"</span>,<span class="string">"frameshift insertion"</span>,<span class="string">"UTR5"</span>),</span><br><span class="line">           order_gene = <span class="literal">T</span>, </span><br><span class="line">           order_patient = <span class="literal">T</span>, </span><br><span class="line">           hist_plot = <span class="literal">T</span>, </span><br><span class="line">           legend_dist = <span class="number">0.4</span>, </span><br><span class="line">           col_text_cex = <span class="number">1</span>, </span><br><span class="line">           row_text_cex = <span class="number">1</span>, </span><br><span class="line">           sub_gene= <span class="literal">NULL</span>,</span><br><span class="line">           heatmap_mar = c(<span class="number">5</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">2</span>), </span><br><span class="line">           heatmap_oma=c(<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">0.2</span>,<span class="number">0.2</span>),</span><br><span class="line">           heatmap_mex=<span class="number">0.5</span>, </span><br><span class="line">           legend_mar = c(<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>),</span><br><span class="line">           xlab_adj=<span class="number">1</span>,</span><br><span class="line">           order_omit=c(<span class="string">"NEUTRAL"</span>), </span><br><span class="line">           annotation_col=<span class="literal">NULL</span>, </span><br><span class="line">           annotation_colors = <span class="literal">NULL</span>, </span><br><span class="line">           heatmap_height = <span class="number">3</span>,</span><br><span class="line">           heatmap_width = <span class="number">3</span>, </span><br><span class="line">           anno_height=<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong>:<br><strong>vr</strong>： 含有变异数据的数据框，共三列，列名分别是Gene， Type， Patient；<br><strong>pal</strong>： 色板，向量，需要根据数据框中突变类型的数量进行自定义，需要比突变类型多一种颜色作为背景色，背景色放在第一位；<br><strong>type</strong>：色板相对应的突变类型，向量，type必须等于或者多于数据中所出现的所有类型；默认使用拷贝数的四种突变类型加上拷贝数中性再加上annovar中所有突变类型；自定义设置时长度要比色板少1；<br><strong>order_gene</strong>： 默认T， 对基因按照突变的病人数目进行排序；<br><strong>order_patient</strong>：默认T，对病人按照突变的基因数目进行排序；<br><strong>hist_plot</strong>：默认T，在上方和右方加上对应的直方图；<br><strong>legend_dist</strong>：默认0.4，调整图例之间相互的距离，一般需要自行调整；<br><strong>col_text_cex</strong>：调整病人名称的大小，默认1；<br><strong>row_text_cex</strong>：调节基因名称的大小，默认1；<br><strong>xlab_adj</strong>：调整病人名称与热图之间的距离；<br><strong>sub_gene</strong>：只选择部分基因进行画图，需要给基因名的向量，并且基因需要在数据中存在，默认NULL；<br><strong>heatmap_mar</strong>：mar参数，调整热图前后左右的边缘长度，默认c(5,17,1,2)；<br><strong>heatmap_oma</strong>：oma参数，调整热图前后左右的外边缘长度，默认c(0.2,0.2,0.2,0.2)；<br><strong>mex</strong>：调整热图的mex参数，用于描绘绘图边缘的坐标，默认0.5；<br><strong>legend_mar</strong>：legend的mar参数，调整图例的位置，默认c(1,0,4,1)；<br><strong>order_omit</strong>：排序时忽略的变异类型，这些突变类型在直方图中也会被过滤，默认c(“NEUTRAL”)，如果不存在”NEUTRAL”这种突变类型，也可以保持默认参数；<br><strong>heatmap_height</strong>：热图的高度，对于基因数目非常多的情况，在设置pdf长度的基础上，可以设置heatmap覆盖在画布的高度来让格子；<br><strong>heatmap_width</strong>：热图的宽度，对于病人数目非常多的情况，可以设置加长热图的长度。<br><strong>annotation_col</strong>：对病人进行注释的信息，一个data frame，行名为病人，列名为不同的病理信息，数据必须是因子，例子如下(在代码例子中我简略了SmokingInfo为Smoking,OldInfo 为Old)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       SmokingInfo   OldInfo</span><br><span class="line">P1     Smoking   Old</span><br><span class="line">P2  NonSmoking Unold</span><br><span class="line">P3  NonSmoking Unold</span><br><span class="line">P4  NonSmoking   Old</span><br><span class="line">P5     Smoking Unold</span><br><span class="line">P6  NonSmoking Unold</span><br></pre></td></tr></table></figure>

<p><strong>annotation_colors</strong>：对病理信息匹配不同的颜色， 例子如下， 需要跟annotation_col中的列名和因子匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$SmokingInfo</span><br><span class="line">   Smoking NonSmoking </span><br><span class="line"> &quot;#FDB462&quot;  &quot;#80B1D3&quot; </span><br><span class="line"></span><br><span class="line">$OldInfo</span><br><span class="line">      Old     Unold </span><br><span class="line">&quot;#FB8072&quot; &quot;#8DD3C7&quot;</span><br></pre></td></tr></table></figure>

<p><strong>anno_height</strong>：设置注释的高度，默认会自动调节。</p>
<p><strong>细节</strong>：</p>
<ul>
<li>运行前需要加载data.table1.10.4， RColorBrewer；</li>
<li>如果要绘制带有直方图的热图，因为图片尺寸过大，因此要使用pdf函数并要给足够大的宽度和长度；</li>
<li>默认使用的是annovar注释的突变类型；</li>
<li>因为绘制时影响热图和直方图对齐的因素太多，很难通过调节相应的mar，mex，oma参数达到较好的效果，因此推荐快速画出个大概后，再使用inkscape或adobe进行排版对齐</li>
<li>如果热图中突变类型的点过小，可以减小pdf文件的宽度和长度。</li>
</ul>
<p><strong>使用例子</strong>：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#without hist plot</span></span><br><span class="line">pdf(<span class="string">"~/project/PE/fromws02/PE/cnv_plot/heatmap_cnv_mut.pdf"</span>, height=<span class="number">12</span>, width = <span class="number">12</span>)</span><br><span class="line">my_heatmap(vr, heatmap_mar = c(<span class="number">17</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">2</span>),hist_plot = <span class="literal">F</span>, legend_dist=<span class="number">0.1</span>, xlab_adj = <span class="number">1.2</span>, order_patient = <span class="literal">T</span>, order_gene = <span class="literal">T</span>)</span><br><span class="line">dev.off()</span><br><span class="line"></span><br><span class="line"><span class="comment">#with hist plot</span></span><br><span class="line">pdf(<span class="string">"~/project/PE/fromws02/PE/cnv_plot/heatmap_hist_cnv_mut.pdf"</span>, height=<span class="number">12</span>, width = <span class="number">12</span>)</span><br><span class="line">my_heatmap(vr, heatmap_mar = c(<span class="number">17</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>),hist_plot = <span class="literal">T</span>, legend_dist=<span class="number">0.3</span>, xlab_adj = <span class="number">1.2</span>, order_patient = <span class="literal">T</span>, order_gene = <span class="literal">T</span>)</span><br><span class="line">dev.off()</span><br><span class="line"></span><br><span class="line"><span class="comment">#only a few gene</span></span><br><span class="line">pdf(<span class="string">"~/project/PE/fromws02/PE/cnv_plot/Assoc_CN1.pdf"</span>, height=<span class="number">2</span>,width = <span class="number">14</span>)</span><br><span class="line">my_heatmap(vr, heatmap_mar = c(<span class="number">7</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">2</span>), sub_gene = c(<span class="string">"CDKN2A"</span>, <span class="string">"GNAQ"</span>, <span class="string">"NOTCH1"</span>, <span class="string">"RB1"</span>, <span class="string">"SMAD4"</span>, <span class="string">"ABL1"</span>),hist_plot = <span class="literal">F</span>,legend_dist=<span class="number">0.2</span>, xlab_adj = <span class="number">0.9</span>, order_omit = <span class="string">"NEUTRAL"</span>)</span><br><span class="line">dev.off()</span><br><span class="line"></span><br><span class="line"><span class="comment">#with annotation and hist</span></span><br><span class="line">annotation_col &lt;- data.frame(Smoking = factor(sample(c(<span class="string">"Smoking"</span>, <span class="string">"NonSmoking"</span>), length(unique(vr$Patient)), replace = <span class="literal">T</span>)), Old=factor(sample(c(<span class="string">"Old"</span>, <span class="string">"Unold"</span>), <span class="number">53</span>, replace = <span class="literal">T</span>)))</span><br><span class="line">rownames(annotation_col) &lt;- unique(vr$Patient)</span><br><span class="line">annotation_colors &lt;- list(Smoking =c(Smoking = <span class="string">"#FDB462"</span>, NonSmoking = <span class="string">"#80B1D3"</span>), Old=c(Old = <span class="string">"#FB8072"</span>, Unold = <span class="string">"#8DD3C7"</span>))</span><br><span class="line"></span><br><span class="line">pdf(<span class="string">"~/project/PE/fromws02/PE/cnv_plot/heatmap_hist_cnv_mut.pdf"</span>, height=<span class="number">15</span>, width = <span class="number">12</span>)</span><br><span class="line">my_heatmap(vr, heatmap_mar = c(<span class="number">15</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>), legend_mar = c(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>), hist_plot = <span class="literal">T</span>, legend_dist=<span class="number">0.2</span>, xlab_adj = <span class="number">1.2</span>, order_patient = <span class="literal">T</span>, order_gene = <span class="literal">T</span>, annotation_col=annotation_col, annotation_colors=annotation_colors)</span><br><span class="line">dev.off()</span><br><span class="line"></span><br><span class="line"><span class="comment">#with annotation and without hist</span></span><br><span class="line">pdf(<span class="string">"~/project/PE/fromws02/PE/cnv_plot/heatmap_hist_cnv_mut.pdf"</span>, height=<span class="number">12</span>, width = <span class="number">12</span>)</span><br><span class="line">my_heatmap(vr, heatmap_mar = c(<span class="number">17</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>),hist_plot = <span class="literal">F</span>, legend_dist=<span class="number">0.1</span>, xlab_adj = <span class="number">1.2</span>, order_patient = <span class="literal">T</span>, order_gene = <span class="literal">T</span>, annotation_col=annotation_col, annotation_colors=annotation_colors)</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DNAseq</category>
      </categories>
      <tags>
        <tag>heatmap</tag>
        <tag>maftools</tag>
        <tag>mutation</tag>
        <tag>complexheatmap</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo个人博客搭建</title>
    <url>/2019/11/18/myblog_hexo/</url>
    <content><![CDATA[<h3 id="搭建个人博客一文就够"><a href="#搭建个人博客一文就够" class="headerlink" title="搭建个人博客一文就够"></a>搭建个人博客一文就够</h3><p><strong>为什么我要搭建个人博客。第一想把我自己的学习经历记录下来分析给大家，第二方便我系统的整理备份我电脑中的各种文件。同时方便随时查阅和搜索。</strong></p>
<p>第一步：购买腾讯云服务器，购买域名bio-info-bridge.cn</p>
<p>第二步：开始搭建博客，重要参考前辈的博客，<a href="https://www.bioinfo-scrounger.com/archives/migrate_wordpress_hexo/" target="_blank" rel="noopener">搭建个人博客参考</a></p>
<a id="more"></a>

<p>nodejs安装：</p>
<p>参考：<a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">https://github.com/nodesource/distributions</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Using Ubuntu</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Node.js v11.x:</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>

<p>安装hexo：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs-legacy</span><br><span class="line">sudo npm install hexo-cli hexo-server hexo-deployer-git -g</span><br></pre></td></tr></table></figure>

<p>建站，初始化Hexo：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br><span class="line">cd myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/myblog_hexo/1573963188042.png" alt="1573963188042"></p>
<p>启动命令（<code>-p</code> 端口）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server -p 4000 --debug</span><br></pre></td></tr></table></figure>

<p>理论上正常应该通过公网IP+端口即可访问Hexo主页，</p>
<p><img src="/2019/11/18/myblog_hexo/1573963547812.png" alt="1573963547812"></p>
<p><img src="/2019/11/18/myblog_hexo/1573963579845.png" alt="1573963579845"></p>
<blockquote>
<p>已经搭建成功，开心</p>
</blockquote>
<blockquote>
<p>下面的这些关于防火墙的内容我没用上，留着备用吧</p>
</blockquote>
<p>但由于的ECS服务器的原因，需要先在ECS系统管理中开始出/入端口（比如4000），并且在ubuntu系统中开启对应的防火墙端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-port=4000/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>









<h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p>安装nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>



<h4 id="配置-Nginx-网站目录"><a href="#配置-Nginx-网站目录" class="headerlink" title="配置 Nginx 网站目录"></a>配置 Nginx 网站目录</h4><p>和本地一样，网站也要有一个放东西的文件夹，由于nginx默认的目录是’var/www/html’，所以我建议你使用’var/www/hexo’，当然，你用别的也可以，就请自己记住目录，下文也替换成你自定义的目录便是</p>
<p>网站存放文件的目录，用于Nginx托管</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;var&#x2F;www&#x2F;hexo</span><br></pre></td></tr></table></figure>

<p>修改目录的权限，让所有用户都能访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chown -R $USER:$USER &#x2F;var&#x2F;www&#x2F;hexo</span><br><span class="line">sudo chmod -R 755 &#x2F;var&#x2F;www&#x2F;hexo</span><br></pre></td></tr></table></figure>



<p>c修改 Nginx设置，打开<code>/etc/nginx/sites-available/default</code>文件，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>

<p>修改：将root设置为上述目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root /var/www/hexo</span><br></pre></td></tr></table></figure>



<h4 id="配置图片-文件路径"><a href="#配置图片-文件路径" class="headerlink" title="配置图片/文件路径"></a>配置图片/文件路径</h4><p>以上为常规操作，但如果还想设置一个专门放文件/图片（的目录（也就是说在服务上建个“图床”，方便在文章中链接；文件也类似，方便下载），还需要接着配置nginx</p>
<blockquote>
<p>比如我由于是从wordpress服务器上转到阿里云的ECS服务器，之前文章的图片链接都是跟着域名走的，因此我需要在现在服务器上专门再建个相同路径的文件夹来存在文件和图片</p>
</blockquote>
<p>具体教程在网上搜：nginx访问静态文件，或者参考：<a href="https://cloud.tencent.com/developer/article/1340455" target="_blank" rel="noopener">Nginx 入门教程</a></p>
<p>大致步骤如下：</p>
<p>创建文件夹目录，分别是存放文件和图片的路径，可供网站访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;var&#x2F;www&#x2F;hexo&#x2F;data</span><br><span class="line">mkdir -p &#x2F;var&#x2F;www&#x2F;hexo&#x2F;data&#x2F;photo</span><br></pre></td></tr></table></figure>

<p>修改Nginx配置文件，加上下面一段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;data&#x2F;photo&#x2F; &#123;</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;hexo&#x2F;;</span><br><span class="line">        autoindex on;</span><br><span class="line">&#125;</span><br><span class="line">location &#x2F;data&#x2F; &#123;</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;hexo&#x2F;;</span><br><span class="line">        autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/myblog_hexo/1573970957849.png" alt="1573970957849"></p>
<h4 id="创建私有Git仓库"><a href="#创建私有Git仓库" class="headerlink" title="创建私有Git仓库"></a>创建私有Git仓库</h4><p>创建Git仓库，搭配后续的Git钩子使用；创建目录并修改权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /var/repo/</span><br><span class="line">sudo chown -R $USER:$USER /var/repo/</span><br><span class="line">sudo chmod -R 755 /var/repo/</span><br><span class="line">cd /var/repo/</span><br></pre></td></tr></table></figure>

<p>并用Git命令初始化仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo git init --bare hexo_static.git</span><br></pre></td></tr></table></figure>









<h3 id="5-3-配置git，和ssh秘钥-这一部分没有使用"><a href="#5-3-配置git，和ssh秘钥-这一部分没有使用" class="headerlink" title="5.3. 配置git，和ssh秘钥(这一部分没有使用)"></a>5.3. 配置git，和ssh秘钥(这一部分没有使用)</h3><p>随后我们配置git的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &#39;chenyuqiao1116@gmail.com&#39;</span><br><span class="line">git config --global user.name &#39;chenyuqiao1&#39;</span><br></pre></td></tr></table></figure>

<p>然后本地生成ssh秘钥，并需要将公钥传到VPS，使VPS中的git能够识别本地机器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#39;chenyuqiao1116@gmail.com&#39;</span><br></pre></td></tr></table></figure>



<p>生成的秘钥在<code>~/.ssh</code></p>
<p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到 <code>.ssh\id_rsa.pub</code> 文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>
<p><img src="/2019/11/18/myblog_hexo/1574038739081.png" alt="1574038739081"></p>
<p>测试是否成功</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span><span class="keyword">@github</span>.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/myblog_hexo/1574039263666.png" alt="1574039263666"></p>
<h4 id="配置Git钩子"><a href="#配置Git钩子" class="headerlink" title="配置Git钩子"></a>配置Git钩子</h4><blockquote>
<p>什么是Git钩子：Git能在特定的重要动作发生时触发自定义脚本，即我们可以通过Github远程仓库自动更新文章到我们服务器的目录下</p>
</blockquote>
<p>创建钩子文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;var&#x2F;repo&#x2F;hexo_static.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>

<p>并在文件中添加命令（主要用checkout切换分支，所以如果仓库目录跟上面写的不一样，记得同样修改下述代码中的路径）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">git --work-tree&#x3D;&#x2F;var&#x2F;www&#x2F;hexo --git-dir&#x3D;&#x2F;var&#x2F;repo&#x2F;hexo_static.git checkout -f</span><br></pre></td></tr></table></figure>

<p>将上述钩子文件赋予执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /var/repo/hexo_static.git/hooks/post-receive</span><br></pre></td></tr></table></figure>









<h4 id="配置本地部署"><a href="#配置本地部署" class="headerlink" title="配置本地部署"></a>配置本地部署</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/myblog/</span><br></pre></td></tr></table></figure>



<p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p>
<p><img src="/2019/11/18/myblog_hexo/1573983380881.png" alt="1573983380881"></p>
<p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p>
<p><img src="/2019/11/18/myblog_hexo/1573983470517.png" alt="1573983470517"></p>
<blockquote>
<p>github 上查看确认</p>
</blockquote>
<p><img src="/2019/11/18/myblog_hexo/1573983630859.png" alt="1573983630859"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p>
<p>接下来你就可以正式开始写文章了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new newpapername</span><br></pre></td></tr></table></figure>

<p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>








<p>即修改hexo配置文件<code>_config.yml</code>，修改Deployment；其中<code>root</code>是用户，然后<code>IP</code>，最后是Git仓库路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: ubuntu@49.234.226.202:&#x2F;var&#x2F;repo&#x2F;hexo_static</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>



<p>部署之前安装插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>



<p>最后其实单独设置个Git用户并设置SSH登陆，并给与其权限比较方便；不然就会每次发布时都要输入root密码咯</p>
<h4 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h4><p>上述配置完后，先把md文件放置到<code>source/_posts</code>目录下，然后生成静态文件并部署</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>









<p>写在最后面，开启博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<blockquote>
<p>主要用来预览博客</p>
</blockquote>
<p>更改主题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Yilia</span><br><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br><span class="line"></span><br><span class="line">next</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改了主题后</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>





<p>域名解析</p>
<p><img src="/2019/11/18/myblog_hexo/1573981869976.png" alt="1573981869976"></p>
<p>10分钟后解析完成，就可以登录了</p>
<p><img src="/2019/11/18/myblog_hexo/1573981843703.png" alt="1573981843703"></p>
<p><img src="/2019/11/18/myblog_hexo/1573987316232.png" alt="1573987316232"></p>
<blockquote>
<p>完成</p>
</blockquote>
<p>Summary</p>
<p>Hexo主题选择：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p>
<p>Hexo配置官网文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p>
<p>我选择的主题是Yelee，有很详细的文档：<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">http://moxfive.coding.me/yelee/</a></p>
<p>建议开启：<a href="http://moxfive.coding.me/yelee/5.Vendor/google-analytics.html" target="_blank" rel="noopener">谷歌分析服务</a>，具体方法可看各个主题是否已配置好相关脚本，或者直接按照<a href="https://support.google.com/analytics/answer/1008080" target="_blank" rel="noopener">谷歌分析的文档</a>来操作</p>
<p>还可以用<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子统计</a>访问量，并在页面中展示</p>
<p><a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">Hexo Admin</a>插件，可以生成一个类似于后台的管理页面，方便文章的修改等等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d -p 4000</span><br><span class="line"># 浏览器打开IP:4000&#x2F;admin&#x2F;</span><br></pre></td></tr></table></figure>

<p>如果为了后续写作方便，可以在<code>scaffolds/post.md</code>修改默认生成的Front-matter，比如参考：<a href="https://www.jianshu.com/p/6584a04ccadd" target="_blank" rel="noopener">自建博客系列（八）再次具体实践下怎么撰文和发表</a>，我简单的设置了几个（`来分割摘要）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">id:</span><br><span class="line">comments: false</span><br><span class="line">categories:</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>







<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo文档</a><br><a href="https://www.cnblogs.com/zzp0320/p/7866624.html" target="_blank" rel="noopener">优化hexo访问速度-将hexo部署到云主机VPS</a><br><a href="https://blog.csdn.net/sinat_28394909/article/details/84956292" target="_blank" rel="noopener">阿里云搭建Hexo博客</a><br><a href="https://eliyar.biz/how_to_build_hexo_blog/" target="_blank" rel="noopener">从 0 开始搭建 hexo 博客</a><br><a href="https://www.jianshu.com/p/c4f145fdd637" target="_blank" rel="noopener">博客搭建可行性方案( jekyll , hexo , Wordpress )</a><br><a href="https://cloud.tencent.com/developer/article/1004587" target="_blank" rel="noopener">在 Ubuntu 14.04 服务器上部署 Hexo 博客</a><br><a href="https://segmentfault.com/a/1190000010680022" target="_blank" rel="noopener">Hexo 个人博客部署到 CentOS 个人服务器</a></p>
<p>这里有一份文章配置信息，可以根据情况修改后作为模板复用，或直接在保存文章的路径新建.md文件中使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:   <span class="comment">#文章名</span></span><br><span class="line">date:   <span class="comment">#发表日期</span></span><br><span class="line">updated:   <span class="comment">#更新日期</span></span><br><span class="line">categories:   <span class="comment">#文章分类</span></span><br><span class="line">tags:   <span class="comment">#文章标签，多标签时使用英文逗号隔开</span></span><br><span class="line">photos:  <span class="comment">#如果使用Fancybox（文章头部展示图片），如此设置</span></span><br><span class="line">- URL1</span><br><span class="line">- URL2</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<blockquote>
<p>后续配置 参考</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/b9f96b992b68" target="_blank" rel="noopener">https://www.jianshu.com/p/b9f96b992b68</a></p>
]]></content>
      <categories>
        <category>myblog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python_numpy_pandas</title>
    <url>/2019/11/24/python_numpy_pandas/</url>
    <content><![CDATA[<h1 id="python-numpy-amp-pandas学习"><a href="#python-numpy-amp-pandas学习" class="headerlink" title="python_numpy &amp;pandas学习"></a>python_numpy &amp;pandas学习</h1><p><strong>这部分内容和R语言的逻辑非常相似。所有，还是很方便理解，主要是因为我最近看到了complexheatmap画突变的热图，需要这个模块，我就简单的学习一下。</strong></p>
<p>最为重要的科学计算模块，使用python进行数据分析必备，这两个主要用在machine leaning ，神经网络，比python自带的字典快，用C语言写的，使用了的矩阵计算。</p>
<p><a href="https://morvanzhou.github.io/tutorials/" target="_blank" rel="noopener">学习参考视频</a></p>
<a id="more"></a>



<h3 id="numpy的学习"><a href="#numpy的学习" class="headerlink" title="numpy的学习"></a>numpy的学习</h3><h4 id="一：安装numpy-and-pandas"><a href="#一：安装numpy-and-pandas" class="headerlink" title="一：安装numpy and pandas"></a>一：安装numpy and pandas</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pip3 install numpy</span><br><span class="line">sudo pip3 install pandas</span><br></pre></td></tr></table></figure>







<h4 id="二：-简单的矩阵"><a href="#二：-简单的矩阵" class="headerlink" title="二： 简单的矩阵"></a>二： 简单的矩阵</h4><blockquote>
<p>关于简单的矩阵学习</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 简单矩阵例子</span></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                 [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">print(array)</span><br><span class="line">print(<span class="string">'number od dim:'</span>,array.ndim)</span><br><span class="line">print(<span class="string">'shape:'</span>,array.shape)</span><br><span class="line">print(<span class="string">'size:'</span>,array.size)</span><br></pre></td></tr></table></figure>



<h4 id="三：继续创建array"><a href="#三：继续创建array" class="headerlink" title="三：继续创建array"></a>三：继续创建array</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 简单矩阵例子</span></span><br><span class="line">a= np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=np.int) <span class="comment"># arrayde type</span></span><br><span class="line">a= np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=np.float)</span><br><span class="line">print(a.dtype)</span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                 [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">b=np.zeros((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 全部为0的3行4列的矩阵</span></span><br><span class="line">c=np.ones((<span class="number">3</span>,<span class="number">4</span>),dtype=np.int16) <span class="comment"># 全部为1的3行4列的矩阵</span></span><br><span class="line">d=np.empty((<span class="number">4</span>,<span class="number">3</span>)) <span class="comment"># 为空的矩阵</span></span><br><span class="line">a=np.arange(<span class="number">10</span>,<span class="number">20</span>,<span class="number">2</span>) <span class="comment"># 10,12,14,16,18</span></span><br><span class="line">e=np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">a=np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">5</span>) <span class="comment">#生成线段1-10 分为5段</span></span><br><span class="line">a=np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>).reshape((<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<h4 id="四：numpy基础运算形式"><a href="#四：numpy基础运算形式" class="headerlink" title="四：numpy基础运算形式"></a>四：numpy基础运算形式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a=np.array([10,20,30,40])   # array([10, 20, 30, 40])</span><br><span class="line">b=np.arange(4)              # array([0, 1, 2, 3])</span><br></pre></td></tr></table></figure>



<p>上述代码中的 <code>a</code> 和 <code>b</code> 是两个属性为 array 也就是矩阵的变量，而且二者都是1行4列的矩阵， 其中b矩阵中的元素分别是从0到3。 如果我们想要求两个矩阵之间的减法，你可以尝试着输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;a-b  # array([10, 19, 28, 37])</span><br></pre></td></tr></table></figure>

<p>通过执行上述脚本，将会得到对应元素相减的结果，即<code>[10,19,28,37]</code>。 同理，矩阵对应元素的相加和相乘也可以用类似的方式表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=a+b   <span class="comment"># array([10, 21, 32, 43])</span></span><br><span class="line">c=a*b   <span class="comment"># array([  0,  20,  60, 120])</span></span><br></pre></td></tr></table></figure>

<p>有所不同的是，在Numpy中，想要求出矩阵中各个元素的乘方需要依赖双星符号 <code>**</code>，以二次方举例，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=b**<span class="number">2</span>  <span class="comment"># array([0, 1, 4, 9])</span></span><br></pre></td></tr></table></figure>

<p>另外，Numpy中具有很多的数学函数工具，比如三角函数等，当我们需要对矩阵中每一项元素进行函数运算时，可以很简便的调用它们（以<code>sin</code>函数为例）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=<span class="number">10</span>*np.sin(a)  </span><br><span class="line"><span class="comment"># array([-5.44021111,  9.12945251, -9.88031624,  7.4511316 ])</span></span><br></pre></td></tr></table></figure>

<p>除了函数应用外，在脚本中对<code>print</code>函数进行一些修改可以进行逻辑判断：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(b&lt;<span class="number">3</span>)  </span><br><span class="line"><span class="comment"># array([ True,  True,  True, False], dtype=bool)</span></span><br></pre></td></tr></table></figure>

<p>此时由于进行逻辑判断，返回的是一个bool类型的矩阵，即对满足要求的返回<code>True</code>，不满足的返回<code>False</code>。上述程序执行后得到的结果是<code>[True True True False]</code>。 需要注意的是，如果想要执行是否相等的判断， 依然需要输入 <code>==</code> 而不是 <code>=</code> 来完成相应的逻辑判断。</p>
<p>上述运算均是建立在一维矩阵，即只有一行的矩阵上面的计算，如果我们想要对多行多维度的矩阵进行操作，需要对开始的脚本进行一些修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">b=np.arange(<span class="number">4</span>).reshape((<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># array([[1, 1],</span></span><br><span class="line"><span class="comment">#       [0, 1]])</span></span><br><span class="line"></span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># array([[0, 1],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br></pre></td></tr></table></figure>



<p>此时构造出来的矩阵<code>a</code>和<code>b</code>便是2行2列的，其中 <code>reshape</code> 操作是对矩阵的形状进行重构， 其重构的形状便是括号中给出的数字。 稍显不同的是，Numpy中的矩阵乘法分为两种， 其一是前文中的对应元素相乘，其二是标准的矩阵乘法运算，即对应行乘对应列得到相应元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c_dot &#x3D; np.dot(a,b)</span><br><span class="line"># array([[2, 4],</span><br><span class="line">#       [2, 3]])</span><br></pre></td></tr></table></figure>

<p>除此之外还有另外的一种关于<code>dot</code>的表示方法，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c_dot_2 &#x3D; a.dot(b)</span><br><span class="line"># array([[2, 4],</span><br><span class="line">#       [2, 3]])</span><br></pre></td></tr></table></figure>

<p>下面我们将重新定义一个脚本, 来看看关于 <code>sum()</code>, <code>min()</code>, <code>max()</code>的使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a&#x3D;np.random.random((2,4))</span><br><span class="line">print(a)</span><br><span class="line"># array([[ 0.94692159,  0.20821798,  0.35339414,  0.2805278 ],</span><br><span class="line">#       [ 0.04836775,  0.04023552,  0.44091941,  0.21665268]])</span><br></pre></td></tr></table></figure>

<p>因为是随机生成数字, 所以你的结果可能会不一样. 在第二行中对<code>a</code>的操作是令<code>a</code>中生成一个2行4列的矩阵，且每一元素均是来自从0到1的随机数。 在这个随机生成的矩阵中，我们可以对元素进行求和以及寻找极值的操作，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.sum(a)   # 4.4043622002745959</span><br><span class="line">np.min(a)   # 0.23651223533671784</span><br><span class="line">np.max(a)   # 0.90438450240606416</span><br></pre></td></tr></table></figure>

<p>对应的便是对矩阵中所有元素进行求和，寻找最小值，寻找最大值的操作。 可以通过<code>print()</code>函数对相应值进行打印检验。</p>
<p>如果你需要对行或者列进行查找运算，就需要在上述代码中为 axis 进行赋值。 当axis的值为0的时候，将会以列作为查找单元， 当axis的值为1的时候，将会以行作为查找单元。</p>
<p>为了更加清晰，在刚才的例子中我们继续进行查找：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"a ="</span>,a)</span><br><span class="line"><span class="comment"># a = [[ 0.23651224  0.41900661  0.84869417  0.46456022]</span></span><br><span class="line"><span class="comment"># [ 0.60771087  0.9043845   0.36603285  0.55746074]]</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"sum ="</span>,np.sum(a,axis=<span class="number">1</span>)) <span class="comment"># 1 代表行</span></span><br><span class="line"><span class="comment"># sum = [ 1.96877324  2.43558896]</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"min ="</span>,np.min(a,axis=<span class="number">0</span>)) <span class="comment"># 0 代表列</span></span><br><span class="line"><span class="comment"># min = [ 0.23651224  0.41900661  0.36603285  0.46456022]</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"max ="</span>,np.max(a,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># max = [ 0.84869417  0.9043845 ]</span></span><br></pre></td></tr></table></figure>



<h4 id="五：Numpy-基础运算2"><a href="#五：Numpy-基础运算2" class="headerlink" title="五：Numpy 基础运算2"></a>五：Numpy 基础运算2</h4><p>学习资料:</p>
<ul>
<li><a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="noopener">Numpy官方英文教材</a></li>
</ul>
<p>通过上一节的学习，我们可以了解到一部分矩阵中元素的计算和查找操作。然而在日常使用中，对应元素的索引也是非常重要的。依然，让我们先从一个脚本开始 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">A &#x3D; np.arange(2,14).reshape((3,4)) </span><br><span class="line"></span><br><span class="line"># array([[ 2, 3, 4, 5]</span><br><span class="line">#        [ 6, 7, 8, 9]</span><br><span class="line">#        [10,11,12,13]])</span><br><span class="line">         </span><br><span class="line">print(np.argmin(A))    # 0 元素索引</span><br><span class="line">print(np.argmax(A))    # 11 元素索引</span><br></pre></td></tr></table></figure>

<h4 id="六：numpy-的几种基本运算"><a href="#六：numpy-的几种基本运算" class="headerlink" title="六：numpy 的几种基本运算"></a>六：numpy 的几种基本运算</h4><p>其中的 <code>argmin()</code> 和 <code>argmax()</code> 两个函数分别对应着求矩阵中最小元素和最大元素的索引。相应的，在矩阵的12个元素中，最小值即2，对应索引0，最大值为13，对应索引为11。</p>
<p>如果需要计算统计中的均值，可以利用下面的方式，将整个矩阵的均值求出来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(np.mean(A))        # 7.5</span><br><span class="line">print(np.average(A))     # 7.5</span><br></pre></td></tr></table></figure>

<p>仿照着前一节中<code>dot()</code> 的使用法则，<code>mean()</code>函数还有另外一种写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(A.mean())          # 7.5</span><br></pre></td></tr></table></figure>

<p>同样的，我们可以写出求解中位数的函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(A.median())       # 7.5</span><br></pre></td></tr></table></figure>

<p>另外，和matlab中的<code>cumsum()</code>累加函数类似，Numpy中也具有<code>cumsum()</code>函数，其用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(np.cumsum(A)) </span><br><span class="line"></span><br><span class="line"># [2 5 9 14 20 27 35 44 54 65 77 90]</span><br></pre></td></tr></table></figure>

<p>在<code>cumsum()</code>函数中：生成的每一项矩阵元素均是从原矩阵首项累加到对应项的元素之和。比如元素9，在<code>cumsum()</code>生成的矩阵中序号为3，即原矩阵中2，3，4三个元素的和。</p>
<p>相应的有累差运算函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(np.diff(A))    </span><br><span class="line"></span><br><span class="line"># [[1 1 1]</span><br><span class="line">#  [1 1 1]</span><br><span class="line">#  [1 1 1]]</span><br></pre></td></tr></table></figure>

<p>该函数计算的便是每一行中后一项与前一项之差。故一个3行4列矩阵通过函数计算得到的矩阵便是3行3列的矩阵。</p>
<p>下面我们介绍一下<code>nonzero()</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(np.nonzero(A))    </span><br><span class="line"></span><br><span class="line"># (array([0,0,0,0,1,1,1,1,2,2,2,2]),array([0,1,2,3,0,1,2,3,0,1,2,3]))</span><br></pre></td></tr></table></figure>



<p>这个函数将所有非零元素的行与列坐标分割开，重构成两个分别关于行和列的矩阵。</p>
<p>同样的，我们可以对所有元素进行仿照列表一样的排序操作，但这里的排序函数仍然仅针对每一行进行从小到大排序操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">A &#x3D; np.arange(14,2, -1).reshape((3,4)) </span><br><span class="line"></span><br><span class="line"># array([[14, 13, 12, 11],</span><br><span class="line">#       [10,  9,  8,  7],</span><br><span class="line">#       [ 6,  5,  4,  3]])</span><br><span class="line"></span><br><span class="line">print(np.sort(A))    </span><br><span class="line"></span><br><span class="line"># array([[11,12,13,14]</span><br><span class="line">#        [ 7, 8, 9,10]</span><br><span class="line">#        [ 3, 4, 5, 6]])</span><br></pre></td></tr></table></figure>

<p>矩阵的转置有两种表示方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(np.transpose(A))    </span><br><span class="line">print(A.T)</span><br><span class="line"></span><br><span class="line"># array([[14,10, 6]</span><br><span class="line">#        [13, 9, 5]</span><br><span class="line">#        [12, 8, 4]</span><br><span class="line">#        [11, 7, 3]])</span><br><span class="line"># array([[14,10, 6]</span><br><span class="line">#        [13, 9, 5]</span><br><span class="line">#        [12, 8, 4]</span><br><span class="line">#        [11, 7, 3]])</span><br></pre></td></tr></table></figure>

<p>特别的，在Numpy中具有<code>clip()</code>函数，例子如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(A)</span><br><span class="line"><span class="comment"># array([[14,13,12,11]</span></span><br><span class="line"><span class="comment">#        [10, 9, 8, 7]</span></span><br><span class="line"><span class="comment">#        [ 6, 5, 4, 3]])</span></span><br><span class="line"></span><br><span class="line">print(np.clip(A,<span class="number">5</span>,<span class="number">9</span>))    </span><br><span class="line"><span class="comment"># array([[ 9, 9, 9, 9]</span></span><br><span class="line"><span class="comment">#        [ 9, 9, 8, 7]</span></span><br><span class="line"><span class="comment">#        [ 6, 5, 5, 5]])</span></span><br><span class="line"><span class="comment"># 直接剪裁，大于9都等于9，小于5都等于5</span></span><br></pre></td></tr></table></figure>

<p>这个函数的格式是<code>clip(Array,Array_min,Array_max)</code>，顾名思义，<code>Array</code>指的是将要被执行用的矩阵，而后面的最小值最大值则用于让函数判断矩阵中元素是否有比最小值小的或者比最大值大的元素，并将这些指定的元素转换为最小值或者最大值。</p>
<p>实际上每一个Numpy中大多数函数均具有很多变量可以操作，你可以指定行、列甚至某一范围中的元素。更多具体的使用细节请记得查阅<a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="noopener">Numpy官方英文教材</a>。</p>
<h4 id="七：Numpy-索引"><a href="#七：Numpy-索引" class="headerlink" title="七：Numpy 索引"></a>七：Numpy 索引</h4><p><strong>一维索引</strong></p>
<p>我们都知道，在元素列表或者数组中，我们可以用如同<code>a[2]</code>一样的表示方法，同样的，在Numpy中也有相对应的表示方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">A &#x3D; np.arange(3,15)</span><br><span class="line"></span><br><span class="line"># array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])</span><br><span class="line">         </span><br><span class="line">print(A[3])    # 6</span><br></pre></td></tr></table></figure>

<p>让我们将矩阵转换为二维的，此时进行同样的操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &#x3D; np.arange(3,15).reshape((3,4))</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">array([[ 3,  4,  5,  6]</span><br><span class="line">       [ 7,  8,  9, 10]</span><br><span class="line">       [11, 12, 13, 14]])</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">         </span><br><span class="line">print(A[2])         </span><br><span class="line"># [11 12 13 14]</span><br></pre></td></tr></table></figure>

<p>实际上这时的<code>A[2]</code>对应的就是矩阵<code>A</code>中第三行(从0开始算第一行)的所有元素。</p>
<p><strong>二维索引</strong> </p>
<p>如果你想要表示具体的单个元素，可以仿照上述的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(A[1][1])      # 8</span><br></pre></td></tr></table></figure>

<p>此时对应的元素即<code>A[1][1]</code>，在<code>A</code>中即横纵坐标都为1，第二行第二列的元素，即8（因为计数从0开始）。同样的还有其他的表示方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(A[1, 1])      # 8</span><br></pre></td></tr></table></figure>

<p>在Python的 list 中，我们可以利用<code>:</code>对一定范围内的元素进行切片操作，在Numpy中我们依然可以给出相应的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(A[1, 1:3])    # [8 9]</span><br></pre></td></tr></table></figure>

<p>这一表示形式即针对第二行中第2到第4列元素进行切片输出（不包含第4列）。 此时我们适当的利用for函数进行打印：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for row in A:</span><br><span class="line">    print(row)</span><br><span class="line">&quot;&quot;&quot;    </span><br><span class="line">[ 3,  4,  5, 6]</span><br><span class="line">[ 7,  8,  9, 10]</span><br><span class="line">[11, 12, 13, 14]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>此时它会逐行进行打印操作。如果想进行逐列打印，就需要稍稍变化一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对列进行迭代</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> A.T:</span><br><span class="line">    print(row)</span><br><span class="line"><span class="string">"""  </span></span><br><span class="line"><span class="string">[ 3,  7,  11]</span></span><br><span class="line"><span class="string">[ 4,  8,  12]</span></span><br><span class="line"><span class="string">[ 5,  9,  13]</span></span><br><span class="line"><span class="string">[ 6, 10,  14]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p>上述表示方法即对A进行转置，再将得到的矩阵逐行输出即可得到原矩阵的逐列输出。</p>
<p>最后依然说一些关于迭代输出的问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">A &#x3D; np.arange(3,15).reshape((3,4))</span><br><span class="line">         </span><br><span class="line">print(A.flatten())   </span><br><span class="line"># array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])</span><br><span class="line"></span><br><span class="line">for item in A.flat:</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line"># 3</span><br><span class="line"># 4</span><br><span class="line">……</span><br><span class="line"># 14</span><br></pre></td></tr></table></figure>

<p>这一脚本中的<code>flatten</code>是一个展开性质的函数，将多维的矩阵进行展开成1行的数列。而<code>flat</code>是一个迭代器，本身是一个<code>object</code>属性。</p>
<h4 id="八：Numpy-array-合并"><a href="#八：Numpy-array-合并" class="headerlink" title="八：Numpy array 合并"></a>八：Numpy array 合并</h4><h5 id="np-vstack"><a href="#np-vstack" class="headerlink" title="np.vstack()"></a>np.vstack()</h5><p>对于一个<code>array</code>的合并，我们可以想到按行、按列等多种方式进行合并。首先先看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">A &#x3D; np.array([1,1,1])</span><br><span class="line">B &#x3D; np.array([2,2,2])</span><br><span class="line">         </span><br><span class="line">print(np.vstack((A,B)))    # vertical stack</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[[1,1,1]</span><br><span class="line"> [2,2,2]]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p><code>vertical stack</code>本身属于一种上下合并，即对括号中的两个整体进行对应操作。此时我们对组合而成的矩阵进行属性探究：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C &#x3D; np.vstack((A,B))      </span><br><span class="line">print(A.shape,C.shape)</span><br><span class="line"></span><br><span class="line"># (3,) (2,3)</span><br></pre></td></tr></table></figure>

<h5 id="np-hstack"><a href="#np-hstack" class="headerlink" title="np.hstack()"></a>np.hstack()</h5><p>利用<code>shape</code>函数可以让我们很容易地知道<code>A</code>和<code>C</code>的属性，从打印出的结果来看，<code>A</code>仅仅是一个拥有3项元素的数组（数列），而合并后得到的<code>C</code>是一个2行3列的矩阵。</p>
<p>介绍完了上下合并，我们来说说左右合并：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D &#x3D; np.hstack((A,B))       # horizontal stack</span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"># [1,1,1,2,2,2]</span><br><span class="line"></span><br><span class="line">print(A.shape,D.shape)</span><br><span class="line"># (3,) (6,)</span><br></pre></td></tr></table></figure>

<p>通过打印出的结果可以看出：<code>D</code>本身来源于<code>A</code>，<code>B</code>两个数列的左右合并，而且新生成的<code>D</code>本身也是一个含有6项元素的序列。</p>
<h5 id="np-newaxis"><a href="#np-newaxis" class="headerlink" title="np.newaxis()"></a>np.newaxis()</h5><p>说完了<code>array</code>的合并，我们稍稍提及一下前一节中转置操作，<strong>如果面对如同前文所述的<code>A</code>序列， 转置操作便很有可能无法对其进行转置（因为<code>A</code>并不是矩阵的属性）**</strong>也就是无法进行A.T**，此时就需要我们借助其他的函数操作进行转置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(A[np.newaxis,:])</span><br><span class="line"><span class="comment"># [[1 1 1]]</span></span><br><span class="line"></span><br><span class="line">print(A[np.newaxis,:].shape)</span><br><span class="line"><span class="comment"># (1,3)</span></span><br><span class="line"></span><br><span class="line">print(A[:,np.newaxis])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1]</span></span><br><span class="line"><span class="string">[1]</span></span><br><span class="line"><span class="string">[1]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(A[:,np.newaxis].shape) <span class="comment"># : 表示所有，从0到无穷的意思，np.newaxis表示增加一个维度</span></span><br><span class="line"><span class="comment"># (3,1)</span></span><br></pre></td></tr></table></figure>

<p>此时我们便将具有3个元素的<code>array</code>转换为了1行3列以及3行1列的矩阵了。</p>
<p>结合着上面的知识，我们把它综合起来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">A &#x3D; np.array([1,1,1])[:,np.newaxis]</span><br><span class="line">B &#x3D; np.array([2,2,2])[:,np.newaxis]</span><br><span class="line">         </span><br><span class="line">C &#x3D; np.vstack((A,B))   # vertical stack</span><br><span class="line">D &#x3D; np.hstack((A,B))   # horizontal stack</span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[[1 2]</span><br><span class="line">[1 2]</span><br><span class="line">[1 2]]</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">print(A.shape,D.shape)</span><br><span class="line"># (3,1) (3,2)</span><br></pre></td></tr></table></figure>



<h5 id="np-concatenate"><a href="#np-concatenate" class="headerlink" title="np.concatenate()"></a>np.concatenate()</h5><p>当你的合并操作需要针对多个矩阵或序列时，借助<code>concatenate</code>函数可能会让你使用起来比前述的函数更加方便：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C = np.concatenate((A,B,B,A),axis=<span class="number">0</span>) <span class="comment"># concatenate: 连结</span></span><br><span class="line"></span><br><span class="line">print(C)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">D = np.concatenate((A,B,B,A),axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1, 2, 2, 1],</span></span><br><span class="line"><span class="string">       [1, 2, 2, 1],</span></span><br><span class="line"><span class="string">       [1, 2, 2, 1]])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><code>axis</code>参数很好的控制了矩阵的纵向或是横向打印，相比较<code>vstack</code>和<code>hstack</code>函数显得更加方便。</p>
<h4 id="九：Numpy-array-分割"><a href="#九：Numpy-array-分割" class="headerlink" title="九：Numpy array 分割"></a>九：Numpy array 分割</h4><h5 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h5><p>首先 <code>import</code> 模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br></pre></td></tr></table></figure>

<p>建立3行4列的Array</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &#x3D; np.arange(12).reshape((3, 4))</span><br><span class="line">print(A)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">array([[ 0,  1,  2,  3],</span><br><span class="line">    [ 4,  5,  6,  7],</span><br><span class="line">    [ 8,  9, 10, 11]])</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="纵向分割"><a href="#纵向分割" class="headerlink" title="纵向分割"></a>纵向分割</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(np.split(A, 2, axis&#x3D;1))</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[array([[0, 1],</span><br><span class="line">        [4, 5],</span><br><span class="line">        [8, 9]]), array([[ 2,  3],</span><br><span class="line">        [ 6,  7],</span><br><span class="line">        [10, 11]])]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="横向分割"><a href="#横向分割" class="headerlink" title="横向分割"></a>横向分割</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(np.split(A, 3, axis&#x3D;0))</span><br><span class="line"></span><br><span class="line"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span><br></pre></td></tr></table></figure>

<h5 id="错误的分割"><a href="#错误的分割" class="headerlink" title="错误的分割"></a>错误的分割</h5><p>范例的Array只有4列，只能等量对分，因此输入以上程序代码后Python就会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(np.split(A, 3, axis&#x3D;1))</span><br><span class="line"></span><br><span class="line"># ValueError: array split does not result in an equal division</span><br></pre></td></tr></table></figure>

<p>为了解决这种情况, 我们会有下面这种方式.</p>
<h5 id="不等量的分割"><a href="#不等量的分割" class="headerlink" title="不等量的分割"></a>不等量的分割</h5><p>在机器学习时经常会需要将数据做不等量的分割，因此解决办法为<code>np.array_split()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(np.array_split(A, 3, axis&#x3D;1))</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[array([[0, 1],</span><br><span class="line">        [4, 5],</span><br><span class="line">        [8, 9]]), array([[ 2],</span><br><span class="line">        [ 6],</span><br><span class="line">        [10]]), array([[ 3],</span><br><span class="line">        [ 7],</span><br><span class="line">        [11]])]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>成功将Array不等量分割!</p>
<h5 id="其他的分割方式"><a href="#其他的分割方式" class="headerlink" title="其他的分割方式"></a>其他的分割方式</h5><p>在Numpy里还有<code>np.vsplit()</code>与横<code>np.hsplit()</code>方式可用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(np.vsplit(A, 3)) #等于 print(np.split(A, 3, axis&#x3D;0))</span><br><span class="line"></span><br><span class="line"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(np.hsplit(A, 2)) #等于 print(np.split(A, 2, axis&#x3D;1))</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[array([[0, 1],</span><br><span class="line">       [4, 5],</span><br><span class="line">       [8, 9]]), array([[ 2,  3],</span><br><span class="line">        [ 6,  7],</span><br><span class="line">        [10, 11]])]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>



<h4 id="十：Numpy-copy-amp-deep-copy"><a href="#十：Numpy-copy-amp-deep-copy" class="headerlink" title="十：Numpy copy &amp; deep copy"></a>十：Numpy copy &amp; deep copy</h4><h5 id="的赋值方式会带有关联性"><a href="#的赋值方式会带有关联性" class="headerlink" title="= 的赋值方式会带有关联性"></a>= 的赋值方式会带有关联性</h5><p>首先 <code>import numpy</code> 并建立变量, 给变量赋值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a &#x3D; np.arange(4)</span><br><span class="line"># array([0, 1, 2, 3])</span><br><span class="line"></span><br><span class="line">b &#x3D; a</span><br><span class="line">c &#x3D; a</span><br><span class="line">d &#x3D; b</span><br></pre></td></tr></table></figure>

<p>改变<code>a</code>的第一个值，<code>b</code>、<code>c</code>、<code>d</code>的第一个值也会同时改变。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[0] &#x3D; 11</span><br><span class="line">print(a)</span><br><span class="line"># array([11,  1,  2,  3])</span><br></pre></td></tr></table></figure>

<p>确认<code>b</code>、<code>c</code>、<code>d</code>是否与<code>a</code>相同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b is a  # True</span><br><span class="line">c is a  # True</span><br><span class="line">d is a  # True</span><br></pre></td></tr></table></figure>

<p>同样更改<code>d</code>的值，<code>a</code>、<code>b</code>、<code>c</code>也会改变。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d[1:3] &#x3D; [22, 33]   # array([11, 22, 33,  3])</span><br><span class="line">print(a)            # array([11, 22, 33,  3])</span><br><span class="line">print(b)            # array([11, 22, 33,  3])</span><br><span class="line">print(c)            # array([11, 22, 33,  3])</span><br></pre></td></tr></table></figure>

<h5 id="copy-的赋值方式没有关联性-¶"><a href="#copy-的赋值方式没有关联性-¶" class="headerlink" title="copy() 的赋值方式没有关联性 ¶"></a>copy() 的赋值方式没有关联性 <a href="https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/2-8-np-copy/#copy()-的赋值方式没有关联性" target="_blank" rel="noopener">¶</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; a.copy()    # deep copy</span><br><span class="line">print(b)        # array([11, 22, 33,  3])</span><br><span class="line">a[3] &#x3D; 44</span><br><span class="line">print(a)        # array([11, 22, 33, 44])</span><br><span class="line">print(b)        # array([11, 22, 33,  3])</span><br></pre></td></tr></table></figure>

<p>此时<code>a</code>与<code>b</code>已经没有关联。</p>
<h3 id="Panda的学习"><a href="#Panda的学习" class="headerlink" title="Panda的学习"></a>Panda的学习</h3><h4 id="一：Pandas-基本介绍"><a href="#一：Pandas-基本介绍" class="headerlink" title="一：Pandas 基本介绍"></a>一：Pandas 基本介绍</h4><p>学习资料:</p>
<ul>
<li><a href="https://github.com/MorvanZhou/tutorials/blob/master/numpy%26pandas/11_pandas_intro.py" target="_blank" rel="noopener">相关代码</a></li>
</ul>
<h5 id="Numpy-和-Pandas-有什么不同"><a href="#Numpy-和-Pandas-有什么不同" class="headerlink" title="Numpy 和 Pandas 有什么不同"></a>Numpy 和 Pandas 有什么不同</h5><p>如果用 python 的列表和字典来作比较, 那么可以说 Numpy 是列表形式的，没有数值标签，而 Pandas 就是字典形式。Pandas是基于Numpy构建的，让Numpy为中心的应用变得更加简单。</p>
<p>要使用pandas，首先需要了解他主要两个数据结构：Series和DataFrame。</p>
<h5 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">s &#x3D; pd.Series([1,3,6,np.nan,44,1])</span><br><span class="line"></span><br><span class="line">print(s)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">0     1.0</span><br><span class="line">1     3.0</span><br><span class="line">2     6.0</span><br><span class="line">3     NaN</span><br><span class="line">4    44.0</span><br><span class="line">5     1.0</span><br><span class="line">dtype: float64</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p><code>Series</code>的字符串表现形式为：索引在左边，值在右边。由于我们没有为数据指定索引。于是会自动创建一个0到N-1（N为长度）的整数型索引。</p>
<h5 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dates &#x3D; pd.date_range(&#39;20160101&#39;,periods&#x3D;6)</span><br><span class="line">df &#x3D; pd.DataFrame(np.random.randn(6,4),index&#x3D;dates,columns&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">                   a         b         c         d</span><br><span class="line">2016-01-01 -0.253065 -2.071051 -0.640515  0.613663</span><br><span class="line">2016-01-02 -1.147178  1.532470  0.989255 -0.499761</span><br><span class="line">2016-01-03  1.221656 -2.390171  1.862914  0.778070</span><br><span class="line">2016-01-04  1.473877 -0.046419  0.610046  0.204672</span><br><span class="line">2016-01-05 -1.584752 -0.700592  1.487264 -1.778293</span><br><span class="line">2016-01-06  0.633675 -1.414157 -0.277066 -0.442545</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p><code>DataFrame</code>是一个表格型的数据结构，它包含有一组有序的列，每列可以是不同的值类型（数值，字符串，布尔值等）。<code>DataFrame</code>既有行索引也有列索引， 它可以被看做由<code>Series</code>组成的大字典。</p>
<p>我们可以根据每一个不同的索引来挑选数据, 比如挑选 <code>b</code> 的元素:</p>
<h5 id="DataFrame-的一些简单运用"><a href="#DataFrame-的一些简单运用" class="headerlink" title="DataFrame 的一些简单运用"></a>DataFrame 的一些简单运用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df[&#39;b&#39;])</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">2016-01-01   -2.071051</span><br><span class="line">2016-01-02    1.532470</span><br><span class="line">2016-01-03   -2.390171</span><br><span class="line">2016-01-04   -0.046419</span><br><span class="line">2016-01-05   -0.700592</span><br><span class="line">2016-01-06   -1.414157</span><br><span class="line">Freq: D, Name: b, dtype: float64</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>我们在创建一组没有给定行标签和列标签的数据 <code>df1</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df1 &#x3D; pd.DataFrame(np.arange(12).reshape((3,4)))</span><br><span class="line">print(df1)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">   0  1   2   3</span><br><span class="line">0  0  1   2   3</span><br><span class="line">1  4  5   6   7</span><br><span class="line">2  8  9  10  11</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>这样,他就会采取默认的从0开始 index. 还有一种生成 <code>df</code> 的方法, 如下 <code>df2</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df2 &#x3D; pd.DataFrame(&#123;&#39;A&#39; : 1.,</span><br><span class="line">                    &#39;B&#39; : pd.Timestamp(&#39;20130102&#39;),</span><br><span class="line">                    &#39;C&#39; : pd.Series(1,index&#x3D;list(range(4)),dtype&#x3D;&#39;float32&#39;),</span><br><span class="line">                    &#39;D&#39; : np.array([3] * 4,dtype&#x3D;&#39;int32&#39;),</span><br><span class="line">                    &#39;E&#39; : pd.Categorical([&quot;test&quot;,&quot;train&quot;,&quot;test&quot;,&quot;train&quot;]),</span><br><span class="line">                    &#39;F&#39; : &#39;foo&#39;&#125;)</span><br><span class="line">                    </span><br><span class="line">print(df2)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">     A          B    C  D      E    F</span><br><span class="line">0  1.0 2013-01-02  1.0  3   test  foo</span><br><span class="line">1  1.0 2013-01-02  1.0  3  train  foo</span><br><span class="line">2  1.0 2013-01-02  1.0  3   test  foo</span><br><span class="line">3  1.0 2013-01-02  1.0  3  train  foo</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>这种方法能对每一列的数据进行特殊对待. 如果想要查看数据中的类型, 我们可以用 <code>dtype</code> 这个属性:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df2.dtypes)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">df2.dtypes</span><br><span class="line">A           float64</span><br><span class="line">B    datetime64[ns]</span><br><span class="line">C           float32</span><br><span class="line">D             int32</span><br><span class="line">E          category</span><br><span class="line">F            object</span><br><span class="line">dtype: object</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>如果想看对列的序号:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df2.index)</span><br><span class="line"></span><br><span class="line"># Int64Index([0, 1, 2, 3], dtype&#x3D;&#39;int64&#39;)</span><br></pre></td></tr></table></figure>

<p>同样, 每种数据的名称也能看到:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df2.columns)</span><br><span class="line"></span><br><span class="line"># Index([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;], dtype&#x3D;&#39;object&#39;)</span><br></pre></td></tr></table></figure>

<p>如果只想看所有<code>df2</code>的值:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df2.values)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">array([[1.0, Timestamp(&#39;2013-01-02 00:00:00&#39;), 1.0, 3, &#39;test&#39;, &#39;foo&#39;],</span><br><span class="line">       [1.0, Timestamp(&#39;2013-01-02 00:00:00&#39;), 1.0, 3, &#39;train&#39;, &#39;foo&#39;],</span><br><span class="line">       [1.0, Timestamp(&#39;2013-01-02 00:00:00&#39;), 1.0, 3, &#39;test&#39;, &#39;foo&#39;],</span><br><span class="line">       [1.0, Timestamp(&#39;2013-01-02 00:00:00&#39;), 1.0, 3, &#39;train&#39;, &#39;foo&#39;]], dtype&#x3D;object)</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>想知道数据的总结, 可以用 <code>describe()</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df2.describe()</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">         A    C    D</span><br><span class="line">count  4.0  4.0  4.0</span><br><span class="line">mean   1.0  1.0  3.0</span><br><span class="line">std    0.0  0.0  0.0</span><br><span class="line">min    1.0  1.0  3.0</span><br><span class="line">25%    1.0  1.0  3.0</span><br><span class="line">50%    1.0  1.0  3.0</span><br><span class="line">75%    1.0  1.0  3.0</span><br><span class="line">max    1.0  1.0  3.0</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>如果想翻转数据, <code>transpose</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df2.T)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;                   </span><br><span class="line">0                    1                    2  \</span><br><span class="line">A                    1                    1                    1   </span><br><span class="line">B  2013-01-02 00:00:00  2013-01-02 00:00:00  2013-01-02 00:00:00   </span><br><span class="line">C                    1                    1                    1   </span><br><span class="line">D                    3                    3                    3   </span><br><span class="line">E                 test                train                 test   </span><br><span class="line">F                  foo                  foo                  foo   </span><br><span class="line"></span><br><span class="line">                     3  </span><br><span class="line">A                    1  </span><br><span class="line">B  2013-01-02 00:00:00  </span><br><span class="line">C                    1  </span><br><span class="line">D                    3  </span><br><span class="line">E                train  </span><br><span class="line">F                  foo  </span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>如果想对数据的 <code>index</code> 进行排序并输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df2.sort_index(axis&#x3D;1, ascending&#x3D;False))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">     F      E  D    C          B    A</span><br><span class="line">0  foo   test  3  1.0 2013-01-02  1.0</span><br><span class="line">1  foo  train  3  1.0 2013-01-02  1.0</span><br><span class="line">2  foo   test  3  1.0 2013-01-02  1.0</span><br><span class="line">3  foo  train  3  1.0 2013-01-02  1.0</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>如果是对数据 值 排序输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df2.sort_values(by&#x3D;&#39;B&#39;))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">     A          B    C  D      E    F</span><br><span class="line">0  1.0 2013-01-02  1.0  3   test  foo</span><br><span class="line">1  1.0 2013-01-02  1.0  3  train  foo</span><br><span class="line">2  1.0 2013-01-02  1.0  3   test  foo</span><br><span class="line">3  1.0 2013-01-02  1.0  3  train  foo</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>






<h4 id="二：Pandas-选择数据"><a href="#二：Pandas-选择数据" class="headerlink" title="二：Pandas 选择数据"></a>二：Pandas 选择数据</h4><p>学习资料:</p>
<ul>
<li><a href="https://github.com/MorvanZhou/tutorials/blob/master/numpy%26pandas/12_selection.py" target="_blank" rel="noopener">相关代码</a></li>
</ul>
<p>我们建立了一个 6X4 的矩阵数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dates &#x3D; pd.date_range(&#39;20130101&#39;, periods&#x3D;6)</span><br><span class="line">df &#x3D; pd.DataFrame(np.arange(24).reshape((6,4)),index&#x3D;dates, columns&#x3D;[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;])</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             A   B   C   D</span><br><span class="line">2013-01-01   0   1   2   3</span><br><span class="line">2013-01-02   4   5   6   7</span><br><span class="line">2013-01-03   8   9  10  11</span><br><span class="line">2013-01-04  12  13  14  15</span><br><span class="line">2013-01-05  16  17  18  19</span><br><span class="line">2013-01-06  20  21  22  23</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="简单的筛选"><a href="#简单的筛选" class="headerlink" title="简单的筛选"></a>简单的筛选</h5><p>如果我们想选取<code>DataFrame</code>中的数据，下面描述了两种途径, 他们都能达到同一个目的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df[&#39;A&#39;])</span><br><span class="line">print(df.A)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">2013-01-01     0</span><br><span class="line">2013-01-02     4</span><br><span class="line">2013-01-03     8</span><br><span class="line">2013-01-04    12</span><br><span class="line">2013-01-05    16</span><br><span class="line">2013-01-06    20</span><br><span class="line">Freq: D, Name: A, dtype: int64</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>让选择跨越多行或多列:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df[0:3])</span><br><span class="line"> </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">            A  B   C   D</span><br><span class="line">2013-01-01  0  1   2   3</span><br><span class="line">2013-01-02  4  5   6   7</span><br><span class="line">2013-01-03  8  9  10  11</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">print(df[&#39;20130102&#39;:&#39;20130104&#39;])</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">A   B   C   D</span><br><span class="line">2013-01-02   4   5   6   7</span><br><span class="line">2013-01-03   8   9  10  11</span><br><span class="line">2013-01-04  12  13  14  15</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>如果<code>df[3:3]</code>将会是一个空对象。后者选择<code>20130102</code>到<code>20130104</code>标签之间的数据，并且包括这两个标签。</p>
<h5 id="根据标签-loc"><a href="#根据标签-loc" class="headerlink" title="根据标签 loc"></a>根据标签 loc</h5><p>同样我们可以使用标签来选择数据 <code>loc</code>, 本例子主要通过标签名字选择某一行数据， 或者通过选择某行或者所有行（<code>:</code>代表所有行）然后选其中某一列或几列数据。:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df.loc[&#39;20130102&#39;])</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">A    4</span><br><span class="line">B    5</span><br><span class="line">C    6</span><br><span class="line">D    7</span><br><span class="line">Name: 2013-01-02 00:00:00, dtype: int64</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">print(df.loc[:,[&#39;A&#39;,&#39;B&#39;]])  # 保留所有行，帅选列</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             A   B</span><br><span class="line">2013-01-01   0   1</span><br><span class="line">2013-01-02   4   5</span><br><span class="line">2013-01-03   8   9</span><br><span class="line">2013-01-04  12  13</span><br><span class="line">2013-01-05  16  17</span><br><span class="line">2013-01-06  20  21</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">print(df.loc[&#39;20130102&#39;,[&#39;A&#39;,&#39;B&#39;]])</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">A    4</span><br><span class="line">B    5</span><br><span class="line">Name: 2013-01-02 00:00:00, dtype: int64</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="根据序列-iloc-–position"><a href="#根据序列-iloc-–position" class="headerlink" title="根据序列 iloc –position"></a>根据序列 iloc –position</h5><p>另外我们可以采用位置进行选择 <code>iloc</code>, 在这里我们可以通过位置选择在不同情况下所需要的数据例如选某一个，连续选或者跨行选等操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df.iloc[3,1])</span><br><span class="line"># 13</span><br><span class="line"></span><br><span class="line">print(df.iloc[3:5,1:3])</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             B   C</span><br><span class="line">2013-01-04  13  14</span><br><span class="line">2013-01-05  17  18</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">print(df.iloc[[1,3,5],1:3])</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             B   C</span><br><span class="line">2013-01-02   5   6</span><br><span class="line">2013-01-04  13  14</span><br><span class="line">2013-01-06  21  22</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>在这里我们可以通过位置选择在不同情况下所需要的数据, 例如选某一个，连续选或者跨行选等操作。</p>
<h5 id="根据混合的这两种-ix"><a href="#根据混合的这两种-ix" class="headerlink" title="根据混合的这两种 ix"></a>根据混合的这两种 ix</h5><p>当然我们可以采用混合选择 <code>ix</code>, 其中选择’A’和’C’的两列，并选择前三行的数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df.ix[:3,[&#39;A&#39;,&#39;C&#39;]])</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">            A   C</span><br><span class="line">2013-01-01  0   2</span><br><span class="line">2013-01-02  4   6</span><br><span class="line">2013-01-03  8  10</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="通过判断的筛选"><a href="#通过判断的筛选" class="headerlink" title="通过判断的筛选"></a>通过判断的筛选</h5><p>最后我们可以采用判断指令 (Boolean indexing) 进行选择. 我们可以约束某项条件然后选择出当前所有数据.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(df[df.A&gt;8])</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             A   B   C   D</span><br><span class="line">2013-01-04  12  13  14  15</span><br><span class="line">2013-01-05  16  17  18  19</span><br><span class="line">2013-01-06  20  21  22  23</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>下节我们将会讲到Pandas中如何设置值。</p>
<h4 id="Pandas-设置值"><a href="#Pandas-设置值" class="headerlink" title="Pandas 设置值"></a>Pandas 设置值</h4><p>学习资料:</p>
<ul>
<li><a href="https://github.com/MorvanZhou/tutorials/blob/master/numpy%26pandas/13_set_value.py" target="_blank" rel="noopener">相关代码</a></li>
</ul>
<h5 id="创建数据-1"><a href="#创建数据-1" class="headerlink" title="创建数据"></a>创建数据</h5><p>我们可以根据自己的需求, 用 pandas 进行更改数据里面的值, 或者加上一些空的,或者有数值的列.</p>
<p>首先建立了一个 6X4 的矩阵数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dates &#x3D; pd.date_range(&#39;20130101&#39;, periods&#x3D;6)</span><br><span class="line">df &#x3D; pd.DataFrame(np.arange(24).reshape((6,4)),index&#x3D;dates, columns&#x3D;[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;])</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             A   B   C   D</span><br><span class="line">2013-01-01   0   1   2   3</span><br><span class="line">2013-01-02   4   5   6   7</span><br><span class="line">2013-01-03   8   9  10  11</span><br><span class="line">2013-01-04  12  13  14  15</span><br><span class="line">2013-01-05  16  17  18  19</span><br><span class="line">2013-01-06  20  21  22  23</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="根据位置设置-loc-和-iloc"><a href="#根据位置设置-loc-和-iloc" class="headerlink" title="根据位置设置 loc 和 iloc"></a>根据位置设置 loc 和 iloc</h5><p>我们可以利用索引或者标签确定需要修改值的位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df.iloc[2,2] &#x3D; 1111</span><br><span class="line">df.loc[&#39;20130101&#39;,&#39;B&#39;] &#x3D; 2222</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             A     B     C   D</span><br><span class="line">2013-01-01   0  2222     2   3</span><br><span class="line">2013-01-02   4     5     6   7</span><br><span class="line">2013-01-03   8     9  1111  11</span><br><span class="line">2013-01-04  12    13    14  15</span><br><span class="line">2013-01-05  16    17    18  19</span><br><span class="line">2013-01-06  20    21    22  23</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="根据条件设置"><a href="#根据条件设置" class="headerlink" title="根据条件设置"></a>根据条件设置</h5><p>如果现在的判断条件是这样, 我们想要更改<code>B</code>中的数, 而更改的位置是取决于 <code>A</code> 的. 对于<code>A</code>大于4的位置. 更改<code>B</code>在相应位置上的数为0.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df.B[df.A&gt;4] &#x3D; 0</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">                A     B     C   D</span><br><span class="line">2013-01-01   0  2222     2   3</span><br><span class="line">2013-01-02   4     5     6   7</span><br><span class="line">2013-01-03   8     0  1111  11</span><br><span class="line">2013-01-04  12     0    14  15</span><br><span class="line">2013-01-05  16     0    18  19</span><br><span class="line">2013-01-06  20     0    22  23 </span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>



<h5 id="按行或列设置"><a href="#按行或列设置" class="headerlink" title="按行或列设置"></a>按行或列设置</h5><p>如果对整列做批处理, 加上一列 ‘F’, 并将 <code>F</code> 列全改为 <code>NaN</code>, 如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df[&#39;F&#39;] &#x3D; np.nan</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             A     B     C   D   F</span><br><span class="line">2013-01-01   0  2222     2   3 NaN</span><br><span class="line">2013-01-02   4     5     6   7 NaN</span><br><span class="line">2013-01-03   8     0  1111  11 NaN</span><br><span class="line">2013-01-04  12     0    14  15 NaN</span><br><span class="line">2013-01-05  16     0    18  19 NaN</span><br><span class="line">2013-01-06  20     0    22  23 NaN</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="添加数据-¶"><a href="#添加数据-¶" class="headerlink" title="添加数据 ¶"></a>添加数据 <a href="https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/3-3-pd-assign/#添加数据" target="_blank" rel="noopener">¶</a></h5><p>用上面的方法也可以加上 <code>Series</code> 序列（但是长度必须对齐）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df[&#39;E&#39;] &#x3D; pd.Series([1,2,3,4,5,6], index&#x3D;pd.date_range(&#39;20130101&#39;,periods&#x3D;6)) </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             A     B     C   D   F  E</span><br><span class="line">2013-01-01   0  2222     2   3 NaN  1</span><br><span class="line">2013-01-02   4     5     6   7 NaN  2</span><br><span class="line">2013-01-03   8     0  1111  11 NaN  3</span><br><span class="line">2013-01-04  12     0    14  15 NaN  4</span><br><span class="line">2013-01-05  16     0    18  19 NaN  5</span><br><span class="line">2013-01-06  20     0    22  23 NaN  6</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>这样我们大概学会了如何对<code>DataFrame</code>中在自己想要的地方赋值或者增加数据。 下次课会将pandas如何处理丢失数据的过程。</p>
<h4 id="四：Pandas-处理丢失数据"><a href="#四：Pandas-处理丢失数据" class="headerlink" title="四：Pandas 处理丢失数据"></a>四：Pandas 处理丢失数据</h4><p>学习资料:</p>
<ul>
<li><a href="https://github.com/MorvanZhou/tutorials/blob/master/numpy%26pandas/14_nan.py" target="_blank" rel="noopener">相关代码</a></li>
</ul>
<h5 id="创建含-NaN-的矩阵"><a href="#创建含-NaN-的矩阵" class="headerlink" title="创建含 NaN 的矩阵"></a>创建含 NaN 的矩阵</h5><p>有时候我们导入或处理数据, 会产生一些空的或者是 <code>NaN</code> 数据,如何删除或者是填补这些 <code>NaN</code> 数据就是我们今天所要提到的内容.</p>
<p>建立了一个6X4的矩阵数据并且把两个位置置为空.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dates &#x3D; pd.date_range(&#39;20130101&#39;, periods&#x3D;6)</span><br><span class="line">df &#x3D; pd.DataFrame(np.arange(24).reshape((6,4)),index&#x3D;dates, columns&#x3D;[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;])</span><br><span class="line">df.iloc[0,1] &#x3D; np.nan</span><br><span class="line">df.iloc[1,2] &#x3D; np.nan</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             A     B     C   D</span><br><span class="line">2013-01-01   0   NaN   2.0   3</span><br><span class="line">2013-01-02   4   5.0   NaN   7</span><br><span class="line">2013-01-03   8   9.0  10.0  11</span><br><span class="line">2013-01-04  12  13.0  14.0  15</span><br><span class="line">2013-01-05  16  17.0  18.0  19</span><br><span class="line">2013-01-06  20  21.0  22.0  23</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>



<h5 id="pd-dropna"><a href="#pd-dropna" class="headerlink" title="pd.dropna()"></a>pd.dropna()</h5><p>如果想直接去掉有 <code>NaN</code> 的行或列, 可以使用 <code>dropna</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df.dropna(</span><br><span class="line">    axis&#x3D;0,     # 0: 对行进行操作; 1: 对列进行操作</span><br><span class="line">    how&#x3D;&#39;any&#39;   # &#39;any&#39;: 只要存在 NaN 就 drop 掉; &#39;all&#39;: 必须全部是 NaN 才 drop </span><br><span class="line">    ) </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             A     B     C   D</span><br><span class="line">2013-01-03   8   9.0  10.0  11</span><br><span class="line">2013-01-04  12  13.0  14.0  15</span><br><span class="line">2013-01-05  16  17.0  18.0  19</span><br><span class="line">2013-01-06  20  21.0  22.0  23</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="pd-fillna"><a href="#pd-fillna" class="headerlink" title="pd.fillna()"></a>pd.fillna()</h5><p>如果是将 <code>NaN</code> 的值用其他值代替, 比如代替成 <code>0</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df.fillna(value&#x3D;0)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">             A     B     C   D</span><br><span class="line">2013-01-01   0   0.0   2.0   3</span><br><span class="line">2013-01-02   4   5.0   0.0   7</span><br><span class="line">2013-01-03   8   9.0  10.0  11</span><br><span class="line">2013-01-04  12  13.0  14.0  15</span><br><span class="line">2013-01-05  16  17.0  18.0  19</span><br><span class="line">2013-01-06  20  21.0  22.0  23</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="pd-isnull"><a href="#pd-isnull" class="headerlink" title="pd.isnull()"></a>pd.isnull()</h5><p>判断是否有缺失数据 <code>NaN</code>, 为 <code>True</code> 表示缺失数据:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df.isnull() </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">                A      B      C      D</span><br><span class="line">2013-01-01  False   True  False  False</span><br><span class="line">2013-01-02  False  False   True  False</span><br><span class="line">2013-01-03  False  False  False  False</span><br><span class="line">2013-01-04  False  False  False  False</span><br><span class="line">2013-01-05  False  False  False  False</span><br><span class="line">2013-01-06  False  False  False  False</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>检测在数据中是否存在 <code>NaN</code>, 如果存在就返回 <code>True</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.any(df.isnull()) &#x3D;&#x3D; True  </span><br><span class="line"># True</span><br></pre></td></tr></table></figure>

<p>下次课会将pandas如何导入导出数据的过程。</p>
<h4 id="五：Pandas-导入导出"><a href="#五：Pandas-导入导出" class="headerlink" title="五：Pandas 导入导出"></a>五：Pandas 导入导出</h4><p>学习资料:</p>
<ul>
<li><a href="https://github.com/MorvanZhou/tutorials/tree/master/numpy%26pandas/15_read_to" target="_blank" rel="noopener">相关代码</a></li>
</ul>
<h5 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h5><p><code>pandas</code>可以读取与存取的资料格式有很多种，像<code>csv</code>、<code>excel</code>、<code>json</code>、<code>html</code>与<code>pickle</code>等…， 详细请看<a href="http://pandas.pydata.org/pandas-docs/stable/io.html" target="_blank" rel="noopener">官方说明文件</a></p>
<h5 id="读取csv"><a href="#读取csv" class="headerlink" title="读取csv"></a>读取csv</h5><p>示范档案下载 - <a href="https://github.com/MorvanZhou/tutorials/blob/master/numpy%26pandas/15_read_to/student.csv" target="_blank" rel="noopener">student.csv</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd #加载模块</span><br><span class="line"></span><br><span class="line">#读取csv</span><br><span class="line">data &#x3D; pd.read_csv(&#39;student.csv&#39;)</span><br><span class="line"></span><br><span class="line">#打印出data</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>



<h5 id="将资料存取成pickle"><a href="#将资料存取成pickle" class="headerlink" title="将资料存取成pickle"></a>将资料存取成pickle</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.to_pickle(&#39;student.pickle&#39;)</span><br></pre></td></tr></table></figure>





<h4 id="六：Pandas-合并-concat—concatenating"><a href="#六：Pandas-合并-concat—concatenating" class="headerlink" title="六：Pandas 合并 concat—concatenating"></a>六：Pandas 合并 concat—concatenating</h4><p>学习资料:</p>
<ul>
<li><a href="https://github.com/MorvanZhou/tutorials/blob/master/numpy%26pandas/16_concat.py" target="_blank" rel="noopener">相关代码</a></li>
</ul>
<h5 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h5><p><code>pandas</code>处理多组数据的时候往往会要用到数据的合并处理,使用 <code>concat</code>是一种基本的合并方式.而且<code>concat</code>中有很多参数可以调整,合并成你想要的数据形式.</p>
<h5 id="axis-合并方向"><a href="#axis-合并方向" class="headerlink" title="axis (合并方向)"></a>axis (合并方向)</h5><p><code>axis=0</code>是预设值，因此未设定任何参数时，函数默认<code>axis=0</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">#定义资料集</span><br><span class="line">df1 &#x3D; pd.DataFrame(np.ones((3,4))*0, columns&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br><span class="line">df2 &#x3D; pd.DataFrame(np.ones((3,4))*1, columns&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br><span class="line">df3 &#x3D; pd.DataFrame(np.ones((3,4))*2, columns&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br><span class="line"></span><br><span class="line">#concat纵向合并</span><br><span class="line">res &#x3D; pd.concat([df1, df2, df3], axis&#x3D;0)</span><br><span class="line"></span><br><span class="line">#打印结果</span><br><span class="line">print(res)</span><br><span class="line">#     a    b    c    d</span><br><span class="line"># 0  0.0  0.0  0.0  0.0</span><br><span class="line"># 1  0.0  0.0  0.0  0.0</span><br><span class="line"># 2  0.0  0.0  0.0  0.0</span><br><span class="line"># 0  1.0  1.0  1.0  1.0</span><br><span class="line"># 1  1.0  1.0  1.0  1.0</span><br><span class="line"># 2  1.0  1.0  1.0  1.0</span><br><span class="line"># 0  2.0  2.0  2.0  2.0</span><br><span class="line"># 1  2.0  2.0  2.0  2.0</span><br><span class="line"># 2  2.0  2.0  2.0  2.0</span><br></pre></td></tr></table></figure>

<p>仔细观察会发现结果的<code>index</code>是0, 1, 2, 0, 1, 2, 0, 1, 2，若要将<code>index</code>重置，请看<strong>例子二</strong>。</p>
<h5 id="ignore-index-重置-index"><a href="#ignore-index-重置-index" class="headerlink" title="ignore_index (重置 index)"></a>ignore_index (重置 index)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#承上一个例子，并将index_ignore设定为True</span><br><span class="line">res &#x3D; pd.concat([df1, df2, df3], axis&#x3D;0, ignore_index&#x3D;True)</span><br><span class="line"></span><br><span class="line">#打印结果</span><br><span class="line">print(res)</span><br><span class="line">#     a    b    c    d</span><br><span class="line"># 0  0.0  0.0  0.0  0.0</span><br><span class="line"># 1  0.0  0.0  0.0  0.0</span><br><span class="line"># 2  0.0  0.0  0.0  0.0</span><br><span class="line"># 3  1.0  1.0  1.0  1.0</span><br><span class="line"># 4  1.0  1.0  1.0  1.0</span><br><span class="line"># 5  1.0  1.0  1.0  1.0</span><br><span class="line"># 6  2.0  2.0  2.0  2.0</span><br><span class="line"># 7  2.0  2.0  2.0  2.0</span><br><span class="line"># 8  2.0  2.0  2.0  2.0</span><br></pre></td></tr></table></figure>

<p>结果的<code>index</code>变0, 1, 2, 3, 4, 5, 6, 7, 8。</p>
<h5 id="join-合并方式"><a href="#join-合并方式" class="headerlink" title="join (合并方式)"></a>join (合并方式)</h5><p><code>join=&#39;outer&#39;</code>为预设值，因此未设定任何参数时，函数默认<code>join=&#39;outer&#39;</code>。此方式是依照<code>column</code>来做纵向合并，有相同的<code>column</code>上下合并在一起，其他独自的<code>column</code>个自成列，原本没有值的位置皆以<code>NaN</code>填充。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">#定义资料集</span><br><span class="line">df1 &#x3D; pd.DataFrame(np.ones((3,4))*0, columns&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;], index&#x3D;[1,2,3])</span><br><span class="line">df2 &#x3D; pd.DataFrame(np.ones((3,4))*1, columns&#x3D;[&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;], index&#x3D;[2,3,4])</span><br><span class="line"></span><br><span class="line">#纵向&quot;外&quot;合并df1与df2</span><br><span class="line">res &#x3D; pd.concat([df1, df2], axis&#x3D;0, join&#x3D;&#39;outer&#39;)</span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line">#     a    b    c    d    e</span><br><span class="line"># 1  0.0  0.0  0.0  0.0  NaN</span><br><span class="line"># 2  0.0  0.0  0.0  0.0  NaN</span><br><span class="line"># 3  0.0  0.0  0.0  0.0  NaN</span><br><span class="line"># 2  NaN  1.0  1.0  1.0  1.0</span><br><span class="line"># 3  NaN  1.0  1.0  1.0  1.0</span><br><span class="line"># 4  NaN  1.0  1.0  1.0  1.0</span><br></pre></td></tr></table></figure>

<p>原理同上个例子的说明，但只有相同的<code>column</code>合并在一起，其他的会被抛弃。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#承上一个例子</span><br><span class="line"></span><br><span class="line">#纵向&quot;内&quot;合并df1与df2</span><br><span class="line">res &#x3D; pd.concat([df1, df2], axis&#x3D;0, join&#x3D;&#39;inner&#39;)</span><br><span class="line"></span><br><span class="line">#打印结果</span><br><span class="line">print(res)</span><br><span class="line">#     b    c    d</span><br><span class="line"># 1  0.0  0.0  0.0</span><br><span class="line"># 2  0.0  0.0  0.0</span><br><span class="line"># 3  0.0  0.0  0.0</span><br><span class="line"># 2  1.0  1.0  1.0</span><br><span class="line"># 3  1.0  1.0  1.0</span><br><span class="line"># 4  1.0  1.0  1.0</span><br><span class="line"></span><br><span class="line">#重置index并打印结果</span><br><span class="line">res &#x3D; pd.concat([df1, df2], axis&#x3D;0, join&#x3D;&#39;inner&#39;, ignore_index&#x3D;True)</span><br><span class="line">print(res)</span><br><span class="line">#     b    c    d</span><br><span class="line"># 0  0.0  0.0  0.0</span><br><span class="line"># 1  0.0  0.0  0.0</span><br><span class="line"># 2  0.0  0.0  0.0</span><br><span class="line"># 3  1.0  1.0  1.0</span><br><span class="line"># 4  1.0  1.0  1.0</span><br><span class="line"># 5  1.0  1.0  1.0</span><br></pre></td></tr></table></figure>

<h5 id="join-axes-依照-axes-合并"><a href="#join-axes-依照-axes-合并" class="headerlink" title="join_axes (依照 axes 合并)"></a>join_axes (依照 axes 合并)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">#定义资料集</span><br><span class="line">df1 &#x3D; pd.DataFrame(np.ones((3,4))*0, columns&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;], index&#x3D;[1,2,3])</span><br><span class="line">df2 &#x3D; pd.DataFrame(np.ones((3,4))*1, columns&#x3D;[&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;], index&#x3D;[2,3,4])</span><br><span class="line"></span><br><span class="line">#依照&#96;df1.index&#96;进行横向合并</span><br><span class="line">res &#x3D; pd.concat([df1, df2], axis&#x3D;1, join_axes&#x3D;[df1.index])</span><br><span class="line"></span><br><span class="line">#打印结果</span><br><span class="line">print(res)</span><br><span class="line">#     a    b    c    d    b    c    d    e</span><br><span class="line"># 1  0.0  0.0  0.0  0.0  NaN  NaN  NaN  NaN</span><br><span class="line"># 2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span><br><span class="line"># 3  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span><br><span class="line"></span><br><span class="line">#移除join_axes，并打印结果</span><br><span class="line">res &#x3D; pd.concat([df1, df2], axis&#x3D;1)</span><br><span class="line">print(res)</span><br><span class="line">#     a    b    c    d    b    c    d    e</span><br><span class="line"># 1  0.0  0.0  0.0  0.0  NaN  NaN  NaN  NaN</span><br><span class="line"># 2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span><br><span class="line"># 3  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span><br><span class="line"># 4  NaN  NaN  NaN  NaN  1.0  1.0  1.0  1.0</span><br></pre></td></tr></table></figure>

<h5 id="append-添加数据"><a href="#append-添加数据" class="headerlink" title="append (添加数据)"></a>append (添加数据)</h5><p><code>append</code>只有纵向合并，没有横向合并。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">#定义资料集</span><br><span class="line">df1 &#x3D; pd.DataFrame(np.ones((3,4))*0, columns&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br><span class="line">df2 &#x3D; pd.DataFrame(np.ones((3,4))*1, columns&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br><span class="line">df3 &#x3D; pd.DataFrame(np.ones((3,4))*1, columns&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br><span class="line">s1 &#x3D; pd.Series([1,2,3,4], index&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br><span class="line"></span><br><span class="line">#将df2合并到df1的下面，以及重置index，并打印出结果</span><br><span class="line">res &#x3D; df1.append(df2, ignore_index&#x3D;True)</span><br><span class="line">print(res)</span><br><span class="line">#     a    b    c    d</span><br><span class="line"># 0  0.0  0.0  0.0  0.0</span><br><span class="line"># 1  0.0  0.0  0.0  0.0</span><br><span class="line"># 2  0.0  0.0  0.0  0.0</span><br><span class="line"># 3  1.0  1.0  1.0  1.0</span><br><span class="line"># 4  1.0  1.0  1.0  1.0</span><br><span class="line"># 5  1.0  1.0  1.0  1.0</span><br><span class="line"></span><br><span class="line">#合并多个df，将df2与df3合并至df1的下面，以及重置index，并打印出结果</span><br><span class="line">res &#x3D; df1.append([df2, df3], ignore_index&#x3D;True)</span><br><span class="line">print(res)</span><br><span class="line">#     a    b    c    d</span><br><span class="line"># 0  0.0  0.0  0.0  0.0</span><br><span class="line"># 1  0.0  0.0  0.0  0.0</span><br><span class="line"># 2  0.0  0.0  0.0  0.0</span><br><span class="line"># 3  1.0  1.0  1.0  1.0</span><br><span class="line"># 4  1.0  1.0  1.0  1.0</span><br><span class="line"># 5  1.0  1.0  1.0  1.0</span><br><span class="line"># 6  1.0  1.0  1.0  1.0</span><br><span class="line"># 7  1.0  1.0  1.0  1.0</span><br><span class="line"># 8  1.0  1.0  1.0  1.0</span><br><span class="line"></span><br><span class="line">#合并series，将s1合并至df1，以及重置index，并打印出结果</span><br><span class="line">res &#x3D; df1.append(s1, ignore_index&#x3D;True)</span><br><span class="line">print(res)</span><br><span class="line">#     a    b    c    d</span><br><span class="line"># 0  0.0  0.0  0.0  0.0</span><br><span class="line"># 1  0.0  0.0  0.0  0.0</span><br><span class="line"># 2  0.0  0.0  0.0  0.0</span><br><span class="line"># 3  1.0  2.0  3.0  4.0</span><br></pre></td></tr></table></figure>





<h4 id="七：Pandas-合并-merge"><a href="#七：Pandas-合并-merge" class="headerlink" title="七：Pandas 合并 merge"></a>七：Pandas 合并 merge</h4><p>学习资料:</p>
<ul>
<li><a href="https://github.com/MorvanZhou/tutorials/blob/master/numpy%26pandas/17_merge.py" target="_blank" rel="noopener">相关代码</a></li>
</ul>
<h5 id="要点-2"><a href="#要点-2" class="headerlink" title="要点"></a>要点</h5><p><code>pandas</code>中的<code>merge</code>和<code>concat</code>类似,但主要是用于<strong>两组有key column的数据</strong>,统一索引的数据. 通常也被用在Database的处理当中.</p>
<h5 id="依据一组key合并"><a href="#依据一组key合并" class="headerlink" title="依据一组key合并"></a>依据一组key合并</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">#定义资料集并打印出</span><br><span class="line">left &#x3D; pd.DataFrame(&#123;&#39;key&#39;: [&#39;K0&#39;, &#39;K1&#39;, &#39;K2&#39;, &#39;K3&#39;],</span><br><span class="line">                             &#39;A&#39;: [&#39;A0&#39;, &#39;A1&#39;, &#39;A2&#39;, &#39;A3&#39;],</span><br><span class="line">                             &#39;B&#39;: [&#39;B0&#39;, &#39;B1&#39;, &#39;B2&#39;, &#39;B3&#39;]&#125;)</span><br><span class="line">right &#x3D; pd.DataFrame(&#123;&#39;key&#39;: [&#39;K0&#39;, &#39;K1&#39;, &#39;K2&#39;, &#39;K3&#39;],</span><br><span class="line">                              &#39;C&#39;: [&#39;C0&#39;, &#39;C1&#39;, &#39;C2&#39;, &#39;C3&#39;],</span><br><span class="line">                              &#39;D&#39;: [&#39;D0&#39;, &#39;D1&#39;, &#39;D2&#39;, &#39;D3&#39;]&#125;)</span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line">#    A   B key</span><br><span class="line"># 0  A0  B0  K0</span><br><span class="line"># 1  A1  B1  K1</span><br><span class="line"># 2  A2  B2  K2</span><br><span class="line"># 3  A3  B3  K3</span><br><span class="line"></span><br><span class="line">print(right)</span><br><span class="line">#    C   D key</span><br><span class="line"># 0  C0  D0  K0</span><br><span class="line"># 1  C1  D1  K1</span><br><span class="line"># 2  C2  D2  K2</span><br><span class="line"># 3  C3  D3  K3</span><br><span class="line"></span><br><span class="line">#依据key column合并，并打印出</span><br><span class="line">res &#x3D; pd.merge(left, right, on&#x3D;&#39;key&#39;)</span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line">     A   B key   C   D</span><br><span class="line"># 0  A0  B0  K0  C0  D0</span><br><span class="line"># 1  A1  B1  K1  C1  D1</span><br><span class="line"># 2  A2  B2  K2  C2  D2</span><br><span class="line"># 3  A3  B3  K3  C3  D3</span><br></pre></td></tr></table></figure>



<h5 id="依据两组key合并"><a href="#依据两组key合并" class="headerlink" title="依据两组key合并"></a>依据两组key合并</h5><p>合并时有4种方法<code>how = [&#39;left&#39;, &#39;right&#39;, &#39;outer&#39;, &#39;inner&#39;]</code>，预设值<code>how=&#39;inner&#39;</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">#定义资料集并打印出</span><br><span class="line">left &#x3D; pd.DataFrame(&#123;&#39;key1&#39;: [&#39;K0&#39;, &#39;K0&#39;, &#39;K1&#39;, &#39;K2&#39;],</span><br><span class="line">                      &#39;key2&#39;: [&#39;K0&#39;, &#39;K1&#39;, &#39;K0&#39;, &#39;K1&#39;],</span><br><span class="line">                      &#39;A&#39;: [&#39;A0&#39;, &#39;A1&#39;, &#39;A2&#39;, &#39;A3&#39;],</span><br><span class="line">                      &#39;B&#39;: [&#39;B0&#39;, &#39;B1&#39;, &#39;B2&#39;, &#39;B3&#39;]&#125;)</span><br><span class="line">right &#x3D; pd.DataFrame(&#123;&#39;key1&#39;: [&#39;K0&#39;, &#39;K1&#39;, &#39;K1&#39;, &#39;K2&#39;],</span><br><span class="line">                       &#39;key2&#39;: [&#39;K0&#39;, &#39;K0&#39;, &#39;K0&#39;, &#39;K0&#39;],</span><br><span class="line">                       &#39;C&#39;: [&#39;C0&#39;, &#39;C1&#39;, &#39;C2&#39;, &#39;C3&#39;],</span><br><span class="line">                       &#39;D&#39;: [&#39;D0&#39;, &#39;D1&#39;, &#39;D2&#39;, &#39;D3&#39;]&#125;)</span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line">#    A   B key1 key2</span><br><span class="line"># 0  A0  B0   K0   K0</span><br><span class="line"># 1  A1  B1   K0   K1</span><br><span class="line"># 2  A2  B2   K1   K0</span><br><span class="line"># 3  A3  B3   K2   K1</span><br><span class="line"></span><br><span class="line">print(right)</span><br><span class="line">#    C   D key1 key2</span><br><span class="line"># 0  C0  D0   K0   K0</span><br><span class="line"># 1  C1  D1   K1   K0</span><br><span class="line"># 2  C2  D2   K1   K0</span><br><span class="line"># 3  C3  D3   K2   K0</span><br><span class="line"></span><br><span class="line">#依据key1与key2 columns进行合并，并打印出四种结果[&#39;left&#39;, &#39;right&#39;, &#39;outer&#39;, &#39;inner&#39;]</span><br><span class="line">res &#x3D; pd.merge(left, right, on&#x3D;[&#39;key1&#39;, &#39;key2&#39;], how&#x3D;&#39;inner&#39;)</span><br><span class="line">print(res)</span><br><span class="line">#    A   B key1 key2   C   D</span><br><span class="line"># 0  A0  B0   K0   K0  C0  D0</span><br><span class="line"># 1  A2  B2   K1   K0  C1  D1</span><br><span class="line"># 2  A2  B2   K1   K0  C2  D2</span><br><span class="line"></span><br><span class="line">res &#x3D; pd.merge(left, right, on&#x3D;[&#39;key1&#39;, &#39;key2&#39;], how&#x3D;&#39;outer&#39;)</span><br><span class="line">print(res)</span><br><span class="line">#     A    B key1 key2    C    D</span><br><span class="line"># 0   A0   B0   K0   K0   C0   D0</span><br><span class="line"># 1   A1   B1   K0   K1  NaN  NaN</span><br><span class="line"># 2   A2   B2   K1   K0   C1   D1</span><br><span class="line"># 3   A2   B2   K1   K0   C2   D2</span><br><span class="line"># 4   A3   B3   K2   K1  NaN  NaN</span><br><span class="line"># 5  NaN  NaN   K2   K0   C3   D3</span><br><span class="line"></span><br><span class="line">res &#x3D; pd.merge(left, right, on&#x3D;[&#39;key1&#39;, &#39;key2&#39;], how&#x3D;&#39;left&#39;)</span><br><span class="line">print(res)</span><br><span class="line">#    A   B key1 key2    C    D</span><br><span class="line"># 0  A0  B0   K0   K0   C0   D0</span><br><span class="line"># 1  A1  B1   K0   K1  NaN  NaN</span><br><span class="line"># 2  A2  B2   K1   K0   C1   D1</span><br><span class="line"># 3  A2  B2   K1   K0   C2   D2</span><br><span class="line"># 4  A3  B3   K2   K1  NaN  NaN</span><br><span class="line"></span><br><span class="line">res &#x3D; pd.merge(left, right, on&#x3D;[&#39;key1&#39;, &#39;key2&#39;], how&#x3D;&#39;right&#39;)</span><br><span class="line">print(res)</span><br><span class="line">#     A    B key1 key2   C   D</span><br><span class="line"># 0   A0   B0   K0   K0  C0  D0</span><br><span class="line"># 1   A2   B2   K1   K0  C1  D1</span><br><span class="line"># 2   A2   B2   K1   K0  C2  D2</span><br><span class="line"># 3  NaN  NaN   K2   K0  C3  D3</span><br></pre></td></tr></table></figure>

<h5 id="Indicator"><a href="#Indicator" class="headerlink" title="Indicator"></a>Indicator</h5><p><code>indicator=True</code>会将合并的记录放在新的一列。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">#定义资料集并打印出</span><br><span class="line">df1 &#x3D; pd.DataFrame(&#123;&#39;col1&#39;:[0,1], &#39;col_left&#39;:[&#39;a&#39;,&#39;b&#39;]&#125;)</span><br><span class="line">df2 &#x3D; pd.DataFrame(&#123;&#39;col1&#39;:[1,2,2],&#39;col_right&#39;:[2,2,2]&#125;)</span><br><span class="line"></span><br><span class="line">print(df1)</span><br><span class="line">#   col1 col_left</span><br><span class="line"># 0     0        a</span><br><span class="line"># 1     1        b</span><br><span class="line"></span><br><span class="line">print(df2)</span><br><span class="line">#   col1  col_right</span><br><span class="line"># 0     1          2</span><br><span class="line"># 1     2          2</span><br><span class="line"># 2     2          2</span><br><span class="line"></span><br><span class="line"># 依据col1进行合并，并启用indicator&#x3D;True，最后打印出</span><br><span class="line">res &#x3D; pd.merge(df1, df2, on&#x3D;&#39;col1&#39;, how&#x3D;&#39;outer&#39;, indicator&#x3D;True)</span><br><span class="line">print(res)</span><br><span class="line">#   col1 col_left  col_right      _merge</span><br><span class="line"># 0   0.0        a        NaN   left_only</span><br><span class="line"># 1   1.0        b        2.0        both</span><br><span class="line"># 2   2.0      NaN        2.0  right_only</span><br><span class="line"># 3   2.0      NaN        2.0  right_only</span><br><span class="line"></span><br><span class="line"># 自定indicator column的名称，并打印出</span><br><span class="line">res &#x3D; pd.merge(df1, df2, on&#x3D;&#39;col1&#39;, how&#x3D;&#39;outer&#39;, indicator&#x3D;&#39;indicator_column&#39;)</span><br><span class="line">print(res)</span><br><span class="line">#   col1 col_left  col_right indicator_column</span><br><span class="line"># 0   0.0        a        NaN        left_only</span><br><span class="line"># 1   1.0        b        2.0             both</span><br><span class="line"># 2   2.0      NaN        2.0       right_only</span><br><span class="line"># 3   2.0      NaN        2.0       right_only</span><br></pre></td></tr></table></figure>

<h5 id="依据index合并"><a href="#依据index合并" class="headerlink" title="依据index合并"></a>依据index合并</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">#定义资料集并打印出</span><br><span class="line">left &#x3D; pd.DataFrame(&#123;&#39;A&#39;: [&#39;A0&#39;, &#39;A1&#39;, &#39;A2&#39;],</span><br><span class="line">                     &#39;B&#39;: [&#39;B0&#39;, &#39;B1&#39;, &#39;B2&#39;]&#125;,</span><br><span class="line">                     index&#x3D;[&#39;K0&#39;, &#39;K1&#39;, &#39;K2&#39;])</span><br><span class="line">right &#x3D; pd.DataFrame(&#123;&#39;C&#39;: [&#39;C0&#39;, &#39;C2&#39;, &#39;C3&#39;],</span><br><span class="line">                      &#39;D&#39;: [&#39;D0&#39;, &#39;D2&#39;, &#39;D3&#39;]&#125;,</span><br><span class="line">                     index&#x3D;[&#39;K0&#39;, &#39;K2&#39;, &#39;K3&#39;])</span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line">#     A   B</span><br><span class="line"># K0  A0  B0</span><br><span class="line"># K1  A1  B1</span><br><span class="line"># K2  A2  B2</span><br><span class="line"></span><br><span class="line">print(right)</span><br><span class="line">#     C   D</span><br><span class="line"># K0  C0  D0</span><br><span class="line"># K2  C2  D2</span><br><span class="line"># K3  C3  D3</span><br><span class="line"></span><br><span class="line">#依据左右资料集的index进行合并，how&#x3D;&#39;outer&#39;,并打印出</span><br><span class="line">res &#x3D; pd.merge(left, right, left_index&#x3D;True, right_index&#x3D;True, how&#x3D;&#39;outer&#39;)</span><br><span class="line">print(res)</span><br><span class="line">#      A    B    C    D</span><br><span class="line"># K0   A0   B0   C0   D0</span><br><span class="line"># K1   A1   B1  NaN  NaN</span><br><span class="line"># K2   A2   B2   C2   D2</span><br><span class="line"># K3  NaN  NaN   C3   D3</span><br><span class="line"></span><br><span class="line">#依据左右资料集的index进行合并，how&#x3D;&#39;inner&#39;,并打印出</span><br><span class="line">res &#x3D; pd.merge(left, right, left_index&#x3D;True, right_index&#x3D;True, how&#x3D;&#39;inner&#39;)</span><br><span class="line">print(res)</span><br><span class="line">#     A   B   C   D</span><br><span class="line"># K0  A0  B0  C0  D0</span><br><span class="line"># K2  A2  B2  C2  D2</span><br></pre></td></tr></table></figure>

<h5 id="解决overlapping的问题"><a href="#解决overlapping的问题" class="headerlink" title="解决overlapping的问题"></a>解决overlapping的问题</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">#定义资料集</span><br><span class="line">boys &#x3D; pd.DataFrame(&#123;&#39;k&#39;: [&#39;K0&#39;, &#39;K1&#39;, &#39;K2&#39;], &#39;age&#39;: [1, 2, 3]&#125;)</span><br><span class="line">girls &#x3D; pd.DataFrame(&#123;&#39;k&#39;: [&#39;K0&#39;, &#39;K0&#39;, &#39;K3&#39;], &#39;age&#39;: [4, 5, 6]&#125;)</span><br><span class="line"></span><br><span class="line">#使用suffixes解决overlapping的问题</span><br><span class="line">res &#x3D; pd.merge(boys, girls, on&#x3D;&#39;k&#39;, suffixes&#x3D;[&#39;_boy&#39;, &#39;_girl&#39;], how&#x3D;&#39;inner&#39;)</span><br><span class="line">print(res)</span><br><span class="line">#    age_boy   k  age_girl</span><br><span class="line"># 0        1  K0         4</span><br><span class="line"># 1        1  K0         5</span><br></pre></td></tr></table></figure>






<h4 id="八：Pandas-plot-出图"><a href="#八：Pandas-plot-出图" class="headerlink" title="八：Pandas plot 出图"></a>八：Pandas plot 出图</h4><p>学习资料:</p>
<ul>
<li><a href="https://github.com/MorvanZhou/tutorials/blob/master/numpy%26pandas/18_plot.py" target="_blank" rel="noopener">相关代码</a></li>
</ul>
<p>这次我们讲如何将数据可视化. 首先<code>import</code>我们需要用到的模块，除了 pandas，我们也需要使用 numpy 生成一些数据，这节里使用的 matplotlib 仅仅是用来 show 图片的, 即 <code>plt.show()</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br></pre></td></tr></table></figure>

<p>今天我们主要是学习如何 plot data</p>
<h5 id="创建一个Series"><a href="#创建一个Series" class="headerlink" title="创建一个Series"></a>创建一个Series</h5><p>这是一个线性的数据，我们随机生成1000个数据，<code>Series</code> 默认的 <code>index</code> 就是从0开始的整数，但是这里我显式赋值以便让大家看的更清楚</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 随机生成1000个数据</span><br><span class="line">data &#x3D; pd.Series(np.random.randn(1000),index&#x3D;np.arange(1000))</span><br><span class="line"> </span><br><span class="line"># 为了方便观看效果, 我们累加这个数据</span><br><span class="line">data.cumsum()</span><br><span class="line"></span><br><span class="line"># pandas 数据可以直接观看其可视化形式</span><br><span class="line">data.plot()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>就这么简单，熟悉 matplotlib 的朋友知道如果需要<code>plot</code>一个数据，我们可以使用 <code>plt.plot(x=, y=)</code>，把<code>x</code>,<code>y</code>的数据作为参数存进去，但是<code>data</code>本来就是一个数据，所以我们可以直接<code>plot</code>。 生成的结果就是下图：</p>
<p><a href="https://morvanzhou.github.io/static/results/np-pd/3-8-1.png" target="_blank" rel="noopener"><img src="/2019/11/24/python_numpy_pandas/3-8-1.png" alt="Pandas plot 出图"></a></p>
<h5 id="Dataframe-可视化"><a href="#Dataframe-可视化" class="headerlink" title="Dataframe 可视化"></a>Dataframe 可视化</h5><p>我们生成一个1000*4 的<code>DataFrame</code>，并对他们累加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &#x3D; pd.DataFrame(</span><br><span class="line">    np.random.randn(1000,4),</span><br><span class="line">    index&#x3D;np.arange(1000),</span><br><span class="line">    columns&#x3D;list(&quot;ABCD&quot;)</span><br><span class="line">    )</span><br><span class="line">data.cumsum()</span><br><span class="line">data.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><a href="https://morvanzhou.github.io/static/results/np-pd/3-8-2.png" target="_blank" rel="noopener"><img src="/2019/11/24/python_numpy_pandas/3-8-2.png" alt="Pandas plot 出图"></a></p>
<p>这个就是我们刚刚生成的4个<code>column</code>的数据，因为有4组数据，所以4组数据会分别<code>plot</code>出来。<code>plot</code> 可以指定很多参数，具体的用法大家可以自己查一下<a href="http://pandas.pydata.org/pandas-docs/version/0.18.1/visualization.html" target="_blank" rel="noopener">这里</a></p>
<p>除了<code>plot</code>，我经常会用到还有<code>scatter</code>，这个会显示散点图，首先给大家说一下在 pandas 中有多少种方法</p>
<ul>
<li>bar</li>
<li>hist</li>
<li>box</li>
<li>kde</li>
<li>area</li>
<li>scatter</li>
<li>hexbin</li>
</ul>
<p>但是我们今天不会一一介绍，主要说一下 <code>plot</code> 和 <code>scatter</code>. 因为<code>scatter</code>只有<code>x</code>，<code>y</code>两个属性，我们我们就可以分别给<code>x</code>, <code>y</code>指定数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ax &#x3D; data.plot.scatter(x&#x3D;&#39;A&#39;,y&#x3D;&#39;B&#39;,color&#x3D;&#39;DarkBlue&#39;,label&#x3D;&#39;Class1&#39;)</span><br></pre></td></tr></table></figure>

<p>然后我们在可以再画一个在同一个<code>ax</code>上面，选择不一样的数据列，不同的 <code>color</code> 和 <code>label</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将之下这个 data 画在上一个 ax 上面</span><br><span class="line">data.plot.scatter(x&#x3D;&#39;A&#39;,y&#x3D;&#39;C&#39;,color&#x3D;&#39;LightGreen&#39;,label&#x3D;&#39;Class2&#39;,ax&#x3D;ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>下面就是我<code>plot</code>出来的图片</p>
<p><a href="https://morvanzhou.github.io/static/results/np-pd/3-8-3.png" target="_blank" rel="noopener"><img src="/2019/11/24/python_numpy_pandas/3-8-3.png" alt="Pandas plot 出图"></a></p>
<p>这就是我们今天讲的两种呈现方式，一种是线性的方式，一种是散点图。</p>
<h3 id="为什么用-Numpy-还是慢-你用对了吗"><a href="#为什么用-Numpy-还是慢-你用对了吗" class="headerlink" title="为什么用 Numpy 还是慢, 你用对了吗?"></a>为什么用 Numpy 还是慢, 你用对了吗?</h3><p><strong>这原本是我写在知乎上的一篇文章, 觉得还是转到这个网站上作为一个教程比较好</strong></p>
<p>最近在写代码, 编一个 Python 模拟器, 做 simulation, 好不容易用传说中 Python 里速度最快的计算模块 “Numpy” 的写好了, 结果运行起来, 出奇的慢! 因为一次simulation要一个小时, 要不停测试, 所以自己受不了了.. 首先, 我的脑海中的问题, 渐渐浮现出来.</p>
<ul>
<li>我知道 Pandas 要比 Numpy 慢, 所以我尽量避免用 Pandas. 但是 Numpy (速度怪兽), 为什么还是这么慢?</li>
</ul>
<p>带有写代码洁癖的我好好给 google 了一番. 第一个出现在我眼前的就是这个文章, <a href="http://link.zhihu.com/?target=http%3A//ipython-books.github.io/featured-01/">Getting the Best Performance out of NumPy</a>. 所以我也将自己从这个文章中学到的诀窍分享给大家, 并补充一些内容.</p>
<h5 id="为什么用-Numpy"><a href="#为什么用-Numpy" class="headerlink" title="为什么用 Numpy?"></a>为什么用 Numpy?</h5><p>我们都知道, Python 是慢的, 简单来说, 因为 Python 执行你代码的时候会执行很多复杂的 “check” 功能, 比如当你赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b&#x3D;1; a&#x3D;b&#x2F;0.5</span><br></pre></td></tr></table></figure>

<p>这个运算看似简单, 但是在计算机内部, b 首先要从一个整数 <code>integer</code> 转换成浮点数 <code>float</code>, 才能进行后面的 <code>b/0.5</code>, 因为得到的要是一个小数. 还有很多其他的原因和详细说明 (比如 Python 对内存的调用) 在这里能够找到: <a href="http://link.zhihu.com/?target=https%3A//jakevdp.github.io/blog/2014/05/09/why-python-is-slow/">Why Python is Slow: Looking Under the Hood</a></p>
<p>提到 Numpy, 它就是一个 Python 的救星. 能把简单好用的 Python 和高性能的 C 语言合并在一起. 当你调用 Numpy 功能的时候, 他其实调用了很多 C 语言而不是纯 Python. 这就是为什么大家都爱用 Numpy 的原因.</p>
<h5 id="创建-Numpy-Array-的结构"><a href="#创建-Numpy-Array-的结构" class="headerlink" title="创建 Numpy Array 的结构"></a>创建 Numpy Array 的结构</h5><p>其实 Numpy 就是 C 的逻辑, 创建存储容器 “Array” 的时候是寻找内存上的一连串区域来存放, 而 Python 存放的时候则是不连续的区域, 这使得 Python 在索引这个容器里的数据时不是那么有效率. Numpy 只需要再这块固定的连续区域前后走走就能不费吹灰之力拿到数据. 下图是来自 <a href="http://link.zhihu.com/?target=https%3A//jakevdp.github.io/blog/2014/05/09/why-python-is-slow/">Why Python is Slow: Looking Under the Hood</a>, 他很好的解释了这一切.</p>
<p><a href="https://morvanzhou.github.io/static/results/np-pd/4-1-2.png" target="_blank" rel="noopener"><img src="https://morvanzhou.github.io/static/results/np-pd/4-1-2.png" alt="为什么用 Numpy 还是慢, 你用对了吗?"></a></p>
<p>在运用 Numpy 的时候, 我们通常不是用一个一维 Array 来存放数据, 而是用二维或者三维的块来存放 (说出了学机器学习的朋友们的心声~).</p>
<p><a href="https://morvanzhou.github.io/static/results/np-pd/4-1-3.png" target="_blank" rel="noopener"><img src="https://morvanzhou.github.io/static/results/np-pd/4-1-3.png" alt="为什么用 Numpy 还是慢, 你用对了吗?"></a></p>
<p>因为 Numpy 快速的矩阵相乘运算, 能将乘法运算分配到计算机中的多个核, 让运算并行. 这年头, 我们什么都想 <a href="https://morvanzhou.github.io/tutorials/python-basic/threading/" target="_blank" rel="noopener">多线程</a>/ <a href="https://morvanzhou.github.io/tutorials/python-basic/multiprocessing/" target="_blank" rel="noopener">多进程</a> (再次说出了机器学习同学们的心声~). 这也是 Numpy 为什么受人喜欢的一个原因. 这种并行运算大大加速了运算速度.</p>
<p>那么对于这种天天要用到的2D/3D Array, 我们通常都不会想着他是怎么来的. 因为按照我们正常人的想法, 这矩阵就是矩阵, 没什么深度的东西呀. 不过这可不然! 要不然我也不会写这篇分享了. 重点来了, 不管是1D/2D/3D 的 Array, 从根本上, 它都是一个 1D array!</p>
<p><a href="https://morvanzhou.github.io/static/results/np-pd/4-1-4.png" target="_blank" rel="noopener"><img src="https://morvanzhou.github.io/static/results/np-pd/4-1-4.png" alt="为什么用 Numpy 还是慢, 你用对了吗?"></a></p>
<p><a href="http://link.zhihu.com/?target=http%3A//ipython-books.github.io/featured-01/">这篇 Blog</a>的图显示. 在我们看来的 2D Array, 如果追溯到计算机内存里, 它其实是储存在一个连续空间上的. 而对于这个连续空间, 我们如果创建 Array 的方式不同, 在这个连续空间上的排列顺序也有不同. 这将影响之后所有的事情! 我们后面会用 Python 进行运算时间测试.</p>
<p>在 Numpy 中, 创建 2D Array 的默认方式是 “C-type” 以 row 为主在内存中排列, 而如果是 “Fortran” 的方式创建的, 就是以 column 为主在内存中排列.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">col_major &#x3D; np.zeros((10,10), order&#x3D;&#39;C&#39;)    # C-type</span><br><span class="line">row_major &#x3D; np.zeros((10,10), order&#x3D;&#39;F&#39;)    # Fortran</span><br></pre></td></tr></table></figure>



<h5 id="在-Axis-上的动作"><a href="#在-Axis-上的动作" class="headerlink" title="在 Axis 上的动作"></a>在 Axis 上的动作</h5><p>当你的计算中涉及合并矩阵, 不同形式的矩阵创建方式会给你不同的时间效果. 因为在 Numpy 中的矩阵合并等, 都是发生在一维空间里, ! 不是我们想象的二维空间中!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.zeros((200, 200), order&#x3D;&#39;C&#39;)</span><br><span class="line">b &#x3D; np.zeros((200, 200), order&#x3D;&#39;F&#39;)</span><br><span class="line">N &#x3D; 9999</span><br><span class="line"></span><br><span class="line">def f1(a):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        np.concatenate((a, a), axis&#x3D;0)</span><br><span class="line"></span><br><span class="line">def f2(b):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        np.concatenate((b, b), axis&#x3D;0)</span><br><span class="line"></span><br><span class="line">t0 &#x3D; time.time()</span><br><span class="line">f1(a)</span><br><span class="line">t1 &#x3D; time.time()</span><br><span class="line">f2(b)</span><br><span class="line">t2 &#x3D; time.time()</span><br><span class="line"></span><br><span class="line">print((t1-t0)&#x2F;N)     # 0.000040</span><br><span class="line">print((t2-t1)&#x2F;N)     # 0.000070</span><br></pre></td></tr></table></figure>

<p>从上面的那张图, 可以想到, row 为主的存储方式, 如果在 row 的方向上合并矩阵, 将会更快. 因为只要我们将思维放在 1D array 那, 直接再加一个 row 放在1D array 后面就好了, 所以在上面的测试中, <code>f1</code> 速度要更快. 但是在以 column 为主的系统中, 往 1D array 后面加 row 的规则变复杂了, 消耗的时间也变长. 如果以 <code>axis=1</code> 的方式合并, “F” 方式的 <code>f2</code> 将会比 “C” 方式的 <code>f1</code> 更好.</p>
<p>还有一个要提的事情, 为了图方便, 有时候我会直接使用 <code>np.stack</code> 来代替 <code>np.concatenate</code>, 因为这样可以少写一点代码, 不过使用上面的形式, 通过上面的测试发现是这样. 所以之后为了速度, 我推荐还是尽量使用 <code>np.concatenate</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.vstack((a,a))                # 0.000063</span><br><span class="line">np.concatenate((a,a), axis&#x3D;0)   # 0.000040</span><br></pre></td></tr></table></figure>

<p>或者有时候在某个 axis 上进行操作, 比如对上面用 “C-type” 创建的 <code>a</code> 矩阵选点:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">indices &#x3D; np.random.randint(0, 100, size&#x3D;10, dtype&#x3D;np.int32)</span><br><span class="line">a[indices, :]     # 0.000003</span><br><span class="line">a[:, indices]     # 0.000006</span><br></pre></td></tr></table></figure>

<p>因为 <code>a</code> 是用 row 为主的形式储存, 所以在 row 上面选数据要比在 column 上选快很多! 对于其他的 axis 的操作, 结果也类似. 所以你现在懂了吧, 看自己要在哪个 axis 上动的手脚多, 然后再创建合适于自己的矩阵形式 (“C-type”/”Fortran”).</p>
<h5 id="copy慢-view快"><a href="#copy慢-view快" class="headerlink" title="copy慢 view快"></a>copy慢 view快</h5><p>在 Numpy 中, 有两个很重要的概念, <code>copy</code> 和 <code>view</code>. <code>copy</code> 顾名思义, 会将数据 copy 出来存放在内存中另一个地方, 而 <code>view</code> 则是不 copy 数据, 直接取源数据的索引部分. 下图来自 <a href="http://link.zhihu.com/?target=https%3A//www.dataquest.io/blog/settingwithcopywarning/">Understanding SettingwithCopyWarning in pandas</a></p>
<p><a href="https://morvanzhou.github.io/static/results/np-pd/4-1-5.png" target="_blank" rel="noopener"><img src="https://morvanzhou.github.io/static/results/np-pd/4-1-5.png" alt="为什么用 Numpy 还是慢, 你用对了吗?"></a></p>
<p>上面说的是什么意思呢? 我们直接看代码.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange(1, 7).reshape((3,2))</span><br><span class="line">a_view &#x3D; a[:2]</span><br><span class="line">a_copy &#x3D; a[:2].copy()</span><br><span class="line"></span><br><span class="line">a_copy[1,1] &#x3D; 0</span><br><span class="line">print(a)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]</span><br><span class="line"> [5 6]]</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">a_view[1,1] &#x3D; 0</span><br><span class="line">print(a)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 0]</span><br><span class="line"> [5 6]]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>简单说, <code>a_view</code> 的东西全部都是 <code>a</code> 的东西, 动 <code>a_view</code> 的任何地方, <code>a</code> 都会被动到, 因为他们在内存中的位置是一模一样的, 本质上就是自己. 而 <code>a_copy</code> 则是将 <code>a</code> copy 了一份, 然后把 <code>a_copy</code> 放在内存中的另外的地方, 这样改变 <code>a_copy</code>, <code>a</code> 是不会被改变的.</p>
<p>那为什么要提这点呢? 因为 view 不会复制东西, 速度快! 我们来测试一下速度. 下面的例子中 <code>a*=2</code> 就是将这个 view 给赋值了, 和 <code>a[:] *= 2</code> 一个意思, 从头到尾没有创建新的东西. 而 <code>b = 2*b</code> 中, 我们将 <code>b</code> 赋值给另外一个新建的 <code>b</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.zeros((1000, 1000))</span><br><span class="line">b &#x3D; np.zeros((1000, 1000))</span><br><span class="line">N &#x3D; 9999</span><br><span class="line"></span><br><span class="line">def f1(a):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        a *&#x3D; 2           # same as a[:] *&#x3D; 2</span><br><span class="line"></span><br><span class="line">def f2(b):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        b &#x3D; 2*b</span><br><span class="line"></span><br><span class="line">print(&#39;%f&#39; % ((t1-t0)&#x2F;N))     # f1: 0.000837</span><br><span class="line">print(&#39;%f&#39; % ((t2-t1)&#x2F;N))     # f2: 0.001346</span><br></pre></td></tr></table></figure>

<p>对于 view 还有一点要提, 你是不是偶尔有时候要把一个矩阵展平, 用到 <code>np.flatten()</code> 或者 <code>np.ravel()</code>. 他俩是不同的! ravel 返回的是一个 view (谢谢知乎上评论的提醒, <a href="http://link.zhihu.com/?target=https%3A//docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html">官方说</a>如果用 ravel, 需要 copy 的时候才会被 copy , 我想这个时候可能是把 ravel 里面 order 转换的时候, 如 ‘C-type’ -&gt; ‘Fortran’), 而 flatten 返回的总是一个 copy. 现在你知道谁在拖你的后腿了吧! 下面的测试证明, 相比于 flatten, ravel 是神速.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f1(a):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        a.flatten()</span><br><span class="line"></span><br><span class="line">def f2(b):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        b.ravel()</span><br><span class="line"></span><br><span class="line">print(&#39;%f&#39; % ((t1-t0)&#x2F;N))    # 0.001059</span><br><span class="line">print(&#39;%f&#39; % ((t2-t1)&#x2F;N))    # 0.000000</span><br></pre></td></tr></table></figure>

<h5 id="选择数据"><a href="#选择数据" class="headerlink" title="选择数据"></a>选择数据</h5><p>选择数据的时候, 我们常会用到 view 或者 copy 的形式. 我们知道了, 如果能用到 view 的, 我们就尽量用 view, 避免 copy 数据. 那什么时候会是 view 呢? 下面举例的都是 view 的方式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a_view1 &#x3D; a[1:2, 3:6]    # 切片 slice</span><br><span class="line">a_view2 &#x3D; a[:100]        # 同上</span><br><span class="line">a_view3 &#x3D; a[::2]         # 跳步</span><br><span class="line">a_view4 &#x3D; a.ravel()      # 上面提到了</span><br><span class="line">...                      # 我只能想到这些, 如果还有请大家在评论里提出</span><br></pre></td></tr></table></figure>

<p>那哪些操作我们又会变成 copy 呢?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a_copy1 &#x3D; a[[1,4,6], [2,4,6]]   # 用 index 选</span><br><span class="line">a_copy2 &#x3D; a[[True, True], [False, True]]  # 用 mask</span><br><span class="line">a_copy3 &#x3D; a[[1,2], :]        # 虽然 1,2 的确连在一起了, 但是他们确实是 copy</span><br><span class="line">a_copy4 &#x3D; a[a[1,:] !&#x3D; 0, :]  # fancy indexing</span><br><span class="line">a_copy5 &#x3D; a[np.isnan(a), :]  # fancy indexing</span><br><span class="line">...                          # 我只能想到这些, 如果还有请大家在评论里提出</span><br></pre></td></tr></table></figure>

<p>Numpy 给了我们很多很自由的方式选择数据, 这些虽然都很方便, 但是如果你可以尽量避免这些操作, 你的速度可以飞起来.</p>
<p>在上面提到的 <a href="http://link.zhihu.com/?target=http%3A//ipython-books.github.io/featured-01/">blog</a> 里面, 他提到了, 如果你还是喜欢这种 fancy indexing 的形式, 我们也是可以对它加点速的. 那个 blog 中指出了两种方法</p>
<p>1.使用 <code>np.take()</code>, 替代用 index 选数据的方法.</p>
<p>上面提到了如果用index 来选数据, 像 <code>a_copy1 = a[[1,4,6], [2,4,6]]</code>, 用 take 在大部分情况中会比这样的 <code>a_copy1</code> 要快.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.random.rand(1000000, 10)</span><br><span class="line">N &#x3D; 99</span><br><span class="line">indices &#x3D; np.random.randint(0, 1000000, size&#x3D;10000)</span><br><span class="line"></span><br><span class="line">def f1(a):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        _ &#x3D; np.take(a, indices, axis&#x3D;0)</span><br><span class="line"></span><br><span class="line">def f2(b):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        _ &#x3D; b[indices]</span><br><span class="line"></span><br><span class="line">print(&#39;%f&#39; % ((t1-t0)&#x2F;N))    # 0.000393</span><br><span class="line">print(&#39;%f&#39; % ((t2-t1)&#x2F;N))    # 0.000569</span><br></pre></td></tr></table></figure>

<p>2.使用 <code>np.compress()</code>, 替代用 mask 选数据的方法.</p>
<p>上面的 <code>a_copy2 = a[[True, True], [False, True]]</code> 这种就是用 TRUE, FALSE 来选择数据的. 测试如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mask &#x3D; a[:, 0] &lt; 0.5</span><br><span class="line">def f1(a):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        _ &#x3D; np.compress(mask, a, axis&#x3D;0)</span><br><span class="line"></span><br><span class="line">def f2(b):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        _ &#x3D; b[mask]</span><br><span class="line"></span><br><span class="line">print(&#39;%f&#39; % ((t1-t0)&#x2F;N))    # 0.028109</span><br><span class="line">print(&#39;%f&#39; % ((t2-t1)&#x2F;N))    # 0.031013</span><br></pre></td></tr></table></figure>



<h5 id="非常有用的-out-参数"><a href="#非常有用的-out-参数" class="headerlink" title="非常有用的 out 参数"></a>非常有用的 out 参数</h5><p>不深入了解 numpy 的朋友, 应该会直接忽略很多功能中的这个 out 参数 (之前我从来没用过). 不过当我深入了解了以后, 发现他非常有用! 比如下面两个其实在功能上是没差的, 不过运算时间上有差, 我觉得可能是 <code>a=a+1</code> 要先转换成 <code>np.add()</code> 这种形式再运算, 所以前者要用更久一点的时间.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; a + 1         # 0.035230</span><br><span class="line">a &#x3D; np.add(a, 1)  # 0.032738</span><br></pre></td></tr></table></figure>

<p>如果是上面那样, 我们就会触发之前提到的 copy 原则, 这两个被赋值的 a, 都是原来 a 的一个 copy, 并不是 a 的 view. 但是在功能里面有一个 out 参数, 让我们不必要重新创建一个 a. 所以下面两个是一样的功能, 都不会创建另一个 copy. 不过可能是上面提到的那个原因, 这里的运算时间也有差.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a +&#x3D; 1                 # 0.011219</span><br><span class="line">np.add(a, 1, out&#x3D;a)    # 0.008843</span><br></pre></td></tr></table></figure>

<p>带有 out 的 numpy 功能都在这里:<a href="http://link.zhihu.com/?target=https%3A//docs.scipy.org/doc/numpy/reference/ufuncs.html%23available-ufuncs">Universal functions</a>. 所以只要是已经存在了一个 placeholder (比如 a), 我们就没有必要去再创建一个, 用 out 方便又有效.</p>
<h5 id="给数据一个名字"><a href="#给数据一个名字" class="headerlink" title="给数据一个名字"></a>给数据一个名字</h5><p>我喜欢用 pandas, 因为 pandas 能让你给数据命名, 用名字来做 index. 在数据类型很多的时候, 名字总是比 index 好记太多了, 也好用太多了. 但是 pandas 的确比 numpy 慢. 好在我们还是有途径可以实现用名字来索引. 这就是 structured array. 下面 a/b 的结构是一样的, 只是一个是 numpy 一个是 pandas.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.zeros(3, dtype&#x3D;[(&#39;foo&#39;, np.int32), (&#39;bar&#39;, np.float16)])</span><br><span class="line">b &#x3D; pd.DataFrame(np.zeros((3, 2), dtype&#x3D;np.int32), columns&#x3D;[&#39;foo&#39;, &#39;bar&#39;])</span><br><span class="line">b[&#39;bar&#39;] &#x3D; b[&#39;bar&#39;].astype(np.float16)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># a</span><br><span class="line">array([(0,  0.), (0,  0.), (0,  0.)],</span><br><span class="line">      dtype&#x3D;[(&#39;foo&#39;, &#39;&lt;i4&#39;), (&#39;bar&#39;, &#39;&lt;f2&#39;)])</span><br><span class="line"></span><br><span class="line"># b</span><br><span class="line">   foo  bar</span><br><span class="line">0    0  0.0</span><br><span class="line">1    0  0.0</span><br><span class="line">2    0  0.0</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def f1(a):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        a[&#39;bar&#39;] *&#x3D; a[&#39;foo&#39;]</span><br><span class="line"></span><br><span class="line">def f2(b):</span><br><span class="line">    for _ in range(N):</span><br><span class="line">        b[&#39;bar&#39;] *&#x3D; b[&#39;foo&#39;]</span><br><span class="line"></span><br><span class="line">print(&#39;%f&#39; % ((t1-t0)&#x2F;N))    # 0.000003</span><br><span class="line">print(&#39;%f&#39; % ((t2-t1)&#x2F;N))    # 0.000508</span><br></pre></td></tr></table></figure>

<p>可以看出来, numpy 明显比 pandas 快很多. 如果需要使用到不同数据形式, numpy 也是可以胜任的, 并且在还保持了快速的计算速度. 至于 pandas 为什么比 numpy 慢, 因为 pandas data 里面还有很多七七八八的数据, 记录着这个 data 的种种其他的特征. 这里还有更全面的对比: <a href="http://link.zhihu.com/?target=http%3A//gouthamanbalaraman.com/blog/numpy-vs-pandas-comparison.html">Numpy Vs Pandas Performance Comparison</a></p>
<p>如果大家还有其他的小技巧或者是速度大比拼, 欢迎在下面讨论. (一切为了速度~)</p>
<p>最后, 如果你对机器学习感兴趣, <a href="https://morvanzhou.github.io/tutorials/machine-learning/" target="_blank" rel="noopener">这里</a>有很多厉害的短片形式机器学习方法介绍和很多机器学习的 Python 实践教程, 让你可以用业余时间秒懂机器学习.</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python语言学习</tag>
        <tag>numpy</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>肿瘤蛋白质组学学习资料</title>
    <url>/2019/12/17/proteomics/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247490521&idx=1&sn=5969fff933a593031263140658a49580&chksm=9b485b62ac3fd2749773f50b61dc6cc8f55d26d13695c1359c236d7a4599a229dd5ab0fc78a5&scene=21#wechat_redirect" target="_blank" rel="noopener">蛋白质组学第1期-认识基础概念</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247490521&idx=2&sn=9b4e827ef29f429b4ac36c853d24f0d1&chksm=9b485b62ac3fd2748d13b032e6c24fa856ae7c094ae423682eaca5baba76fcb5fc484b37e00d&scene=21#wechat_redirect" target="_blank" rel="noopener">蛋白质组学第2期-认识蛋白质组学原始数据</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247490564&idx=1&sn=fd054d41eabebb65a0774510ca9662ad&chksm=9b485cbfac3fd5a9b09d9b326b939a0597dd1d89490f202f0b48f8850abfac3c5006de1ed2b2&scene=21#wechat_redirect" target="_blank" rel="noopener">蛋白质组学第3期-蛋白质组学的三大元素</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247490571&idx=1&sn=c6e9094703bce3592296d95452fb3994&chksm=9b485cb0ac3fd5a6d80285ea8c587c514011b55360a276b44d9f75a5893c2065b3333361af9a&scene=21#wechat_redirect" target="_blank" rel="noopener">蛋白质组学第4期 文章搜库过程复现</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247490667&idx=1&sn=fd6eafe8d331c3f0775e5f4daf6f3853&chksm=9b485cd0ac3fd5c67ff8b2435b6c972ceab39eff94a4a104b128f7f2ac01e028a86f23c112a8&scene=21#wechat_redirect" target="_blank" rel="noopener">蛋白质组学第5期搜库软件之 MaxQuant 再介绍</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247490674&idx=1&sn=440b68a92007a5fdcf441f28c5cb20cd&chksm=9b485cc9ac3fd5df18380dbe4264d37b0e97d6f6781795948fdc60f671837eaa41fe049b210e&scene=21#wechat_redirect" target="_blank" rel="noopener">蛋白质组学第6期 搜库软件之 MaxQuant 结果数据介绍</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247490818&idx=2&sn=2b16285e84893fbca47768ac99b3164e&chksm=9b485db9ac3fd4af4562f112320c66c6badaf9f419fc4a629052065e48baebbfd6545b1410f5&token=925692667&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">蛋白质组学第7期 复现文章数据- 预处理之Perseus 的使用</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247490826&idx=2&sn=08656fef45992122e946519ba18749af&chksm=9b485db1ac3fd4a737a2b9f5afce551f53435fbc4f143ba578076a8f81a43e9c94aeb3f43f76&token=925692667&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">蛋白质组学第8期 文章复现之数据处理</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247491047&idx=1&sn=550c3c9a6ff45ac88a46516eaa1ca708&chksm=9b485d5cac3fd44acd78cf940d1eacf094d407f2458ec061ee98f9273b4eddb4366a84a150ee&scene=21#wechat_redirect" target="_blank" rel="noopener">蛋白质组学第9期 文章数据分析之差异蛋白筛选和功能分析</a> </li>
<li><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1576581661&ver=2040&signature=tUt1QEQsO54IcxwPxR1GhlhEhJPwQ8acCJRzCgxH-Ffx*9yo70RUDZBJxknb0q1M7sTp3zEBcYABZATEgwA-KFVkLtp-h3ip8Qmg7J6lYnp4sI2k4vdZKNaNgRGIv6s2&new=1" target="_blank" rel="noopener">蛋白质组学第10期 定量方法介绍</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>proteomics</category>
      </categories>
      <tags>
        <tag>蛋白质组学</tag>
      </tags>
  </entry>
  <entry>
    <title>RNA m6A methylation regulates the epithelial mesenchymal transition of cancer cells and translation of Snail</title>
    <url>/2019/12/19/reading_note_m6A/</url>
    <content><![CDATA[<h2 id="RNA-m6A-methylation-regulates-the-epithelial-mesenchymal-transition-of-cancer-cells-and-translation-of-Snail"><a href="#RNA-m6A-methylation-regulates-the-epithelial-mesenchymal-transition-of-cancer-cells-and-translation-of-Snail" class="headerlink" title="RNA m6A methylation regulates the epithelial mesenchymal transition of cancer cells and translation of Snail"></a>RNA m6A methylation regulates the epithelial mesenchymal transition of cancer cells and translation of Snail</h2><p>几个知识点：</p>
<ol>
<li><p>writers: Methyltransferase-like 3 (METTL3), METTL14, and Wilm’s tumor-1-associated protein (WTAP) have been proved to act as m6A methyltransferases (“writers”) in mammalian cells </p>
</li>
<li><p>readers: m6A-binding proteins with YTH domain, including cytoplasmic protein YTHDF1, YTHDF2, YTHDF3, and nuclear protein YTHDC1, have been identified to be the “readers” of m6A and modulate mRNA stability and translation to mediate downstream effects.</p>
</li>
<li><p>m6A demethylase, ALKBH5 </p>
</li>
</ol>
<p>几种药物的使用</p>
<ol>
<li><p>actinomycin D : Act-D, 抑制转录</p>
</li>
<li><p>MG132: 抑制蛋白酶体的活性，抑制蛋白质的降解</p>
</li>
<li><p>CHX：放线菌酮，抑制蛋白质的翻译。</p>
</li>
</ol>
<p><img src="/2019/12/19/reading_note_m6A/1576760902675.png" alt="1576760902675"></p>
<p>TGF-β处理细胞可以诱导EMT，<strong>补充材料</strong>证明可TGF-β确实可以增加EMT，细胞功能实验和FN1 and CDH1的mRNA qPCR验证。EMT marker WB。</p>
<p>a: LC–MS/MS assay.  TGF-β处理后m6A比例增多.</p>
<p>This was further confirmed by the results obtained in dot-blot analysis</p>
<p><img src="/2019/12/19/reading_note_m6A/1576761297331.png" alt="1576761297331"></p>
<p>Mettl3Mut/- HeLa cells (Supplementary Fig. 2C) generated in our previous study35 by using the CRISPR/Cas9 editing system according to the published protocol35,36. </p>
<p><strong>CDH1 (E-Cad) mRNA</strong> </p>
<p><img src="/2019/12/19/reading_note_m6A/1576764282685.png" alt="1576764282685"></p>
<p>ribosome profiling ：</p>
<p>RNA fractions: </p>
<ol>
<li><p>non-translating fraction (&lt; 40 S), </p>
</li>
<li><p>translation initiation fraction (including 40S ribosomes, 60S ribosomes, 80S monosomes, and &lt; 80S) </p>
</li>
<li><p>translation active polysomes (&gt; 80S) .</p>
</li>
</ol>
<p><img src="/2019/12/19/reading_note_m6A/1576764643127.png" alt="1576764643127"></p>
<p>Another identified m6A demethylase, ALKBH5 </p>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>m6A</tag>
      </tags>
  </entry>
  <entry>
    <title>python_生信分析</title>
    <url>/2019/11/24/python/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim 1.txt</span><br><span class="line">:wq  ##Esc+ ：wq保存退出</span><br><span class="line">python3 # 打开python3</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">'./1.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">  <span class="keyword">print</span> (i)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'./1.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">   <span class="keyword">print</span> (line)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><img src="/2019/11/24/python/python%5C1555294324345.png" alt="1"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">'./2.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./1.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> imput_f:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> imput_f:</span><br><span class="line">   line = line.strip()</span><br><span class="line">   result= int(line)+int(line)</span><br><span class="line">   f.write(str(result)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">f.close()![<span class="number">1555294324345</span>](python/<span class="number">1555294324345.</span>png)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/python/1555294295586.png" alt="1555294295586"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output_file = open(<span class="string">'./2.txt'</span>,<span class="string">'a'</span>)  <span class="comment">## 附加内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./1.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> imput_f:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> imput_f:</span><br><span class="line">   line = line.strip()</span><br><span class="line">   result= int(line)+int(line)</span><br><span class="line">   output_file.write(str(result)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output_file.close()</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/python/1555294990143.png" alt="1555294990143"></p>
<blockquote>
<p>完成探索人类基因组GC含量与gene密度的关系；</p>
<p>提示：</p>
<p>1.将染色体成分1Mb大小的bin统计GC含量；</p>
<p>2.将染色体分为1Mb大小的bin统计gene的密度；</p>
<p>3.使用R将这两者用散点图进行绘图；</p>
<p>4.使用R的线性回归函数lm()进行回归；</p>
<p>5.R回归部分，参考资料</p>
<p>blog.fens.me/r-linear-regression/</p>
</blockquote>
<p><a href="https://github.com/menghaowei" target="_blank" rel="noopener">https://github.com/menghaowei</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(imput)</span>:</span></span><br><span class="line">     <span class="keyword">if</span> imput &gt;= <span class="number">0</span>:</span><br><span class="line">         <span class="keyword">return</span> imput</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">return</span> -imput</span><br><span class="line">        </span><br><span class="line">my_abs(<span class="number">-10</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>作业 </p>
<p>人类的线粒体长度大约为16.7Kb，请读取人类线粒体参考基因组序列信息（fasta格式），统计各种碱基的数量以及人类线粒体参考基因组的总长度。</p>
</blockquote>
<h3 id="编程作业"><a href="#编程作业" class="headerlink" title="编程作业"></a>编程作业</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:UTF-8 _*_</span></span><br><span class="line"><span class="comment">### 保证中文不报错pycharm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">选取参考基因组hg38作为测试数据1000-1300行 n 和 p是同时出现的</span><br><span class="line">cat ~/reference/UCSC/hg38/hg38.fa| sed -n '1000,1300p' &gt;&gt; ~/project/python/t.txt</span><br><span class="line">cd - # 回到上一个目录</span><br><span class="line">python3</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/python/1555306718214.png" alt="1555306718214"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chrM_genome = <span class="string">''</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./t.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> imput_f:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> imput_f:</span><br><span class="line">   line = line.strip().upper()  <span class="comment">## 去除前后空格，大写</span></span><br><span class="line">   chrM_genome = chrM_genome + line</span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span> (len(chrM_genome))</span><br><span class="line"><span class="keyword">print</span> (chrM_genome.count(<span class="string">'A'</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'the char A count is : &#123;0&#125;'</span>.format(chrM_genome.count(<span class="string">'A'</span>)))  <span class="comment"># format 将其格式化</span></span><br></pre></td></tr></table></figure>

<p>Fastq 格式 四行</p>
<p><img src="/2019/11/24/python/1555309340635.png" alt="1555309340635"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">r'./fa_q.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> imput:</span><br><span class="line"><span class="meta">... </span> <span class="keyword">for</span> index,line <span class="keyword">in</span> enumerate(imput):</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">if</span> index % <span class="number">4</span>==<span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">print</span> (<span class="string">'&gt;'</span>+line.strip()[<span class="number">1</span>:])</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">elif</span> index % <span class="number">4</span> ==<span class="number">1</span>:</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">print</span> (line.strip())</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">elif</span> index % <span class="number">4</span>==<span class="number">2</span>:</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">continue</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">elif</span> index %<span class="number">4</span>==<span class="number">3</span>:</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">continue</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;SRR1039512<span class="number">.325</span> HWI-ST177:<span class="number">314</span>:C12K6ACXX:<span class="number">1</span>:<span class="number">1101</span>:<span class="number">5657</span>:<span class="number">2438</span> length=<span class="number">63</span></span><br><span class="line">TCAGAAGAAAAGCATATGTCTGCCATGGGACTATTGCAGTGCGTCTCCATCAGTGTTAACACA</span><br><span class="line">&gt;SRR1039512<span class="number">.326</span> HWI-ST177:<span class="number">314</span>:C12K6ACXX:<span class="number">1</span>:<span class="number">1101</span>:<span class="number">5550</span>:<span class="number">2446</span> length=<span class="number">63</span></span><br><span class="line">TAAGCAGTGCTTGAATTATTTGGTTTCGGTTGTTTTCTATTAGACTATGGTGAGCTCAGGTGA</span><br><span class="line">&gt;SRR1039512<span class="number">.327</span> HWI-ST177:<span class="number">314</span>:C12K6ACXX:<span class="number">1</span>:<span class="number">1101</span>:<span class="number">5908</span>:<span class="number">2367</span> length=<span class="number">63</span></span><br><span class="line">TGGGGAATAGCTTCTCAAGGGCAAGTGCTGTTTCCATACTAGTTCTTTTCCTTGCTCTCTTAT</span><br><span class="line">&gt;SRR1039512<span class="number">.328</span> HWI-ST177:<span class="number">314</span>:C12K6ACXX:<span class="number">1</span>:<span class="number">1101</span>:<span class="number">5852</span>:<span class="number">2396</span> length=<span class="number">63</span></span><br><span class="line">GGAGGAAGCCCACGGTGGGATCTGGCACAAAGATGTAGAGCCGTTTCCGCTCATCGGTCTCCA</span><br><span class="line">&gt;SRR1039512<span class="number">.329</span> HWI-ST177:<span class="number">314</span>:C12K6ACXX:<span class="number">1</span>:<span class="number">1101</span>:<span class="number">5768</span>:<span class="number">2409</span> length=<span class="number">63</span></span><br><span class="line">ACCTGGCAGTGCTGCAACAGTATCTGCCTCTACAAGTAACATCATACCCCCAAGACACCAGAA</span><br><span class="line">&gt;SRR1039512<span class="number">.330</span> HWI-ST177:<span class="number">314</span>:C12K6ACXX:<span class="number">1</span>:<span class="number">1101</span>:<span class="number">5840</span>:<span class="number">2413</span> length=<span class="number">63</span></span><br><span class="line">GCAGAGGTAATTGCCTGAATCCTTCTGTTGTAGACTACGTAGCAGAAGGCCTTGATCTGTCCT</span><br><span class="line">&gt;SRR1039512<span class="number">.331</span> HWI-ST177:<span class="number">314</span>:C12K6ACXX:<span class="number">1</span>:<span class="number">1101</span>:<span class="number">5826</span>:<span class="number">2463</span> length=<span class="number">63</span></span><br><span class="line">GAAAGGCAAGGAGGAAGCTTATCTATGAAAAAGCAAAGCACTATCACAAGGAATATAGGC</span><br><span class="line">&gt;SRR1039512<span class="number">.332</span> HWI-ST177:<span class="number">314</span>:C12K6ACXX:<span class="number">1</span>:<span class="number">1101</span>:<span class="number">5888</span>:<span class="number">2477</span> length=<span class="number">63</span></span><br><span class="line">GTCTGTCTCTTGCTTCAACAGTGTTTGGACGGAACAGATCCGGGGACTCTCTTCCAGCCTCCG</span><br><span class="line">&gt;SRR1039512<span class="number">.333</span> HWI-ST177:<span class="number">314</span>:C12K6ACXX:<span class="number">1</span>:<span class="number">1101</span>:<span class="number">6208</span>:<span class="number">2288</span> length=<span class="number">63</span></span><br><span class="line">GTCATAACCACCACCGCTTACACCTGGAGGTCCAGGAGGGCCAGGGGGACCAGGGGGGCCAGC</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##每隔40一行</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:\Users\kexin\Desktop\python\fa_q.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> imput:</span><br><span class="line">  <span class="keyword">for</span> index,line <span class="keyword">in</span> enumerate(imput):</span><br><span class="line">   <span class="keyword">if</span> index % <span class="number">4</span>==<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'&gt;'</span>+line.strip()[<span class="number">1</span>:])</span><br><span class="line">   <span class="keyword">elif</span> index % <span class="number">4</span> ==<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(line.strip()),<span class="number">40</span>):</span><br><span class="line">     <span class="keyword">print</span> (line.strip()[i:i+<span class="number">40</span>])</span><br><span class="line">   <span class="keyword">elif</span> index % <span class="number">4</span>==<span class="number">2</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">   <span class="keyword">elif</span> index %<span class="number">4</span>==<span class="number">3</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output_file = open (<span class="string">r'C:\Users\kexin\Desktop\python\result2.fastq'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:\Users\kexin\Desktop\python\fa_q.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> imput:</span><br><span class="line">  <span class="keyword">for</span> index,line <span class="keyword">in</span> enumerate(imput):</span><br><span class="line">   <span class="keyword">if</span> index % <span class="number">4</span>==<span class="number">0</span>:</span><br><span class="line">    output_file.write((<span class="string">'&gt;'</span>+line.strip()[<span class="number">1</span>:])+<span class="string">'\n'</span>)</span><br><span class="line">   <span class="keyword">elif</span> index % <span class="number">4</span> ==<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(line.strip()),<span class="number">40</span>):</span><br><span class="line">     output_file.write(line.strip()[i:i+<span class="number">40</span>]+<span class="string">'\n'</span>)</span><br><span class="line">   <span class="keyword">elif</span> index % <span class="number">4</span>==<span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> (index)</span><br><span class="line">   <span class="keyword">elif</span> index %<span class="number">4</span>==<span class="number">3</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">output_file.close()</span><br></pre></td></tr></table></figure>

<p>读取fasta文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open (<span class="string">r'C:\Users\kexin\Desktop\python\result2.fastq'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> input_file:</span><br><span class="line">    seq=<span class="string">''</span></span><br><span class="line">    header= input_file.readline().strip()[<span class="number">1</span>:]  <span class="comment">## 读取第一行</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> input_file:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">'&gt;'</span>:</span><br><span class="line">            seq =seq.strip()+line  <span class="comment">### 这里是要确保刚刚被40个一行分隔的seq数据重新叠加</span></span><br><span class="line">        <span class="keyword">elif</span> line[<span class="number">0</span>]==<span class="string">'&gt;'</span>:</span><br><span class="line">            <span class="keyword">print</span> (header)</span><br><span class="line">            <span class="keyword">print</span> (seq)</span><br><span class="line">            header = line.strip()[<span class="number">1</span>:]</span><br><span class="line">            seq = <span class="string">''</span>       <span class="comment">### 一个循环结束将seq清空</span></span><br><span class="line">    <span class="keyword">print</span> (header)</span><br><span class="line">    <span class="keyword">print</span> (seq)</span><br></pre></td></tr></table></figure>



<h3 id="一个能读取fasta格式的函数（收藏版）"><a href="#一个能读取fasta格式的函数（收藏版）" class="headerlink" title="一个能读取fasta格式的函数（收藏版）"></a>一个能读取fasta格式的函数（收藏版）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_fasta</span><span class="params">(file_path=<span class="string">''</span>)</span>:</span></span><br><span class="line">    line = <span class="string">''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fasta_handle=open(file_path,<span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">raise</span> IOError(<span class="string">'you input FAST file is not right'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = fasta_handle.readline()</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] ==<span class="string">'&gt;'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> <span class="comment">## while the file is not empty, load FASTA file   </span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] !=<span class="string">'&gt;'</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Records in Fasta files should start with '&gt;'"</span>)</span><br><span class="line">        title = line[<span class="number">1</span>:].rstrip()</span><br><span class="line">        lines =[]</span><br><span class="line">        line = fasta_handle.readline()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'&gt;'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            lines.append(line.rstrip())</span><br><span class="line">            line = fasta_handle.readline()</span><br><span class="line">        <span class="keyword">yield</span> title, <span class="string">''</span>.join(lines).replace(<span class="string">''</span>,<span class="string">''</span>).replace(<span class="string">'\r'</span>,<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    fasta_handle.close()</span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">False</span>, <span class="string">'your input fasta file have format problem'</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">read_fasta(file_path=<span class="string">r'C:\Users\kexin\Desktop\python\result2.fastq'</span>)  <span class="comment">## 出现一个报错，在windows里面，要加上r，不然\代表转义:参考https://blog.csdn.net/caibaoH/article/details/78335094</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> header,seq <span class="keyword">in</span> read_fasta(file_path=<span class="string">r'C:\Users\kexin\Desktop\python\result2.fastq'</span>):</span><br><span class="line">    <span class="keyword">print</span> (header)</span><br><span class="line">    <span class="keyword">print</span> (seq)</span><br></pre></td></tr></table></figure>



<h3 id="计算人类参考基因组的序列长度"><a href="#计算人类参考基因组的序列长度" class="headerlink" title="计算人类参考基因组的序列长度"></a>计算人类参考基因组的序列长度</h3><blockquote>
<p>分析步骤：</p>
<p>利用读取fasta的代码读取基因组序列信息</p>
<p>统计每条序列的长度，并输出</p>
<p>统计人类参考基因组的总长度，并输出</p>
<p>统计每条染色体N的长度，并输出</p>
<p>提取基因组特定区域的序列，并输出（支持+/-链）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hg38_genome=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> chr_name, chr_seq <span class="keyword">in</span> read_fasta(file_path=<span class="string">r'/four/yqchen/reference/UCSC/hg38/hg38.fa'</span>):</span><br><span class="line">    hg38_genome[chr_name]=chr_seq</span><br></pre></td></tr></table></figure>



<blockquote>
<p>这里要用绝对路径不然报错</p>
</blockquote>
<p><img src="/2019/11/24/python/1555326558647.png" alt="1555326558647"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hg38_genome.keys()</span><br><span class="line"><span class="keyword">for</span> chr_name <span class="keyword">in</span> hg38_genome.keys():</span><br><span class="line">    <span class="keyword">print</span> (chr_name,len(hg38_genome.get(chr_name)))</span><br><span class="line"><span class="comment">## 这里有点不对，但是无所谓了</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/python/1555327055551.png" alt="1555327055551"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hg38_total_len=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">if</span> index&lt;= <span class="number">22</span>:</span><br><span class="line">        chr_name = <span class="string">'chr&#123;0&#125;'</span>.format(index)</span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">23</span>:</span><br><span class="line">        chr_name = <span class="string">'chrX'</span></span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">24</span>:</span><br><span class="line">        chr_name = <span class="string">'chrY'</span></span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">25</span>:</span><br><span class="line">        chr_name = <span class="string">'chrM'</span></span><br><span class="line">    <span class="keyword">print</span> (chr_name,len(hg38_genome.get(chr_name)))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里结果是正确的，这是为什么？这里没搞明白的。</p>
</blockquote>
<p><img src="/2019/11/24/python/1555327544061.png" alt="1555327544061"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hg38_total_len = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">if</span> index&lt;= <span class="number">22</span>:</span><br><span class="line">        chr_name = <span class="string">'chr&#123;0&#125;'</span>.format(index)</span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">23</span>:</span><br><span class="line">        chr_name = <span class="string">'chrX'</span></span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">24</span>:</span><br><span class="line">        chr_name = <span class="string">'chrY'</span></span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">25</span>:</span><br><span class="line">        chr_name = <span class="string">'chrM'</span></span><br><span class="line">    hg38_total_len= hg38_total_len + int(len(hg38_genome.get(chr_name)))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (hg38_total_len) <span class="comment">### 和上面那一句分开执行</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/python/1555329068482.png" alt="1555329068482"></p>
<p><img src="/2019/11/24/python/1555329082914.png" alt="1555329082914"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(hg38_genome[<span class="string">'chr21'</span>])</span><br><span class="line">hg38_genome[<span class="string">'chr21'</span>].count(<span class="string">'N'</span>)</span><br><span class="line">hg38_genome[<span class="string">'chr22'</span>].count(<span class="string">'N'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 正负链</span></span><br><span class="line"></span><br><span class="line">chr_name=<span class="string">'chr1'</span></span><br><span class="line">chr_start=<span class="number">10000</span></span><br><span class="line">chr_end=<span class="number">10300</span></span><br><span class="line">hg38_genome[chr_name][chr_start<span class="number">-1</span>:chr_end<span class="number">-1</span>].upper()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 反向互补</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">translate_table=string.maketrans(<span class="string">'ATGC'</span>,<span class="string">'TACG'</span>)</span><br><span class="line">a=hg38_genome[chr_name][chr_start<span class="number">-1</span>:chr_end<span class="number">-1</span>].upper()</span><br><span class="line">a.translate(translate_table)[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##方向互补定义函数</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">com_rev</span><span class="params">(input)</span>:</span></span><br><span class="line">    translate_table=string.maketrans(<span class="string">'ATGC'</span>,<span class="string">'TACG'</span>)</span><br><span class="line">    <span class="keyword">return</span> input.upper().translate(translate_table)[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>



<h3 id="编码基因长度，从参考基因组注释信息找"><a href="#编码基因长度，从参考基因组注释信息找" class="headerlink" title="编码基因长度，从参考基因组注释信息找"></a>编码基因长度，从参考基因组注释信息找</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:/Users/kexin/Desktop/python/hg38_RefSeq_genetable'</span>) <span class="keyword">as</span> input_f:</span><br><span class="line">    header = input_f.readline()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> input_f:</span><br><span class="line">        line=line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        <span class="keyword">print</span> (line)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:/Users/kexin/Desktop/python/hg38_RefSeq_genetable'</span>) <span class="keyword">as</span> input_f:</span><br><span class="line">    header = input_f.readline()   <span class="comment">#### 读一行 不要用readlines</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> input_f:</span><br><span class="line">        line=line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        exon_count = int(line [<span class="number">8</span>])</span><br><span class="line">        exon_start =line[<span class="number">9</span>].strip(<span class="string">','</span>) <span class="comment">### 去掉最后的逗号</span></span><br><span class="line">        <span class="keyword">print</span> (exon_start)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:/Users/kexin/Desktop/python/hg38_RefSeq_genetable'</span>) <span class="keyword">as</span> input_f:</span><br><span class="line">    header = input_f.readline()   <span class="comment">#### 读一行 不要用readlines</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> input_f:</span><br><span class="line">        line=line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        <span class="comment"># print (line)</span></span><br><span class="line">        exon_count = int(line [<span class="number">8</span>])</span><br><span class="line">        exon_start =line[<span class="number">9</span>].strip(<span class="string">','</span>)</span><br><span class="line">        exon_end =line[<span class="number">10</span>].strip(<span class="string">','</span>)<span class="comment">### 去掉最后的逗号</span></span><br><span class="line">        <span class="keyword">print</span> (exon_start)</span><br><span class="line">        <span class="keyword">print</span> (exon_end)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">with open(r<span class="string">'C:/Users/kexin/Desktop/python/hg38_RefSeq_genetable'</span>) as input_f:</span><br><span class="line">    header = input_f.readline()   <span class="comment">#### 读一行 不要用readlines</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> input_f:</span><br><span class="line">        line=line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        <span class="comment"># print (line)</span></span><br><span class="line">        exon_count = int(line [<span class="number">8</span>])</span><br><span class="line">        exon_start = line[<span class="number">9</span>].strip(<span class="string">','</span>).split(<span class="string">','</span>) <span class="comment">### map函数int用于后面的列表</span></span><br><span class="line">        exon_end = line[<span class="number">10</span>].strip(<span class="string">','</span>).split(<span class="string">','</span>)</span><br><span class="line">        print (exon_start)</span><br><span class="line">        print (exon_end)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:/Users/kexin/Desktop/python/hg38_RefSeq_genetable'</span>) <span class="keyword">as</span> input_f:</span><br><span class="line">    header = input_f.readline()   <span class="comment">#### 读一行 不要用readlines</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> input_f:</span><br><span class="line">        line=line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        <span class="comment"># print (line)</span></span><br><span class="line">        exon_count = int(line [<span class="number">8</span>])</span><br><span class="line">        exon_start = map(int,line[<span class="number">9</span>].strip(<span class="string">','</span>).split(<span class="string">','</span>)) <span class="comment">### map函数int用于后面的列表</span></span><br><span class="line">        exon_end = map(int,line[<span class="number">10</span>].strip(<span class="string">','</span>).split(<span class="string">','</span>))</span><br><span class="line">        <span class="keyword">print</span> (exon_start)</span><br><span class="line">        <span class="keyword">print</span> (exon_end)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:/Users/kexin/Desktop/python/hg38_RefSeq_genetable'</span>) <span class="keyword">as</span> input_f:</span><br><span class="line">    header = input_f.readline()   <span class="comment">#### 读一行 不要用readlines</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> input_f:</span><br><span class="line">        line=line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        <span class="comment"># print (line)</span></span><br><span class="line">        exon_total_len=<span class="number">0</span></span><br><span class="line">        exon_count = int(line [<span class="number">8</span>])</span><br><span class="line">        exon_start = map(int,line[<span class="number">9</span>].strip(<span class="string">','</span>).split(<span class="string">','</span>)) <span class="comment">### map函数int用于后面的列表</span></span><br><span class="line">        exon_end = map(int,line[<span class="number">10</span>].strip(<span class="string">','</span>).split(<span class="string">','</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(exon_count):</span><br><span class="line">            exon_total_len= exon_total_len+exon_end[index]-exon_start[index]</span><br><span class="line">        <span class="keyword">print</span> (exon_total_len)</span><br><span class="line">        <span class="keyword">print</span> (exon_start)</span><br><span class="line">        <span class="keyword">print</span> (exon_end)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="这里python3-会报错"><a href="#这里python3-会报错" class="headerlink" title="这里python3 会报错"></a>这里python3 会报错</h3><p><img src="/2019/11/24/python/1555423217495.png" alt="1555423217495"></p>
<blockquote>
<p>解决方案，在map基础上加上list</p>
<p><a href="https://blog.csdn.net/mingyuli/article/details/81238858" target="_blank" rel="noopener">https://blog.csdn.net/mingyuli/article/details/81238858</a></p>
</blockquote>
<p><img src="/2019/11/24/python/1555423298540.png" alt="1555423298540"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:/Users/kexin/Desktop/python/hg38_RefSeq_genetable'</span>) <span class="keyword">as</span> input_f:</span><br><span class="line">    header = input_f.readline()   <span class="comment">#### 读一行 不要用readlines</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> input_f:</span><br><span class="line">        line=line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        <span class="comment"># print (line)</span></span><br><span class="line">        exon_total_len=<span class="number">0</span></span><br><span class="line">        exon_count = int(line [<span class="number">8</span>])</span><br><span class="line">        exon_start = list(map(int, line[<span class="number">9</span>].strip(<span class="string">','</span>).split(<span class="string">','</span>))) <span class="comment">### map函数int用于后面的列表</span></span><br><span class="line">        exon_end = list(map(int, line[<span class="number">10</span>].strip(<span class="string">','</span>).split(<span class="string">','</span>)))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(exon_count):</span><br><span class="line">            exon_total_len= exon_total_len+exon_end[index]-exon_start[index]</span><br><span class="line">        <span class="keyword">print</span> (exon_total_len)</span><br><span class="line">        <span class="keyword">print</span> (exon_start)</span><br><span class="line">        <span class="keyword">print</span> (exon_end)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h4 id="完整计算版："><a href="#完整计算版：" class="headerlink" title="完整计算版："></a>完整计算版：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gene_exon_len_dict=&#123;&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:/Users/kexin/Desktop/python/hg38_RefSeq_genetable'</span>) <span class="keyword">as</span> input_f:</span><br><span class="line">    header = input_f.readline()   <span class="comment">#### 读一行 不要用readlines</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> input_f:</span><br><span class="line">        line=line.strip().split(<span class="string">'\t'</span>)</span><br><span class="line">        <span class="comment"># print (line)</span></span><br><span class="line">        exon_total_len=<span class="number">0</span></span><br><span class="line">        exon_count = int(line [<span class="number">8</span>])</span><br><span class="line">        exon_start = list(map(int, line[<span class="number">9</span>].strip(<span class="string">','</span>).split(<span class="string">','</span>))) <span class="comment">### map函数int用于后面的列表</span></span><br><span class="line">        exon_end = list(map(int, line[<span class="number">10</span>].strip(<span class="string">','</span>).split(<span class="string">','</span>)))</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(exon_count):</span><br><span class="line">            exon_total_len= exon_total_len+exon_end[index]-exon_start[index]</span><br><span class="line">        gene_id = line[<span class="number">12</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> gene_exon_len_dict.get(gene_id) <span class="keyword">is</span> <span class="literal">None</span>: <span class="comment">#如果gene_exon_len_dict字典里没有这个基因，加入这个基因的长度</span></span><br><span class="line">            gene_exon_len_dict[gene_id] = exon_total_len</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> gene_exon_len_dict.get(gene_id) &lt; exon_total_len:</span><br><span class="line">                gene_exon_len_dict[gene_id] = exon_total_len</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(gene_exon_len_dict)</span><br><span class="line"></span><br><span class="line">exon_total =<span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> gene_id <span class="keyword">in</span> gene_exon_len_dict.keys():</span><br><span class="line">    exon_total = exon_total+gene_exon_len_dict[gene_id]</span><br><span class="line">    <span class="comment"># exon_total = exon_total+gene_exon_len_dict.values(gene_id) 这是错误写法</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span> (exon_total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exon_rate = <span class="number">111336157</span> / <span class="number">3088286401</span> *<span class="number">100</span></span><br><span class="line">exon_rate</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python语言学习</tag>
      </tags>
  </entry>
  <entry>
    <title>reshape2--R语言长数据-短数据转化</title>
    <url>/2019/11/30/reshape2/</url>
    <content><![CDATA[<h3 id="reshape2-长短数据转化，主要两个函数melt，cast"><a href="#reshape2-长短数据转化，主要两个函数melt，cast" class="headerlink" title="reshape2-长短数据转化，主要两个函数melt，cast"></a>reshape2-长短数据转化，主要两个函数melt，cast</h3><h1 id="reshape2"><a href="#reshape2" class="headerlink" title="reshape2"></a>reshape2</h1><h3 id="打开png"><a href="#打开png" class="headerlink" title="打开png"></a>打开png</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">png( <span class="string">"volcano.png"</span>, width = <span class="number">7</span>, height = <span class="number">7</span>, units = <span class="string">"in"</span>, res = <span class="number">1200</span>, pointsize = <span class="number">4</span> )</span><br></pre></td></tr></table></figure>

<h3 id="数据分析时要长数据"><a href="#数据分析时要长数据" class="headerlink" title="数据分析时要长数据"></a>数据分析时要长数据</h3><p>长数据有一列数据是变量的类型，有一列是变量的值。长数据不一定只有两列。ggplot2需要长类型的数据，plyr也需要长类型的数据，大多数的模型(比如lm(), glm()以及gam())也需要长数据。</p>
<h3 id="reshape2-包主要掌握melt和cast两个函数。"><a href="#reshape2-包主要掌握melt和cast两个函数。" class="headerlink" title="reshape2 包主要掌握melt和cast两个函数。"></a>reshape2 包主要掌握melt和cast两个函数。</h3><p>melt函数对宽数据进行处理，得到长数据；<br>cast函数对长数据进行处理，得到宽数据；</p>
<a id="more"></a>



<p>宽数据</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#   ozone   wind  temp</span></span><br><span class="line"><span class="comment"># 1 23.62 11.623 65.55</span></span><br><span class="line"><span class="comment"># 2 29.44 10.267 79.10</span></span><br><span class="line"><span class="comment"># 3 59.12  8.942 83.90</span></span><br><span class="line"><span class="comment"># 4 59.96  8.794 83.97</span></span><br></pre></td></tr></table></figure>

<p>长数据</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#    variable  value</span></span><br><span class="line"><span class="comment"># 1     ozone 23.615</span></span><br><span class="line"><span class="comment"># 2     ozone 29.444</span></span><br><span class="line"><span class="comment"># 3     ozone 59.115</span></span><br><span class="line"><span class="comment"># 4     ozone 59.962</span></span><br><span class="line"><span class="comment"># 5      wind 11.623</span></span><br><span class="line"><span class="comment"># 6      wind 10.267</span></span><br><span class="line"><span class="comment"># 7      wind  8.942</span></span><br><span class="line"><span class="comment"># 8      wind  8.794</span></span><br><span class="line"><span class="comment"># 9      temp 65.548</span></span><br><span class="line"><span class="comment"># 10     temp 79.100</span></span><br><span class="line"><span class="comment"># 11     temp 83.903</span></span><br><span class="line"><span class="comment"># 12     temp 83.968</span></span><br></pre></td></tr></table></figure>

<h4 id="melt函数：其中ID-variables就是那些能够区分不同行数据的变量，类似于数据库中的主键。"><a href="#melt函数：其中ID-variables就是那些能够区分不同行数据的变量，类似于数据库中的主键。" class="headerlink" title="melt函数：其中ID variables就是那些能够区分不同行数据的变量，类似于数据库中的主键。"></a>melt函数：其中ID variables就是那些能够区分不同行数据的变量，类似于数据库中的主键。</h4><p>此处用R内置的airquality数据集，首先将列名改成小写，然后查看相应的数据</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">names(airquality) &lt;- tolower(names(airquality))</span><br><span class="line">  ozone solar.r wind temp month day</span><br><span class="line"><span class="number">1</span>    <span class="number">41</span>     <span class="number">190</span>  <span class="number">7.4</span>   <span class="number">67</span>     <span class="number">5</span>   <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">36</span>     <span class="number">118</span>  <span class="number">8.0</span>   <span class="number">72</span>     <span class="number">5</span>   <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">12</span>     <span class="number">149</span> <span class="number">12.6</span>   <span class="number">74</span>     <span class="number">5</span>   <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">18</span>     <span class="number">313</span> <span class="number">11.5</span>   <span class="number">62</span>     <span class="number">5</span>   <span class="number">4</span></span><br><span class="line"><span class="number">5</span>    <span class="literal">NA</span>      <span class="literal">NA</span> <span class="number">14.3</span>   <span class="number">56</span>     <span class="number">5</span>   <span class="number">5</span></span><br><span class="line"><span class="number">6</span>    <span class="number">28</span>      <span class="literal">NA</span> <span class="number">14.9</span>   <span class="number">66</span>     <span class="number">5</span>   <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>默认情况下，melt认为所有数值列的变量均有值。很多情况下，这都是我们想要的情况。在这里，我们想知道每个月(month)以及每天(day)的ozone, solar.r, wind以及temp的值。因此，我们需要告诉melt，month和day是”ID variables”。<strong>ID variables就是那些能够区分不同行数据的变量，类似于数据库中的主键。</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">aql &lt;- melt(airquality, id.vars = c(<span class="string">"month"</span>, <span class="string">"day"</span>))</span><br><span class="line">head(aql)</span><br><span class="line"></span><br><span class="line">  month day variable value</span><br><span class="line"><span class="number">1</span>     <span class="number">5</span>   <span class="number">1</span>    ozone    <span class="number">41</span></span><br><span class="line"><span class="number">2</span>     <span class="number">5</span>   <span class="number">2</span>    ozone    <span class="number">36</span></span><br><span class="line"><span class="number">3</span>     <span class="number">5</span>   <span class="number">3</span>    ozone    <span class="number">12</span></span><br><span class="line"><span class="number">4</span>     <span class="number">5</span>   <span class="number">4</span>    ozone    <span class="number">18</span></span><br><span class="line"><span class="number">5</span>     <span class="number">5</span>   <span class="number">5</span>    ozone    <span class="literal">NA</span></span><br><span class="line"><span class="number">6</span>     <span class="number">5</span>   <span class="number">6</span>    ozone    <span class="number">28</span></span><br></pre></td></tr></table></figure>

<p>如果我们想修改长数据中的列名，该如何操作呢?</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">aql &lt;- melt(airquality, id.vars = c(<span class="string">"month"</span>, <span class="string">"day"</span>),</span><br><span class="line">  variable.name = <span class="string">"climate_variable"</span>, </span><br><span class="line">  value.name = <span class="string">"climate_value"</span>)</span><br><span class="line">head(aql)</span><br><span class="line"></span><br><span class="line">  month day climate_variable climate_value</span><br><span class="line"><span class="number">1</span>     <span class="number">5</span>   <span class="number">1</span>            ozone            <span class="number">41</span></span><br><span class="line"><span class="number">2</span>     <span class="number">5</span>   <span class="number">2</span>            ozone            <span class="number">36</span></span><br><span class="line"><span class="number">3</span>     <span class="number">5</span>   <span class="number">3</span>            ozone            <span class="number">12</span></span><br><span class="line"><span class="number">4</span>     <span class="number">5</span>   <span class="number">4</span>            ozone            <span class="number">18</span></span><br><span class="line"><span class="number">5</span>     <span class="number">5</span>   <span class="number">5</span>            ozone            <span class="literal">NA</span></span><br><span class="line"><span class="number">6</span>     <span class="number">5</span>   <span class="number">6</span>            ozone            <span class="number">28</span></span><br></pre></td></tr></table></figure>

<h4 id="cast函数"><a href="#cast函数" class="headerlink" title="cast函数"></a>cast函数</h4><p>在reshape2中有好几个cast版本的函数。若你经常使用data.frame，就需要使用dcast函数。acast函数返回向量、矩阵或者数组。<br>dcast借助于公式来描述数据的形状，左边参数表示”ID variables”，而右边的参数表示measured variables。可能需要几次尝试，才能找到合适的公式。<br>这里，<strong>我们需要告知dcast，month和day是ID variables，variable则表示measured variables。</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">aql &lt;- melt(airquality, id.vars = c(<span class="string">"month"</span>, <span class="string">"day"</span>))</span><br><span class="line">aqw &lt;- dcast(aql, month + day ~ variable)</span><br><span class="line">head(aqw)</span><br><span class="line"></span><br><span class="line">  month day ozone solar.r wind temp</span><br><span class="line"><span class="number">1</span>     <span class="number">5</span>   <span class="number">1</span>    <span class="number">41</span>     <span class="number">190</span>  <span class="number">7.4</span>   <span class="number">67</span></span><br><span class="line"><span class="number">2</span>     <span class="number">5</span>   <span class="number">2</span>    <span class="number">36</span>     <span class="number">118</span>  <span class="number">8.0</span>   <span class="number">72</span></span><br><span class="line"><span class="number">3</span>     <span class="number">5</span>   <span class="number">3</span>    <span class="number">12</span>     <span class="number">149</span> <span class="number">12.6</span>   <span class="number">74</span></span><br><span class="line"><span class="number">4</span>     <span class="number">5</span>   <span class="number">4</span>    <span class="number">18</span>     <span class="number">313</span> <span class="number">11.5</span>   <span class="number">62</span></span><br><span class="line"><span class="number">5</span>     <span class="number">5</span>   <span class="number">5</span>    <span class="literal">NA</span>      <span class="literal">NA</span> <span class="number">14.3</span>   <span class="number">56</span></span><br><span class="line"><span class="number">6</span>     <span class="number">5</span>   <span class="number">6</span>    <span class="number">28</span>      <span class="literal">NA</span> <span class="number">14.9</span>   <span class="number">66</span></span><br><span class="line"></span><br><span class="line">head(airquality) <span class="comment"># original data</span></span><br><span class="line"></span><br><span class="line">  ozone solar.r wind temp month day</span><br><span class="line"><span class="number">1</span>    <span class="number">41</span>     <span class="number">190</span>  <span class="number">7.4</span>   <span class="number">67</span>     <span class="number">5</span>   <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">36</span>     <span class="number">118</span>  <span class="number">8.0</span>   <span class="number">72</span>     <span class="number">5</span>   <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">12</span>     <span class="number">149</span> <span class="number">12.6</span>   <span class="number">74</span>     <span class="number">5</span>   <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">18</span>     <span class="number">313</span> <span class="number">11.5</span>   <span class="number">62</span>     <span class="number">5</span>   <span class="number">4</span></span><br><span class="line"><span class="number">5</span>    <span class="literal">NA</span>      <span class="literal">NA</span> <span class="number">14.3</span>   <span class="number">56</span>     <span class="number">5</span>   <span class="number">5</span></span><br><span class="line"><span class="number">6</span>    <span class="number">28</span>      <span class="literal">NA</span> <span class="number">14.9</span>   <span class="number">66</span>     <span class="number">5</span>   <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>除了需要调整下列变量的顺序，我们已经恢复出原始数据。下图将有助解释所发生的情况。</p>
<p><img src="/2019/11/30/reshape2/58036-d3cdd2487970a0a5.webp" alt="img"></p>
<p>here is the dcast illustration</p>
<blockquote>
<p>蓝色阴影块是能够表示每一行数据的ID variables；红色阴影块包含了将待生成数据的列名；而灰色的数据表示用于填充相关区域的数据。</p>
</blockquote>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fseananderson.ca%2F2013%2F10%2F19%2Freshape.html" target="_blank" rel="noopener">http://seananderson.ca/2013/10/19/reshape.html</a></p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>ggplot2</tag>
        <tag>可视化</tag>
        <tag>数据处理</tag>
        <tag>reshape</tag>
      </tags>
  </entry>
  <entry>
    <title>MeRIP</title>
    <url>/2019/12/23/meRIP-seq/</url>
    <content><![CDATA[<h1 id="MeRIP-ChIP-seq分析流程"><a href="#MeRIP-ChIP-seq分析流程" class="headerlink" title="MeRIP/ChIP-seq分析流程"></a>MeRIP/ChIP-seq分析流程</h1><a id="more"></a>





<p><img src="/2019/12/23/meRIP-seq/MeRIP-seq-1577076799945.jpg" alt="MeRIP-seq"></p>
<p><strong>Schematic diagram of the MeRIP-seq protocol</strong></p>
<p><img src="/2019/12/23/meRIP-seq/MeRIP-seq-workflow.jpg" alt="Workflow"></p>
<p>由于m6A-seq数据分析的原理与过程和ChIP-seq十分相似，所以这里略过前面的质控，简单说明比对和peak calling步骤，具体内容可以参考<a href="https://github.com/Ming-Lian/Memo/blob/master/ChIP-seq-pipeline.md" target="_blank" rel="noopener"><strong>ChIP-seq分析流程</strong></a></p>
<h2 id="m6A背景知识"><a href="#m6A背景知识" class="headerlink" title="m6A背景知识"></a>m6A背景知识</h2><p>目前已知有100多种RNA修饰，涉及到mRNAs、tRNAs、rRNAs、small nuclear RNA (snRNAs) 以及 small nucleolar RNAs (snoRNAs)等。其中甲基化修饰是一种非常广泛的修饰，N6-methyl adenosine (m6A)是真核生物mRNA上最为广泛的甲基化修饰之一，并存在于多种多样的物种中。</p>
<p>腺嘌呤可以被<strong>编码器</strong>METTL3、METTL14和WTAP及其他组分组成的甲基转移酶复合体甲基化，甲基化的腺嘌呤可以被<strong>读码器</strong>（目前发现m6A读码器主要有四个，定位于细胞核内的YTHDC1以及定位在细胞质中的YTHDF1、YTHDF2、YTHDF3、YTHDC2）识别，同时m6A可以被<strong>擦除器</strong>FTO和ALKBH5这两个去甲基化酶催化去甲基化。</p>
<p>在哺乳动物mRNA中，m6A修饰存在于7000多个基因中，<strong>保守基序为RRACH</strong> (R = G, A; H = A, C, U)。m6A修饰富集在mRNA<strong>终止密码子</strong>附近。</p>
<h2 id="比对参考基因组"><a href="#比对参考基因组" class="headerlink" title="比对参考基因组"></a>比对参考基因组</h2><p>在 ChIP-seq 中一般用 BWA 或者 Bowtie 进行完全比对就可以了，但是在 MeRIP-seq 中，由于分析的 RNA ，那么就存在<strong>可变剪切</strong>，对于存在可变剪切的 mapping 用 <strong>Tophat</strong> 或者 Tophat 的升级工具 <strong>HISAT2</strong> 更合适</p>
<h3 id="Tophat"><a href="#Tophat" class="headerlink" title="Tophat"></a>Tophat</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># build reference index</span><br><span class="line">## &lt;1&gt; build genome index</span><br><span class="line">$ bowtie2-build  hg19.fa hg19</span><br><span class="line">## &lt;2&gt; build transcriptome index</span><br><span class="line">$ tophat -p 8 -G hg19.gtf --transcriptome-index&#x3D;Ref&#x2F;hg19&#x2F;hg19_trans&#x2F;know hg19</span><br><span class="line"></span><br><span class="line"># mapping</span><br><span class="line">$ tophat -p 8 --transcriptome-index&#x3D;Ref&#x2F;hg19&#x2F;hg19_trans&#x2F;know -o outdir hg19 reads1_1.fastq reads1_2.fastq</span><br><span class="line"># Only uniquely mapped reads with mapping quality score ≥20 were kept for the subsequent analysis for each sample</span><br><span class="line">$ samtools view -q 20 -O bam -o outdir&#x2F;accepted_hits.highQual.bam outdir&#x2F;accepted_hits.bam</span><br></pre></td></tr></table></figure>

<p>Tophat参数</p>
<blockquote>
<ul>
<li>-p Number of threads to use</li>
<li>-G Supply TopHat with a set of gene model annotations and/or known transcripts, as a GTF 2.2 or GFF3 formatted file.</li>
<li>–transcriptome-index TopHat should be first run with the -G/–GTF option together with the –transcriptome-index option pointing to a directory and a name prefix which will indicate where the transcriptome data files will be stored. Then subsequent TopHat runs using the same –transcriptome-index option value will directly use the transcriptome data created in the first run (no -G option needed after the first run).</li>
<li>-o Sets the name of the directory in which TopHat will write all of its output</li>
</ul>
</blockquote>
<p>samtools view 参数</p>
<blockquote>
<ul>
<li>-q only include reads with mapping quality &gt;= INT [0]</li>
</ul>
</blockquote>
<h3 id="HISAT2"><a href="#HISAT2" class="headerlink" title="HISAT2"></a>HISAT2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># build reference index</span><br><span class="line">##  using the python scripts included in the HISAT2 package, extract splice-site and exon information from the gene</span><br><span class="line">annotation fle</span><br><span class="line">$ extract_splice_sites.py chrX_data&#x2F;genes&#x2F;chrX.gtf &gt;chrX.ss</span><br><span class="line">$ extract_exons.py chrX_data&#x2F;genes&#x2F;chrX.gtf &gt;chrX.exon</span><br><span class="line">##  build a HISAT2 index</span><br><span class="line">$ hisat2-build --ss chrX.ss --exon chrX.exon chrX_data&#x2F;genome&#x2F;chrX.fa chrX_tran</span><br><span class="line"></span><br><span class="line"># mapping</span><br><span class="line">$ hisat2 -p 10 --dta -x chrX_tran -1 reads1_1.fastq -2 reads1_2.fastq | samtools sort -@ 8 -O bam -o reads1.sort.bam 1&gt;map.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>-p Number of threads to use</li>
<li>–dta reports alignments tailored for transcript assemblers</li>
<li>-x Hisat2 index</li>
<li>-1 The 1st input fastq file of paired-end reads</li>
<li>-2 The 2nd input fastq file of paired-end reads</li>
<li>-S File for SAM output (default: stdout)</li>
</ul>
</blockquote>
<h2 id="Peak-calling"><a href="#Peak-calling" class="headerlink" title="Peak calling"></a>Peak calling</h2><hr>
<h3 id="MACS2"><a href="#MACS2" class="headerlink" title="MACS2"></a>MACS2</h3><p>参考ChIP-seq分析流程中的<a href="https://github.com/Ming-Lian/Memo/blob/master/ChIP-seq-pipeline.md#peak-calling" target="_blank" rel="noopener">peak calling</a>过程</p>
<h3 id="PeakRanger"><a href="#PeakRanger" class="headerlink" title="PeakRanger"></a>PeakRanger</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">peakranger ccat --format bam SRR1042594.sorted.bam SRR1042593.sorted.bam  \</span><br><span class="line">Xu_MUT_rep1_ccat_report --report --gene_annot_file hg19refGene.txt -q 0.05 -t 4</span><br></pre></td></tr></table></figure>

<h2 id="Peaks注释"><a href="#Peaks注释" class="headerlink" title="Peaks注释"></a>Peaks注释</h2><hr>
<h3 id="CEAS"><a href="#CEAS" class="headerlink" title="CEAS"></a>CEAS</h3><p>哈佛刘小乐实验室出品的软件，可以跟MACS软件call到的peaks文件无缝连接，实现peaks的注释以及可视化分析</p>
<p>CEAS需要三种输入文件：</p>
<blockquote>
<ul>
<li><p>Gene annotation table file (sqlite3)</p>
<blockquote>
<p>可以到CEAS官网上下载：<a href="http://liulab.dfci.harvard.edu/CEAS/src/hg18.refGene.gz" target="_blank" rel="noopener">http://liulab.dfci.harvard.edu/CEAS/src/hg18.refGene.gz</a> ，也可以自己构建：到UCSC上下载，然后用<code>build_genomeBG</code>脚本转换成split3格式</p>
</blockquote>
</li>
<li><p>BED file with ChIP regions (TXT)</p>
<blockquote>
<p>需要包含chromosomes, start, and end locations，这样文件可以由 peak-caller （如MACS2）得到</p>
</blockquote>
</li>
<li><p>WIG file with ChiP enrichment signal (TXT)</p>
<blockquote>
<p>如何得到wig文件可以参考<a href="https://github.com/Ming-Lian/NGS-analysis/blob/master/samtools操作指南.md#output-wig" target="_blank" rel="noopener">samtools操作指南：以WIG文件输出测序深度</a></p>
</blockquote>
</li>
</ul>
</blockquote>
<p>CEAS的使用方法很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ceas --name&#x3D;H3K36me3_ceas --pf-res&#x3D;20 --gn-group-names&#x3D;&#39;Top 10%,Bottom 10%&#39;  \</span><br><span class="line">-g hg19.refGene -b  ..&#x2F;paper_results&#x2F;GSM1278641_Xu_MUT_rep1_BAF155_MUT.peaks.bed \</span><br><span class="line">-w ..&#x2F;rawData&#x2F;SRR1042593.wig</span><br></pre></td></tr></table></figure>



<blockquote>
<ul>
<li>–name Experiment name. This will be used to name the output files.</li>
<li>–pf-res Wig profiling resolution, DEFAULT: 50bp</li>
<li>–gn-group-names The names of the gene groups in –gn-groups. The gene group names are separated by commas. (eg, –gn-group-names=’top 10%,bottom 10%’).</li>
<li>-g Gene annotation table</li>
<li>-b BED file of ChIP regions</li>
<li>-w WIG file for either wig profiling or genome background annotation.</li>
</ul>
</blockquote>
<h2 id="Motif识别"><a href="#Motif识别" class="headerlink" title="Motif识别"></a>Motif识别</h2><h3 id="HOMER"><a href="#HOMER" class="headerlink" title="HOMER"></a>HOMER</h3><p>安装旧版本的HOMER比较复杂，因为旧版依赖于调用其他几个工具：</p>
<blockquote>
<ul>
<li>blat</li>
<li>Ghostscript</li>
<li>weblogo<br><strong>Does NOT work with version 3.0!!!!</strong></li>
</ul>
</blockquote>
<p>新版HOMER安装很简单，主要是通过<code>configureHomer.pl</code>脚本来安装和管理HOMER</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;biosoft</span><br><span class="line">mkdir homer &amp;&amp;  cd homer</span><br><span class="line">wget http:&#x2F;&#x2F;homer.salk.edu&#x2F;homer&#x2F;configureHomer.pl</span><br><span class="line"></span><br><span class="line"># Installing the basic HOMER software</span><br><span class="line">perl configureHomer.pl -install</span><br><span class="line"></span><br><span class="line"># Download the hg19 version of the human genome</span><br><span class="line">perl configureHomer.pl -install hg19</span><br></pre></td></tr></table></figure>



<p>安装好后可以进行 Motif Identification</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 提取对应的列给HOMER作为输入文件</span><br><span class="line"># change </span><br><span class="line">#		chr1	1454086	1454256	MACS_peak_1	59.88 </span><br><span class="line">#to   </span><br><span class="line">#		MACS_peak_1	chr1	1454086	1454256	+</span><br><span class="line">$ awk &#39;&#123;print $4&quot;\t&quot;$1&quot;\t&quot;$2&quot;\t&quot;$3&quot;\t+&quot;&#125;&#39; macs_peaks.bed &gt;homer_peaks.bed</span><br><span class="line"></span><br><span class="line"># MeRIP-seq 中 motif 的长度为6个 nt</span><br><span class="line">$ findMotifsGenome.pl homer_peaks.bed hg19 motifDir -size 200 -len 8,10,12</span><br><span class="line"></span><br><span class="line"># 自己指定background sequences，用bedtools shuffle构造随机的suffling peaks</span><br><span class="line">$ bedtools shuffle -i peaks.bed -g &lt;GENOME&gt; &gt;peaks_shuffle.bed</span><br><span class="line"># 用参数&quot;-bg&quot;指定background sequences</span><br><span class="line">$ findMotifsGenome.pl homer_peaks.bed hg19 motifDir -bg peaks_shuffle.bed -size 200 -len 8,10,12</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage: findMotifsGenome.pl &lt;pos file&gt; &lt;genome&gt; &lt;output directory&gt; [additional options]</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<blockquote>
<ul>
<li><p><code>&lt;genome&gt;</code> 参数只需要写出genome的序号，不需要写出具体路径</p>
</li>
<li><pre><code>bedtools shuffle
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>中的genome文件的格式要求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; For example, Human (hg19):</span><br><span class="line">&gt;        chr1    249250621</span><br><span class="line">&gt;        chr2    243199373</span><br><span class="line">&gt;        ...</span><br><span class="line">&gt;        chr18_gl000207_random   4262</span><br><span class="line">&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">可以使用 UCSC Genome Browser’s MySQL database 来获取 chromosome sizes 信息并构建genome文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> mysql –user=genome –host=genome-mysql.cse.ucsc.edu -A -e “select chrom, size from hg19.chromInfo” &gt;hg19.genome</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">最后得到的文件夹里面有一个详细的网页版报告</span><br><span class="line"></span><br><span class="line">![img](meRIP-seq&#x2F;peakMotifs.output-1577079586809.png)</span><br><span class="line"></span><br><span class="line">### MEME</span><br><span class="line"></span><br><span class="line">#### 算法原理</span><br><span class="line"></span><br><span class="line">![img](meRIP-seq&#x2F;MeRIP-seq-meme-principle-1-1577079602415.png)</span><br><span class="line"></span><br><span class="line">![img](meRIP-seq&#x2F;MeRIP-seq-meme-principle-2-1577079791236.png)</span><br><span class="line"></span><br><span class="line">![img](meRIP-seq&#x2F;MeRIP-seq-meme-principle-3.png)</span><br><span class="line"></span><br><span class="line">#### 操作</span><br><span class="line"></span><br><span class="line">下载安装MEME </span><br></pre></td></tr></table></figure>
<p>cd ~/biosoft<br>mkdir MEMEsuite &amp;&amp;  cd MEMEsuite</p>
</blockquote>
<h2 id="http-meme-suite-org-doc-download-html"><a href="#http-meme-suite-org-doc-download-html" class="headerlink" title="http://meme-suite.org/doc/download.html"></a><a href="http://meme-suite.org/doc/download.html" target="_blank" rel="noopener">http://meme-suite.org/doc/download.html</a></h2><p>wget  <a href="http://meme-suite.org/meme-software/4.11.2/meme_4.11.2_1.tar.gz" target="_blank" rel="noopener">http://meme-suite.org/meme-software/4.11.2/meme_4.11.2_1.tar.gz</a><br>tar zxvf meme_4.11.2_1.tar.gz<br>cd meme_4.11.2/<br>./configure –prefix=$HOME/my-bin/meme –with-url=”<a href="http://meme-suite.org&quot;" target="_blank" rel="noopener">http://meme-suite.org&quot;</a><br>make<br>make install</p>
<h1 id="先提取peaks区域所对应的序列"><a href="#先提取peaks区域所对应的序列" class="headerlink" title="先提取peaks区域所对应的序列"></a>先提取peaks区域所对应的序列</h1><p>bedtools getfasta -fi input.fasta -bed input.bed -fo output.fasta</p>
<h1 id="Motif-identification"><a href="#Motif-identification" class="headerlink" title="Motif identification"></a>Motif identification</h1><p>meme output.fasta -dna -mod oops -pal</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt; - &lt; dataset &gt; File containing sequences in FASTA format</span><br><span class="line">&gt; - -dna Sequences use DNA alphabet</span><br><span class="line">&gt; - -mod Distribution of motifs,3 options: oops | zoops | anr</span><br><span class="line">&gt; - -pal Force palindromes (requires -dna)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Differential binding analysis</span><br><span class="line"></span><br><span class="line">### Merge peaks</span><br><span class="line"></span><br><span class="line">当ChIP-seq数据中有多分组，多样本以及多个重复时，**需要进行样本间peaks的merge**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;shell</span><br><span class="line">bedtools intersect -a Mcf7H3k27acUcdAlnRep1_peaks.filtered.bed -b Mcf7H3k27acUcdAlnRep2_peaks.filtered.bed -wa | cut -f1-3 | sort | uniq &gt; Mcf7Rep1_peaks.bed</span><br><span class="line">bedtools intersect -a Mcf7H3k27acUcdAlnRep1_peaks.filtered.bed -b Mcf7H3k27acUcdAlnRep2_peaks.filtered.bed -wb | cut -f1-3 | sort | uniq &gt; Mcf7Rep2_peaks.bed</span><br><span class="line">bedtools intersect -a Panc1H3k27acUcdAlnRep1_peaks.filtered.bed -b Panc1H3k27acUcdAlnRep2_peaks.filtered.bed -wa | cut -f1-3 | sort | uniq &gt; Panc1Rep1_peaks.bed</span><br><span class="line">bedtools intersect -a Panc1H3k27acUcdAlnRep1_peaks.filtered.bed -b Panc1H3k27acUcdAlnRep2_peaks.filtered.bed -wb | cut -f1-3 | sort | uniq &gt; Panc1Rep2_peaks.bed</span><br><span class="line"></span><br><span class="line">rm *filtered*</span><br><span class="line"></span><br><span class="line">cat *bed | sort -k1,1 -k2,2n | bedtools merge &gt; merge.bed</span><br></pre></td></tr></table></figure>



<h3 id="Preparing-ChIP-seq-count-table"><a href="#Preparing-ChIP-seq-count-table" class="headerlink" title="Preparing ChIP-seq count table"></a>Preparing ChIP-seq count table</h3><p>用<strong>bedtools</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Make a bed file adding peak id as the fourth colum</span><br><span class="line">$ awk &#39;&#123;$3&#x3D;$3&quot;\t&quot;&quot;peak_&quot;NR&#125;1&#39; OFS&#x3D;&quot;\t&quot; merge.bed &gt; bed_for_multicov.bed</span><br><span class="line"># 输入的bam文件要提前做好index，可同时提供多个bam文件</span><br><span class="line">$ samtools sort -@ 8 -O BAM -o input1.sort.bam input1.bam </span><br><span class="line">$ samtools index -@ 8 input1.sort.bam input1.sort.bam.bai # 注意：生成的索引文件的文件名必须为在原bam文件名后追加&quot;.bai&quot;，否则bedtools multicov无法识别</span><br><span class="line">$ bedtools multicov -bams input1.bam input2.bam ... -bed bed_for_multicov.bed &gt; counts_multicov.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>NR 表示awk开始执行程序后所读取的数据行数</li>
<li>OFS Out of Field Separator，输出字段分隔符</li>
</ul>
</blockquote>
<p>用<strong>featureCounts</strong> (subread工具包中的组件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Make a saf(simplified annotation format) file for featureCount in the subread package,</span><br><span class="line"></span><br><span class="line">shown below:</span><br><span class="line">GeneID	Chr	Start	End	Strand</span><br><span class="line">497097	chr1	3204563	3207049	-</span><br><span class="line">497097	chr1	3411783	3411982	-</span><br><span class="line">497097	chr1	3660633	3661579	-</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">awk -F &quot;\t&quot; &#39;&#123;$1&#x3D;&quot;peak_&quot;NR FS$1;$4&#x3D;$4FS&quot;.&quot;&#125;1&#39; merge.bed &gt; subread.saf</span><br><span class="line">featureCounts -T 4 -a subread.saf -F SAF -o counts_subread.txt ..&#x2F;..&#x2F;data&#x2F;*bam</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>-a Name of an annotation file</li>
<li>-F Specify format of the provided annotation file. Acceptable formats include ‘GTF’ (or compatible GFF format) and ‘SAF’. ‘GTF’ by default</li>
<li>-o Name of the output file including read counts</li>
<li>-T Number of the threads</li>
</ul>
</blockquote>
<h3 id="Differential-binding-by-DESeq2"><a href="#Differential-binding-by-DESeq2" class="headerlink" title="Differential binding by DESeq2"></a>Differential binding by DESeq2</h3><ul>
<li>对 contrast 构建一个 counts 矩阵，第一组的每个样本占据一列，紧接着的是第二组的样本，也是每个样本一列。</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 做好表达矩阵</span></span><br><span class="line">count_table&lt;-read.delim(<span class="string">"count_multicov.txt"</span>,header=<span class="literal">F</span>)</span><br><span class="line">count_matrix&lt;-as.matrix(count_table[,c(-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">3</span>,-<span class="number">4</span>)])</span><br><span class="line">rownames(count_matrix)&lt;-count_table$V4</span><br><span class="line"><span class="comment"># 做好分组因子即可</span></span><br><span class="line">group_list&lt;-factor(c(<span class="string">"control"</span>,<span class="string">"control"</span>,<span class="string">"control"</span>,<span class="string">"treat"</span>,<span class="string">"treat"</span>,<span class="string">"treat"</span>))</span><br><span class="line">colData &lt;- data.frame(row.names=colnames(count_matrix), group_list=group_list))</span><br><span class="line"><span class="comment"># 构建 DESeqDataSet 对象</span></span><br><span class="line">dds &lt;- DESeqDataSetFromMatrix(countData = count_matrix,</span><br><span class="line">	colData = colData,</span><br><span class="line">	design = ~ group_list)</span><br></pre></td></tr></table></figure>

<ul>
<li>接着计算每个样本的 library size 用于后续的标准化。library size 等于落在该样本所有peaks上的reads的总数，即 counts 矩阵中每列的加和。如果bFullLibrarySize设为TRUE，则会使用library的总reads数（根据原BAM/BED文件统计获得）。然后使用<code>estimateDispersions</code>估计统计分布，需要将参数<code>fitType</code>设为’local’</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dds&lt;-estimateSizeFactors(dds)</span><br><span class="line">dds&lt;-estimateDispersions(dds,fitType&#x3D;&quot;local&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>对负二项分布进行显著性检验（Negative Binomial GLM fitting and Wald statistics）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dds &lt;- nbinomWaldTest(dds)</span><br><span class="line">res &lt;- results(dds)</span><br><span class="line">res</span><br></pre></td></tr></table></figure>

<p>若存在多个分组需要进行两两比较，则需要提取指定的两个分组之间的比较结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 提取你想要的差异分析结果，我们这里是treated组对untreated组进行比较</span><br><span class="line">res &lt;-  results(dds2, contrast&#x3D;c(&quot;group_list&quot;,&quot;treated&quot;,&quot;untreated&quot;))</span><br><span class="line">resOrdered &lt;- res[order(res$padj),]</span><br><span class="line">resOrdered&#x3D;as.data.frame(resOrdered)</span><br></pre></td></tr></table></figure>



<p>注意两个概念：</p>
<blockquote>
<ul>
<li>Full library size: bam文件中reads的总数</li>
<li>Effective library size: 落在peaks区域的reads的总数</li>
</ul>
<p>DESeq2中默认使用 Full library size bam (bFullLibrarySize =TRUE)，在ChIP-seq中使用 Effective library size 更合适，所有应该设置为bFullLibrarySize =FALSE</p>
</blockquote>
<h3 id="4-Differential-binding-peaks-annotation"><a href="#4-Differential-binding-peaks-annotation" class="headerlink" title="4. Differential binding peaks annotation"></a>4. Differential binding peaks annotation</h3><p>在<code>Differential binding analysis: 2. Preparing ChIP-seq count table</code>得到的<code>bed_for_multicov.bed</code>中找DiffBind peaks的bed格式信息</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用R进行取交集操作</span></span><br><span class="line">merge_bed&lt;-read.delim(<span class="string">"m6A_seq/CallPeak/bed_for_multicov.bed"</span>,header=<span class="literal">F</span>)</span><br><span class="line">peaks_diffbind&lt;-read.delim(<span class="string">"m6A_seq/CallPeak/res_diffBind.txt"</span>,header=<span class="literal">T</span>)</span><br><span class="line">peaks_diffbind_bed&lt;-merge_bed[merge_bed$V4 %<span class="keyword">in</span>% rownames(peaks_diffbind),]</span><br><span class="line"><span class="comment"># 保存文件</span></span><br><span class="line">write.table(peaks_diffbind_bed,<span class="string">"m6A_seq/CallPeak/peaks_diffBind.bed"</span>,sep=<span class="string">"\t"</span>,col.names=<span class="literal">F</span>,row.names=<span class="literal">F</span>,quote=<span class="literal">F</span>)</span><br></pre></td></tr></table></figure>

<p>接着，用基因组注释文件GFF/GTF注释peaks</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bedtools intersect -wa -wb -a m6A_seq&#x2F;CallPeak&#x2F;peaks_diffBind.bed -b Ref&#x2F;mm10&#x2F;mm10_trans&#x2F;Mus_musculus.GRCm38.91.gtf &gt;m6A_seq&#x2F;CallPeak&#x2F;peaks_diffbind.anno.bed</span><br><span class="line"></span><br><span class="line">$ head m6A_seq&#x2F;CallPeak&#x2F;peaks_diffbind.anno.bed</span><br></pre></td></tr></table></figure>



<h2 id="peaks注释基因的富集分析"><a href="#peaks注释基因的富集分析" class="headerlink" title="peaks注释基因的富集分析"></a>peaks注释基因的富集分析</h2><h3 id="clusterProfiler-GO-enrichment-analysis"><a href="#clusterProfiler-GO-enrichment-analysis" class="headerlink" title="clusterProfiler: GO enrichment analysis"></a>clusterProfiler: GO enrichment analysis</h3><p>多数人进行GO富集分析时喜欢使用DAVID，但是由于DAVID的最新版本是在2016年更新的，数据并不是最新的，所以不推荐使用DAVID。</p>
<p>推荐使用bioconductor包<strong>clusterProfiler</strong></p>
<p><strong>准备geneList</strong></p>
<p>从<code>DiffBind peaks annotation</code>中获得的peaks_diffbind.anno.bed文件中提取geneID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cut -f 13 m6A_seq&#x2F;CallPeak&#x2F;peaks_diffbind.anno.bed | \</span><br><span class="line">	awk &#39;BEGIN&#123;FS&#x3D;&quot;;&quot;&#125; &#123;print $1&#125;&#39; | \</span><br><span class="line">	perl -ane &#39;chomp;$F[1]&#x3D;~ s&#x2F;\&quot;&#x2F;&#x2F;g;print &quot;$F[1]\n&quot;&#39; | sort | uniq &gt;m6A_seq&#x2F;CallPeak&#x2F;peaks_diffbind_geneList.txt</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 载入geneList，最终提供给enrichGO的gene list应该是一个geneID的向量</span></span><br><span class="line">gene_list &lt;- read.table("peaks_diffbind_geneList.txt",header=F)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ID转换，转换需要的信息来自于对应物种的数据包（orgDB），所以使用前需要提前安装好数据包</span></span><br><span class="line">eg = bitr(gene_list$V1, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># ID转换支持的ID类型可以通过以下方式查看</span></span></span><br><span class="line">keytypes(org.Hs.eg.db)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 当ID转换涉及KEGG ID时需要使用特殊的函数bitr_kegg，只能在kegg，ncbi-geneid，ncbi-proteinid和uniprot之间进行转换</span></span></span><br><span class="line">eg2np &lt;- bitr_kegg(hg, fromType='kegg', toType='ncbi-proteinid', organism='hsa')</span><br></pre></td></tr></table></figure>



<p>GO over-representation test</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 需要使用到相应物种的基因组注释数据包（org.Xx.eg.db），请提前安装好，下面以老鼠为例</span><br><span class="line">ego &lt;- enrichGO(gene         &#x3D; gene_list$V1,</span><br><span class="line">                OrgDb         &#x3D; org.Mm.eg.db,</span><br><span class="line">        		keytype       &#x3D; &#39;ENSEMBL&#39;,</span><br><span class="line">                ont           &#x3D; &quot;CC&quot;,</span><br><span class="line">                pAdjustMethod &#x3D; &quot;BH&quot;,</span><br><span class="line">                pvalueCutoff  &#x3D; 0.01,</span><br><span class="line">                qvalueCutoff  &#x3D; 0.05,</span><br><span class="line">                readable      &#x3D; TRUE)</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<blockquote>
<ul>
<li>gene: a vector of entrez gene id</li>
<li>OrgDb: OrgDb</li>
<li>keytype: keytype of input gene</li>
<li>ont: One of “MF”, “BP”, and “CC” subontologies</li>
<li>pvalueCutoff: Cutoff value of pvalue</li>
<li>pAdjustMethod: one of “holm”, “hochberg”, “hommel”, “bonferroni”, “BH”, “BY”, “fdr”, “none”</li>
<li>qvalueCutoff: qvalue cutoff</li>
<li>readable: whether mapping gene ID to gene Name</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head(ego)</span><br></pre></td></tr></table></figure>

<p>富集分析结果可视化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 绘制气泡图</span><br><span class="line"></span><br><span class="line">## 可以使用clusterProfiler中提供的绘图函数dotplot</span><br><span class="line">dotplot(ego)</span><br><span class="line"></span><br><span class="line">## 也可以使用ggplot2进行自定义绘图</span><br><span class="line">library(ggplot2)</span><br><span class="line">p&lt;-ggplot(ego)+geom_point(aes(x&#x3D;)</span><br></pre></td></tr></table></figure>

<p><img src="https://ming-lian.github.io/images/MeRIP-seq-GOenrich-dotplot.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 绘制GOterm拓扑关系网，依赖topGO和Rgraphviz</span><br><span class="line">library(topGO)</span><br><span class="line">library(Rgraphviz)</span><br><span class="line"># 画出来的拓扑图中节点的文字太小，看不清，这是一个问题</span><br><span class="line">plotGOgraph(ego)</span><br></pre></td></tr></table></figure>

<p><img src="https://ming-lian.github.io/images/MeRIP-seq-GOtop-graph.png" alt="img"></p>
<hr>
<p>参考资料：</p>
<p>(1) Zhang C, Chen Y, Sun B, et al. m(6)A modulates haematopoietic stem and progenitor cell specification[J]. Nature, 2017, 549(7671):273.</p>
<p>(2) <a href="http://mp.weixin.qq.com/s/TKwWKEgfZWskP9NWjYO_Ug" target="_blank" rel="noopener">BIG科研 | 细胞质内的m6A结合蛋白YTHDF3促进mRNA的翻译</a></p>
<p>(3) Pertea M, Kim D, Pertea G, et al. Transcript-level expression analysis of RNA-seq experiments with HISAT, StringTie, and Ballgown[J]. Nature Protocols, 2016, 11(9):1650.</p>
<p>(4) <a href="https://github.com/Ming-Lian/Memo/blob/master/ChIP-seq-pipeline.md" target="_blank" rel="noopener">ChIP-seq-pipeline</a></p>
<p>(5) <a href="https://github.com/jmzeng1314/NGS-pipeline/tree/master/CHIPseq" target="_blank" rel="noopener">ChIPseq pipeline on jmzeng1314’s github</a></p>
<p>(6) <a href="https://github.com/crazyhottommy/ChIP-seq-analysis" target="_blank" rel="noopener">ChIPseq pipeline on crazyhottommy’s github</a></p>
<p>(7) <a href="https://github.com/crazyhottommy/ChIP-seq-analysis/blob/master/part3.1_Differential_binding_DiffBind_lib_size.md" target="_blank" rel="noopener">library size and normalization for ChIP-seq</a></p>
<p>(8) <a href="http://www.bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html" target="_blank" rel="noopener">Bioconductor tutorial: Analyzing RNA-seq data with DESeq2</a></p>
<p>(9) <a href="http://www.bioconductor.org/packages/release/bioc/vignettes/clusterProfiler/inst/doc/clusterProfiler.html#introduction" target="_blank" rel="noopener">Bioconductor tutorial: clusterProfiler</a></p>
<p>(10) 国科大-韩春生《生物信息学应用 - 模序搜索》ppt</p>
]]></content>
      <categories>
        <category>project</category>
        <category>MeRIP-seq</category>
      </categories>
      <tags>
        <tag>m6A</tag>
        <tag>MeRIP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文本处理三架马车之二 awk</title>
    <url>/2019/11/18/shell_awk/</url>
    <content><![CDATA[<h1 id="Linux文本处理三架马车之二-awk-amp-正则表达"><a href="#Linux文本处理三架马车之二-awk-amp-正则表达" class="headerlink" title="Linux文本处理三架马车之二 awk &amp; 正则表达"></a>Linux文本处理三架马车之二 awk &amp; 正则表达</h1><h4 id="文章主要包括三大块"><a href="#文章主要包括三大块" class="headerlink" title="文章主要包括三大块"></a>文章主要包括三大块</h4><p>第一部分：</p>
<p>awk</p>
<p>第二部分：</p>
<p>printf：文本格式化处理</p>
<p>第三部分：</p>
<p>正则表达式的理解</p>
<p>持续更新中…</p>
<p>第四部分：</p>
<p>awk的后续学习资料：待整理</p>
<a id="more"></a>

<h2 id="第一部分：awk处理“列”"><a href="#第一部分：awk处理“列”" class="headerlink" title="第一部分：awk处理“列”"></a>第一部分：awk处理“列”</h2><blockquote>
<p>参数<br>awk [option] ‘BEGIN{初始代码} {循环代码} END{最后代码}’ filename</p>
</blockquote>
<blockquote>
<p>运算符<br>|| 逻辑或<br>&amp;&amp; 逻辑与<br>~ ~! 匹配正则表达式和不匹配正则表达式</p>
</blockquote>
<p><img src="/2019/11/18/shell_awk/1574154967542.png" alt="1574154967542"></p>
<h3 id="充分了解awk"><a href="#充分了解awk" class="headerlink" title="充分了解awk"></a>充分了解awk</h3><h4 id="第一：-自定义分隔符-F"><a href="#第一：-自定义分隔符-F" class="headerlink" title="第一： 自定义分隔符 -F"></a>第一： 自定义分隔符 -F</h4><p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -F : '&#123;print $1"\t"$3&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以冒号为分隔符，打印每行的1、3字段，\t表示tab，默认时空格</span></span><br></pre></td></tr></table></figure>

<h4 id="第二：-理解-v"><a href="#第二：-理解-v" class="headerlink" title="第二： 理解 -v"></a>第二： 理解 -v</h4><blockquote>
<p>-v var=value 自定义变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -v test='hello gawk' '&#123;print test&#125;' /etc/fstab</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里自定义了<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>

<h4 id="第三：理解FS，OFS-和RS，ORS"><a href="#第三：理解FS，OFS-和RS，ORS" class="headerlink" title="第三：理解FS，OFS 和RS，ORS"></a>第三：理解FS，OFS 和RS，ORS</h4><h5 id="FS-和-OFS-可以看做是字段分隔符"><a href="#FS-和-OFS-可以看做是字段分隔符" class="headerlink" title="FS 和 OFS 可以看做是字段分隔符"></a>FS 和 OFS 可以看做是字段分隔符</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -v FS=':' '&#123;print $1,FS,$3&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以冒号为输入字段分隔符，打印1、：、3字段</span></span><br><span class="line">awk -v FS=':' -v OFS='-' '&#123;print $1,$3,$7&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以冒号为输入字段分隔符，以----为输出字段分隔符，打印1、3、7字段</span></span><br></pre></td></tr></table></figure>

<h5 id="RS-和-ORS-可以看做是换行符"><a href="#RS-和-ORS-可以看做是换行符" class="headerlink" title="RS 和 ORS 可以看做是换行符"></a>RS 和 ORS 可以看做是换行符</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -v RS=' ' -v ORS='###' '&#123;print$1,$2&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以空格为输入记录分隔符，以<span class="comment">###为输出记录分隔符，打印每行</span></span></span><br><span class="line">awk -v RS=' ' '&#123;print$1,$2&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以空格为输入记录分隔符，碰到空格就换行，打印每行</span></span><br></pre></td></tr></table></figure>



<h4 id="awk实战代码"><a href="#awk实战代码" class="headerlink" title="awk实战代码"></a>awk实战代码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在gtf文件的第一列的N前加入ref| </span></span><br><span class="line">cat ref_GRCh38.p12_top_level.gff3 |grep -v '^#' |awk 'BEGIN&#123;FS='\t';OFS='\t'&#125;&#123;gsub(/^N/,"ref|N",$1);print $0&#125;' </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在gtf文件的第一列的最后加入| </span></span><br><span class="line">cat ref_GRCh38.p12_top_level.gff3_step1 |grep -v '^#' |awk 'BEGIN&#123;FS='\t';OFS='\t'&#125;&#123;gsub(/$/,"|",$1);print $0&#125;'</span><br></pre></td></tr></table></figure>

<p>打印除了第一行列的所有列</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ref_GRCh38.p12_top_level.gff3 |head -50|grep -v '^#' |awk '&#123;for(i=2;i&lt;=NF;++i) printf $i "\t";printf "\n"&#125;'</span><br></pre></td></tr></table></figure>

<p>第五步整理好注释信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcat ref_GRCh38.p12_top_level.gff3.gz |grep -v '#'|cut -f 9|awk '/gene_biotype/&#123;print $0&#125;'|awk -F ';' '&#123;for(i=1;i&lt;=NF;i++)&#123;if($i ~/^gene_biotype=/)&#123;print $i&#125;&#125;&#125;' |awk -F '=' '&#123;print$2&#125;'  &gt;gene_type</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 找到有gene_biotype的行，并将这一行中的以gene_biotype=为开头的列找出来</span></span></span><br><span class="line">zcat ref_GRCh38.p12_top_level.gff3.gz |grep -v '#'|cut -f 9|awk '/gene_biotype/&#123;print $0&#125;'|awk -F ';' '&#123;for(i=1;i&lt;=NF;i++)&#123;if($i ~/^gene=/)&#123;print $i&#125;&#125;&#125;' |awk -F '=' '&#123;print$2&#125;'  &gt;gene_name</span><br><span class="line">paste gene_name gene_type &gt;NCBI_ID_trans.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>awk 玩转NCBI下载下来的gff文件</p>
</blockquote>
<h3 id="awk-包含"><a href="#awk-包含" class="headerlink" title="awk 包含"></a>awk 包含</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat patient_info.txt |awk '/FFG/&#123;printf "%s_tumor\t%s\n",$2,$4&#125;' &gt; tumor_config</span><br><span class="line">cat patient_info.txt |awk '$0~"blood|BC"&#123;printf "%s_normal\t%s\n",$2,$4&#125;' &gt; normal_config</span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title></a></h3><p>awk 有个类似的查找功能//</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">history</span> |awk <span class="string">'/prefetch/&#123;print $0&#125;'</span></span><br><span class="line"><span class="built_in">echo</span> 1 2 3| awk <span class="string">'&#123; print "total pay for", $1, "is", $2 * $3 &#125;'</span></span><br></pre></td></tr></table></figure>

<p>awk -F #-F相当于内置变量FS, 指定分割字符</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd |awk  -<span class="type">F</span> ':'  '&#123;<span class="built_in">print</span> $<span class="number">1</span><span class="string">"\t"</span>$<span class="number">7</span>&#125;' </span><br><span class="line">cat /etc/passwd |awk  -<span class="type">F</span> ':'  '<span class="type">BEGIN</span> &#123;<span class="built_in">print</span> <span class="string">"name,shell"</span>&#125;  &#123;<span class="built_in">print</span> $<span class="number">1</span><span class="string">","</span>$<span class="number">7</span>&#125; <span class="type">END</span> &#123;<span class="built_in">print</span> <span class="string">"blue,/bin/nosh"</span>&#125;'</span><br><span class="line">awk '&#123;<span class="built_in">count</span>++;<span class="built_in">print</span> $<span class="number">0</span>;&#125; <span class="type">END</span>&#123;<span class="built_in">print</span> <span class="string">"user count is "</span>, <span class="built_in">count</span>&#125;' /etc/passwd</span><br><span class="line">awk -<span class="type">F</span> ':' '<span class="type">BEGIN</span> &#123;<span class="built_in">count</span>=<span class="number">0</span>;&#125; &#123;name[<span class="built_in">count</span>] = $<span class="number">1</span>;<span class="built_in">count</span>++;&#125;; <span class="type">END</span>&#123;<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="type">NR</span>; i++) <span class="built_in">print</span> i, name[i]&#125;' /etc/passwd</span><br><span class="line">awk '$<span class="number">3</span> == <span class="number">0</span> &#123; <span class="built_in">print</span> $<span class="number">1</span> &#125;' emp.data</span><br><span class="line">awk '$<span class="number">3</span> &gt;<span class="number">0</span> &#123; <span class="built_in">print</span> $<span class="number">1</span>, $<span class="number">2</span> * $<span class="number">3</span> &#125;' emp.data</span><br><span class="line">awk '$<span class="number">3</span> &gt; <span class="number">15</span> &#123; time = time + <span class="number">1</span> &#125; <span class="type">END</span>&#123; <span class="built_in">print</span> time, <span class="string">"s"</span> &#125;'</span><br><span class="line">awk '<span class="type">NF</span> != <span class="number">3</span>     &#123; <span class="built_in">print</span> $<span class="number">0</span>, <span class="string">"number of fields is not equal to 3"</span> &#125;'  # 与 &amp;&amp; ， 或 || ， 以及非 !</span><br><span class="line">awk '$<span class="number">2</span> &lt; <span class="number">3.35</span>   &#123; <span class="built_in">print</span> $<span class="number">0</span>, <span class="string">"rate is below minimum wage"</span> &#125;'  # <span class="type">Eg</span>: !($<span class="number">2</span> &lt; <span class="number">4</span> &amp;&amp; $<span class="number">3</span> &lt; <span class="number">20</span>)</span><br><span class="line">awk '<span class="type">END</span> &#123; <span class="built_in">print</span> <span class="type">NR</span>, <span class="string">"employees"</span> &#125;'</span><br><span class="line"></span><br><span class="line">awk     '&#123; pay = pay + $<span class="number">2</span> * $<span class="number">3</span> &#125;</span><br><span class="line"><span class="type">END</span> &#123; <span class="built_in">print</span> <span class="type">NR</span>, <span class="string">"employees"</span></span><br><span class="line">      <span class="built_in">print</span> <span class="string">"total pay is"</span>, pay</span><br><span class="line">      <span class="built_in">print</span> <span class="string">"average pay is"</span>, pay/<span class="type">NR</span></span><br><span class="line">    &#125;'</span><br></pre></td></tr></table></figure>



<h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat patient_info |awk '/FFG/&#123;printf "%s_tumor\t%s\n",$2,$4&#125;' &gt; tumor_config</span><br><span class="line">cat patient_info |awk '$0~"blood|BC"&#123;printf "%s_normal\t%s\n",$2,$4&#125;' &gt; normal_config</span><br></pre></td></tr></table></figure>

<p>awk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat tumor_config |awk '&#123;print$2&#125;'|awk -F '_' 'BEGIN&#123;FS='_';OFS='_'&#125;&#123;for(i=1;i&lt;=(NF-2);i++)&#123;printf "%s_", $i&#125;; printf "\n"&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改进</span></span><br><span class="line">cat tumor_config |awk '&#123;print$2&#125;'|awk -F '_' '&#123;for(i=1;i&lt;=(NF-2);i++)&#123;printf "%s_", $i&#125;; printf "\n"&#125;' |awk '&#123;sub(/_$/,"")&#125;1' &gt;tumor_config_2</span><br><span class="line"></span><br><span class="line">cat normal_config |awk '&#123;print$2&#125;'|awk -F '_' '&#123;for(i=1;i&lt;=(NF-2);i++)&#123;printf "%s_", $i&#125;; printf "\n"&#125;' |awk '&#123;sub(/_$/,"")&#125;1' &gt;normal_config_2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个时候printf 占主导，所有OFS 没有差别</p>
</blockquote>
<h5 id="删除最后一个字符"><a href="#删除最后一个字符" class="headerlink" title="删除最后一个字符"></a>删除最后一个字符</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed 's/.$//'</span><br><span class="line">awk '&#123;sub(/.$/,"")&#125;1'</span><br><span class="line">awk '&#123;printf $0"\b \n"&#125;' ufile</span><br></pre></td></tr></table></figure>



<h2 id="第三步部分：关于正则表达式的理解与运用"><a href="#第三步部分：关于正则表达式的理解与运用" class="headerlink" title="第三步部分：关于正则表达式的理解与运用"></a>第三步部分：关于正则表达式的理解与运用</h2><p><img src="/2019/11/18/shell_awk/1574155088122.png" alt="1574155088122"></p>
<p>正则 匹配规则：</p>
<p>*                 前面元素出现0次以上</p>
<p>.                 匹配任何单个字符</p>
<p>?                 前面元素出现0次或1次</p>
<p>+                 前面元素出现1次以上</p>
<p>.*                表示0个以上的任意字符。</p>
<p>.+                表示1个以上的任意字符。</p>
<p>体现了几个关键知识点：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -n '^$' # 删除空行</span><br></pre></td></tr></table></figure>







<p><strong>关于正则表达式的运用，删除红色方框中的内容</strong></p>
<p><strong>这里体现了关于统配符的一个坑</strong></p>
<p><img src="/2019/11/18/shell_awk/1574155050867.png" alt="1574155050867"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">less colume1 |sed -r 's/_.*\.sort/\.sort/'</span><br></pre></td></tr></table></figure>

<h2 id="代表了任意字符"><a href="#代表了任意字符" class="headerlink" title=".* 代表了任意字符"></a>.* 代表了任意字符</h2><h5 id="我自己傻傻的解决方式"><a href="#我自己傻傻的解决方式" class="headerlink" title="我自己傻傻的解决方式"></a>我自己傻傻的解决方式</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat colume1 | awk <span class="string">'&#123;gsub(/\_L4\_[a-z][0-9]/,".",$0);print$0&#125;'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat colume1 |awk <span class="string">'&#123;gsub(/_L4_*/,"",$0);print$0&#125;'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat colume1|sed -r <span class="string">'s/\_L4\_*sort//g'</span></span></span><br><span class="line">ls M* &gt;colume1</span><br><span class="line"></span><br><span class="line">cat colume1|awk -F '.sort' '&#123;print$2&#125;' &gt;colume3</span><br><span class="line">cat colume1|awk -F '.sort' '&#123;print$1&#125;' &gt;colume2</span><br><span class="line"></span><br><span class="line">cat colume2 |awk '&#123;gsub(/\_L4\_....../,"",$0);print$0&#125;' &gt;colume4</span><br><span class="line"><span class="meta">#</span><span class="bash"> . 表示任意字符</span></span><br><span class="line">paste colume4 colume3|awk '&#123;printf"%s%s\n",$1,$2&#125;' &gt; final_colume</span><br><span class="line">paste colume1 final_colume &gt;config</span><br><span class="line">vim rename.sh</span><br><span class="line">cat $1| while read id </span><br><span class="line">do</span><br><span class="line">    arr=($id)</span><br><span class="line">    filename=$&#123;arr[0]&#125;</span><br><span class="line">    newfile=$&#123;arr[1]&#125;</span><br><span class="line">    mv $filename $newfile</span><br><span class="line">done</span><br><span class="line">bash rename.sh ./config</span><br></pre></td></tr></table></figure>





<p>参考<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Firockcode%2Fp%2F6700135.html" target="_blank" rel="noopener">https://www.cnblogs.com/irockcode/p/6700135.html</a></p>
<p>范例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Linux"</span> | awk <span class="string">'&#123;printf "|%-15s|\n",$1&#125;'</span></span></span><br><span class="line"></span><br><span class="line">|Linux     |</span><br></pre></td></tr></table></figure>

<p>说明：对于echo命令的输出，Linux是经管道发给awk。printf函数包含一个控制串。百分号让printf做好准备，它要打印一个占15个格、向左对齐的字符串，这个字符串夹在两个竖杠之间，并且以换行符结尾。百分号后的短划线表示左对齐。控制串后面跟了一个逗号和$1。printf将根据控制串中的格式说明来格式化字符串Linux。</p>
<p>范例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Linux"</span> | awk <span class="string">'&#123;printf "|%15s|\n",$1&#125;'</span></span></span><br><span class="line"></span><br><span class="line">|          Linux|</span><br></pre></td></tr></table></figure>

<p>说明：字符串Linux被打印成一个占15 格、向右对齐的字符串，夹在两个竖杠之间，以<br>换行符结尾。</p>
<p><img src="/2019/11/18/shell_awk/1574154908840.png" alt="1574154908840"></p>
<h4 id="实战项目备份"><a href="#实战项目备份" class="headerlink" title="实战项目备份"></a>实战项目备份</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat 1| awk '/FFG/&#123;printf"%s\t%s_TUMOR\n",$1,$2&#125;'</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/shell_awk/1574154946261.png" alt="1574154946261"></p>
<h4 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h4><h4 id="awk的后续学习资料：待整理"><a href="#awk的后续学习资料：待整理" class="headerlink" title="awk的后续学习资料：待整理"></a>awk的后续学习资料：待整理</h4><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>基本格式：</p>
<p>awk [options] ‘program’ var=value file…<br>awk [options] -f programfile var=value file…<br>awk [options] ‘BEGIN{ action;… } pattern{ action;… } END{ action;… }’ file …</p>
<p>program：pattern{action statements;..}</p>
<p>pattern部分决定动作语句何时触发及触发事件<br>action statements对数据进行处理，放在{}内指明</p>
<p>awk执行时，由分隔符分隔的字段（域）标记1,2..n称为域标识。0为所有域，注意：和shell中变量$符含义不同</p>
<p>文件的每一行称为记录。省略action，则默认执行 print $0 的操作</p>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol>
<li>执行BEGIN{action;… }语句块中的语句</li>
<li>从文件或标准输入(stdin)读取一行，然后执行pattern{ action;… }语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕</li>
<li>当读至输入流末尾时，执行END{action;…}语句块</li>
</ol>
<p>BEGIN语句块在awk开始从输入流中读取行之前被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中</p>
<p>END语句块在awk从输入流中读取完所有的行之后即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块</p>
<p>pattern语句块中的通用命令是最重要的部分，也是可选的。如果没有提供pattern语句块，则默认执行{ print }，即打印每一个读取到的行，awk读取的每一行都会执行该语句块</p>
<h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><p>格式：print item1, item2, …</p>
<p>要点：</p>
<ol>
<li>逗号分隔符</li>
<li>输出的各item可以字符串，也可以是数值；当前记录的字段、变量或awk的表达式</li>
<li>如省略item，相当于print $0</li>
</ol>
<p>awk -F 自定义分隔符</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -F : '&#123;print&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以冒号为分隔符，打印每行</span></span><br><span class="line">awk -F : '&#123;print $0&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等同于awk –F: <span class="string">'&#123;print&#125;'</span> /etc/passwd</span></span><br><span class="line">awk -F : '&#123;print $1&#125;'  /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以冒号为分隔符，打印每行的第一个字段</span></span><br><span class="line">awk  -F : '&#123;print "root"&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以冒号为分隔符，每行都打印root</span></span><br><span class="line">awk -F : '&#123;print $1"\t"$3&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以冒号为分隔符，打印每行的1、3字段，\t表示tab，默认时空格</span></span><br></pre></td></tr></table></figure>



<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>引用内置变量和自定义变量都需要加$</p>
<h3 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h3><p>默认字段分隔符为空格，默认记录分隔符为回车</p>
<p>FS：输入字段分隔符，默认为空白字符</p>
<p>OFS：输出字段分隔符，默认为空白字符</p>
<p>RS：输入记录分隔符，指定输入时的换行符</p>
<p>ORS：输出记录分隔符，输出时用指定符号代替换行符</p>
<p>NF：字段数量</p>
<p>NR：记录号，多文件一起记录</p>
<p>FNR：各文件分别计数,记录号</p>
<p>FILENAME：当前文件名</p>
<p>ARGC：命令行参数的个数</p>
<p>ARGV：数组，保存的是命令行所给定的各参数</p>
<p>示例：</p>
<h5 id="FS-和-OFS-可以看做是字段分隔符-1"><a href="#FS-和-OFS-可以看做是字段分隔符-1" class="headerlink" title="FS 和 OFS 可以看做是字段分隔符"></a>FS 和 OFS 可以看做是字段分隔符</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -v FS=':' '&#123;print $1,FS,$3&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以冒号为输入字段分隔符，打印1、：、3字段</span></span><br><span class="line">awk -v FS=':' -v OFS='-' '&#123;print $1,$3,$7&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以冒号为输入字段分隔符，以----为输出字段分隔符，打印1、3、7字段</span></span><br></pre></td></tr></table></figure>

<h5 id="RS-和-ORS-可以看做是换行符-1"><a href="#RS-和-ORS-可以看做是换行符-1" class="headerlink" title="RS 和 ORS 可以看做是换行符"></a>RS 和 ORS 可以看做是换行符</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -v RS=' ' -v ORS='###' '&#123;print$1,$2&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以空格为输入记录分隔符，以<span class="comment">###为输出记录分隔符，打印每行</span></span></span><br><span class="line">awk -v RS=' ' '&#123;print$1,$2&#125;' /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以空格为输入记录分隔符，碰到空格就换行，打印每行</span></span><br></pre></td></tr></table></figure>





<ol>
<li>awk -v RS=’ ‘ ‘{print }’ /etc/passwd：以空格为输入记录分隔符，碰到空格就换行，打印每行</li>
</ol>
<ol start="2">
<li><p>awk -F： ‘{print NF}’ /etc/fstab：以冒号为字段分隔符，打印每行被冒号分割成的字段数</p>
</li>
<li><p>awk -F: ‘{print $(NF-1)}’ /etc/passwd</p>
</li>
<li><p>awk ‘{print NR}’ /etc/fstab：打印记录号</p>
</li>
<li><p>awk END’{print NR}’ /etc/fstab：结束时打印记录号</p>
</li>
<li><p>awk ‘{print FNR}’ /etc/fstab /etc/inittab：分别打印两个文件的记录号，独立计数</p>
</li>
<li><p>awk ‘{print FILENAME}’ /etc/fstab：每行都打印当前文件名</p>
</li>
<li><p>awk ‘{print ARGC}’ /etc/fstab /etc/inittab：每行都打印当前命令行的参数个数</p>
</li>
<li><p>awk ‘BEGIN {print ARGC}’ /etc/fstab /etc/inittab：开始打印当前命令行的参数个数</p>
</li>
<li><p>awk ‘BEGIN {print ARGV[0]}’ /etc/fstab /etc/inittab：开始打印命令行所给定的第一个参数</p>
</li>
</ol>
<h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><h4 id="第二：-理解-v-1"><a href="#第二：-理解-v-1" class="headerlink" title="第二： 理解 -v"></a>第二： 理解 -v</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 自定义变量</span></span></span><br><span class="line"></span><br><span class="line">定义方式：</span><br><span class="line"></span><br><span class="line">-v var=value</span><br></pre></td></tr></table></figure>

<p>定义方式：</p>
<p>-v var=value<br>在program中直接定义</p>
<p>示例：</p>
<ol>
<li><p>awk -v test=’hello gawk’ ‘{print test}’ /etc/fstab：定义变量test，每行都打印test变量的内容</p>
</li>
<li><p>awk -v test=’hello gawk’ ‘BEGIN{print test}’：定义变量test，开始打印test变量的内容</p>
</li>
<li><p>awk ‘BEGIN{test=”hello,gawk”;print test}’：在program中定义变量test，开始i打印test变量的内容</p>
</li>
<li><p>awk –F:‘{sex=“male”;print $1,sex,age;age=18}’ /etc/passwd：首行未打印age是因为起初age变量未定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]# awk -F: &#39;&#123;sex&#x3D;&quot;male&quot;;print $1,sex,age;age&#x3D;18&#125;&#39; &#x2F;etc&#x2F;passwd</span><br><span class="line">root male </span><br><span class="line">bin male 18</span><br><span class="line">......</span><br><span class="line">tcpdump male 18</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="p’rintf"><a href="#p’rintf" class="headerlink" title="p’rintf"></a>p’rintf</h2><p>格式化输出：printf “FORMAT”, item1, item2, …</p>
<ol>
<li>必须指定FORMAT</li>
<li>不会自动换行，需要显式给出换行控制符，\n</li>
<li>FORMAT中需要分别为后面每个item指定格式符</li>
</ol>
<p>格式符：</p>
<p>%c：显示字符的ASCII码<br>%d, %i：显示十进制整数<br>%e, %E：显示科学计数法数值<br>%f：显示为浮点数<br>%g, %G：以科学计数法或浮点形式显示数值<br>%s：显示字符串<br>%u：无符号整数<br>%%：显示%自身</p>
<p>修饰符：</p>
<h1 id="：第一个数字控制显示的宽度；第二个-表示小数点后精度，-3-1f"><a href="#：第一个数字控制显示的宽度；第二个-表示小数点后精度，-3-1f" class="headerlink" title="[.#]：第一个数字控制显示的宽度；第二个#表示小数点后精度，%3.1f"></a>[.#]：第一个数字控制显示的宽度；第二个#表示小数点后精度，%3.1f</h1><p>-: 左对齐（默认右对齐） %-15s<br>+：显示数值的正负符号 %+d</p>
<p>示例：</p>
<ol>
<li>awk -F: ‘{printf “%s”,$1}’ /etc/passwd</li>
<li>awk -F: ‘{printf “%s\n”,$1}’ /etc/passwd</li>
<li>awk -F: ‘{printf “%-20s %10d\n”,1,3}’ /etc/passwd</li>
<li>awk -F: ‘{printf “Username: %s\n”,$1}’ /etc/passwd</li>
<li>awk -F: ‘{printf “Username: %s,UID:%d\n”,1,3}’ /etc/passwd</li>
<li>awk -F: ‘{printf “Username: %15s,UID:%d\n”,1,3}’ /etc/passwd</li>
<li>awk -F: ‘{printf “Username: %15s,UID:%d\n”,1,3}’ /etc/passwd</li>
</ol>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>算术操作符：+、-、*、/、^、%</p>
<p>赋值操作符：=、+=、-=、*=、/=、%=、^=、++、–</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos6 ~]# awk &#39;BEGIN&#123;i&#x3D;0;print ++i,i&#125;&#39;</span><br><span class="line">1 1</span><br><span class="line">[root@centos6 ~]# awk &#39;BEGIN&#123;i&#x3D;0;print i++,i&#125;&#39;</span><br><span class="line">0 1</span><br></pre></td></tr></table></figure>

<p>比较操作符：==、!=、&gt;、&gt;=、&lt;、&lt;=</p>
<p>模式匹配符：<del>、!</del></p>
<p>示例：</p>
<ol>
<li>awk –F: ‘0 ~ /root/{print1}‘ /etc/passwd</li>
<li>awk ‘$0 ~“^root”‘ /etc/passwd</li>
<li>awk ‘$0 !~ /root/‘ /etc/passwd</li>
<li>awk –F: ‘$3==0’ /etc/passwd</li>
</ol>
<p>逻辑操作符：&amp;&amp;、||、!</p>
<p>示例：</p>
<ol>
<li>awk -F: ‘3&gt;=0 &amp;&amp;3&lt;=1000{print $1}’ /etc/passwd</li>
<li>awk -F: ‘3==0 ||3&gt;=1000 {print $1}’ /etc/passwd</li>
<li>awk -F: ‘!(3==0) {print1}’ /etc/passwd</li>
<li>awk -F: ‘!(3&gt;=500) {print3}’ /etc/passwd</li>
</ol>
<p>条件表达式（三目表达式）：selector?if-true-expression:if-false-expression</p>
<p>示例：</p>
<p>awk -F: ‘{3&gt;=1000?usertype=”Common User”:usertype=”Sysadmin or SysUser”;printf “%15s:%-s\n”,1,usertype}’ /etc/passwd</p>
<h2 id="awk-PATTERN"><a href="#awk-PATTERN" class="headerlink" title="awk PATTERN"></a>awk PATTERN</h2><p>根据pattern条件，过滤普配的行，再做处理</p>
<ol>
<li>如果未指定：：空模式，匹配每一行</li>
<li>/regular expression/：正则匹配，仅处理能够模式匹配到的行，需要用/ /括起来</li>
<li>relational expression：关系表达式，结果为“真”才会被处理（真：结果为非0值，非空字符串、假：结果为空字符串或0值）</li>
<li>/pat1/,/pat2/</li>
<li>BEGIN/END模式</li>
</ol>
<p>示例：</p>
<ol>
<li>awk -F: ‘i=1;j=1{print i,j}’ /etc/passwd</li>
<li>awk ‘!0’ /etc/passwd ; awk ‘!1’ /etc/passwd</li>
<li>awk -F: ‘3&gt;=1000{print1,$3}’ /etc/passwd</li>
<li>awk -F: ‘3&lt;1000{print1,$3}’ /etc/passwd</li>
<li>awk -F: ‘NF==”/bin/bash”{print1,$NF}’ /etc/passwd</li>
<li>awk -F: ‘NF~”bash”{print1,$NF}’ /etc/passwd</li>
<li>awk -F: ‘/^root&gt;/,/^nobody&gt;/{print $1}’ /etc/passwd：&gt;锚定单词词尾</li>
<li>awk -F: ‘NR&gt;=10 &amp;&amp; NR&lt;=20{print NR,$1}’ /etc/passwd</li>
<li>awk -F: ‘BEGIN{print “USER USERID”}{print 1”:”3}END{print “end file”}’ /etc/passwd</li>
<li>awk -F: ‘{print “USER USERID”;print 1”:”3}END{print “end file”}’ /etc/passwd</li>
<li>awk -F: ‘BEGIN{print “ USER UID \n————— “}{print 1,3}’ /etc/passwd</li>
<li>awk -F: ‘BEGIN{print “ USER UID \n————— “}{print 1,3}END{print “==============”}’ /etc/passwd</li>
<li>seq 10 | awk ‘i=0’：0表示假，不执行操作</li>
<li>seq 10 | awk ‘i=1’：1表示真，执行默认操作，打印全行</li>
<li>seq 10 | awk ‘i=!i’：打印奇数行</li>
<li>seq 10 | awk ‘{i=!i;print i}’</li>
<li>seq 10 | awk ‘!(i=!i)’：打印偶数行</li>
<li>seq 10 | awk -v i=1 ‘i=!i’：打印偶数行</li>
</ol>
<h2 id="awk-action"><a href="#awk-action" class="headerlink" title="awk action"></a>awk action</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><p>if(condition1){statement1}else if(condition2){statement2}else{statement3}</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -F: '&#123;if(3&gt;=1000)print1,$3&#125;' /etc/passwd</span><br><span class="line">awk -F: '&#123;if(NF=="/bin/bash")print1&#125;' /etc/passwd</span><br><span class="line">awk '&#123;if(NF&gt;5)print $0&#125;' /etc/fstab</span><br><span class="line">awk -F: '&#123;if(3&gt;=1000) &#123;printf "Common user: %s\n",1&#125; else &#123;printf "root or Sysuser: %s\n",$1&#125;&#125;' /etc/passwd</span><br><span class="line">awk -F: '&#123;if(3&gt;=1000) printf "Common user: %s\n",1; else printf "root or Sysuser: %s\n",$1&#125;' /etc/passwd</span><br><span class="line">df -h|awk -F% '/^/dev/&#123;print 1&#125;'|awk 'NF&gt;=80&#123;print 1,5&#125;’</span><br><span class="line">awk 'BEGIN&#123; test=100;if(test&gt;90)&#123;print "very good"&#125;else if(test&gt;60)&#123; print "good"&#125;else&#123;print "no pass"&#125;&#125;'</span><br></pre></td></tr></table></figure>





<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>while(condition1){statement1}</p>
<p>对一行内的多个字段逐一类似处理时使用，对数组中的各元素逐一处理时使用</p>
<p>示例：</p>
<ol>
<li>awk ‘/^[[:space:]]*linux16/{i=1;while(i&lt;=NF){print i,length(i);i++}}’ /etc/grub2.cfg</li>
<li>awk ‘/^[[:space:]]*linux16/{i=1;while(i&lt;=NF){if(length(i)&gt;=10){printi,length($i)}; i++}}’ /etc/grub2.cfg</li>
</ol>
<h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><p>do {statement;…}while(condition)</p>
<p>无论真假，至少执行一次循环体，尾部判断</p>
<p>示例：</p>
<ol>
<li>awk ‘BEGIN{total=0;i=0;do{total+=i;i++}while(i&lt;=100);print total}’：1+…+100总和</li>
</ol>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>for(expr1;expr2;expr3) {statement;…}</p>
<p>特殊用法便利数组中的元素：for(var in array) {for-body}</p>
<p>示例：</p>
<ol>
<li>awk ‘/^[[:space:]]*linux16/{for(i=1;i&lt;=NF;i++) {print i,length(i)}}’ /etc/grub2.cfg</li>
</ol>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch(expression) {case VALUE1 or /REGEXP/: statement1; case VALUE2 or /REGEXP2/: statement2; …; default: statementn}</p>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>和shell脚本中的break类似</p>
<p>awk ‘BEGIN{sum=0;for(i=1;i&lt;=100;i++){if(i==66)break;sum+=i}print sum}’</p>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>和shell脚本中的continue类似</p>
<p>awk ‘BEGIN{sum=0;for(i=1;i&lt;=100;i++){if(i%2==0)continue;sum+=i}print sum}’</p>
<h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><p>提前结束对本行处理而直接进入下一行处理（<strong>awk自身循环</strong>）</p>
<p>awk -F: ‘{if(3%2!=0)next;print1,$3}’ /etc/passwd</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>index-expression：</p>
<p>可使用任意字符串；字符串要使用双引号括起来</p>
<p>如果某数组元素事先不存在，在引用时，awk会自动创建此元素，并将其值初始化为“空串”</p>
<p>数组遍历：</p>
<p>若要遍历数组中的每个元素，要使用for循环</p>
<p>for(var in array) {for-body}</p>
<p>注意：var会遍历array的每个索引</p>
<p>示例：</p>
<ol>
<li>awk ‘BEGIN{weekdays[“mon”]=”monday”;weekdays[“tue”]=”tuesday”;print weekdays[“mon”]}’</li>
<li>awk ‘!arr[$0]++’ test.txt：去重复行</li>
<li>awk ‘{!arr[0]++;print0, arr[$0]}’ dupfile</li>
<li>awk ‘BEGIN{weekdays[“mon”]=”monday”;weekdays[“tue”]=”tuesday”;for(i in weekdays){print weekdays[i]}}’</li>
<li>netstat -tan|awk ‘/^tcp/{state[$NF]++}END{for(i in state){print i,state[i]}}’：取tcp各监听状态数量</li>
<li>awk ‘{ip[$1]++}END{for(i in ip) {print i,ip[i]}}’ /var/log/httpd/access_log</li>
</ol>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>srand()：置随机数种子<br>rand()：返回0和1之间一个随机数</p>
<p>length([s])：返回指定字符串的长度</p>
<p>sub(r,s,[t])：对t字符串进行搜索r表示的模式匹配的内容，并将第一个匹配的内容替换为s<br>gsub(r,s,[t])：对t字符串进行搜索r表示的模式匹配的内容，并全部替换为s所表示的内容</p>
<p>split(s,array,[r])：以r为分隔符，切割字符串s，并将切割后的结果保存至array所表示的数组中，第一个索引值为1,第二个索引值为2,…</p>
<p>自定义函数：<br>function name ( parameter, parameter, … ) {<br>statements<br>return expression<br>}</p>
<p>示例：</p>
<ol>
<li>awk ‘BEGIN{srand();for(i=1;i&lt;=10;i++)print int(rand()*100)}’</li>
<li>echo “2008:08:08 08:08:08” | awk ‘sub(/:/,”-“,$1)’</li>
<li>echo “2008:08:08 08:08:08” | awk ‘gsub(/:/,”-“,$0)’</li>
<li>netstat -tan|awk ‘/^tcp&gt;/{split($5,ip,”:”);count[ip[1]]++}END{for(i in count){print i,count[i]}}’：查看tcp各ip连接数量</li>
</ol>
<h3 id="system调用shell命令"><a href="#system调用shell命令" class="headerlink" title="system调用shell命令"></a>system调用shell命令</h3><p>空格是awk中的字符串连接符，如果system中需要使用awk中的变量可以使用空格分隔，或者说除了awk的变量外其他一律用””引用起来</p>
<p>示例：</p>
<ol>
<li>awk ‘BEGIN{system(“hostname”)}’</li>
<li>awk ‘BEGIN{score=100;system(“echo your score is “ score)}’</li>
</ol>
<h2 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h2><p>将awk程序写成脚本，直接调用或执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos6 app]# cat fi.awk </span><br><span class="line">&#123;if($3&gt;&#x3D;1000)&#123;print $1,$3&#125;&#125;</span><br><span class="line">[root@centos6 app]# awk -F: -f fi.awk &#x2F;etc&#x2F;passwd</span><br><span class="line">nfsnobody 65534</span><br><span class="line"></span><br><span class="line">[root@centos6 app]# cat f2.awk </span><br><span class="line">#!&#x2F;bin&#x2F;awk -f</span><br><span class="line">&#123;if($3&gt;&#x3D;1000)&#123;print $1,$3&#125;&#125;</span><br><span class="line">[root@centos6 app]# chmod +x f2.awk </span><br><span class="line">[root@centos6 app]# .&#x2F;f2.awk -F: &#x2F;etc&#x2F;passwd</span><br><span class="line">nfsnobody 65534</span><br></pre></td></tr></table></figure>

<h3 id="向awk脚本传递参数"><a href="#向awk脚本传递参数" class="headerlink" title="向awk脚本传递参数"></a>向awk脚本传递参数</h3><p>awkfile var=value var2=value2… Inputfile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos6 app]# cat test.awk </span><br><span class="line">#!&#x2F;bin&#x2F;awk -f</span><br><span class="line">&#123;if($3&gt;&#x3D;min &amp;&amp; $3&lt;&#x3D;max)&#123;print $1,$3&#125;&#125;</span><br><span class="line">[root@centos6 app]# chmod +x test.awk </span><br><span class="line">[root@centos6 app]# .&#x2F;test.awk -F: min&#x3D;100 max&#x3D;200 &#x2F;etc&#x2F;passwd</span><br><span class="line">usbmuxd 113</span><br><span class="line">avahi-autoipd 170</span><br><span class="line">abrt 173</span><br><span class="line"></span><br><span class="line">[root@centos6 app]# awk -F: -v min&#x3D;100 -v max&#x3D;200 &#39;&#123;if($3&gt;&#x3D;min &amp;&amp; $3&lt;&#x3D;max)&#123;print $1,$3&#125;&#125;&#39; &#x2F;etc&#x2F;passwd</span><br><span class="line">usbmuxd 113</span><br><span class="line">avahi-autoipd 170</span><br><span class="line">abrt 173</span><br></pre></td></tr></table></figure>



<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li><p>统计/etc/fstab文件中每个文件系统类型出现的次数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos6 app]# awk &#39;&#x2F;^UUID&#x2F;&#123;type[$3]++&#125;END&#123;for(i in type)&#123;print i,type[i]&#125;&#125;&#39; &#x2F;etc&#x2F;fstab </span><br><span class="line">swap 1</span><br><span class="line">ext4 3</span><br></pre></td></tr></table></figure>
</li>
<li><p>统计/etc/fstab文件中每个单词出现的次数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos6 app]# awk &#39;&#123;for(i&#x3D;0;i&lt;NF;i++)&#123;$(NF-i) ~ &#x2F;\&lt;[[:alpha:]]+\&gt;&#x2F; &amp;&amp; count[$(NF-i)]++&#125;&#125;END&#123;for(i in count)&#123;print i,count[i]&#125;&#125;&#39; &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>
</li>
<li><p>提取出字符串Yd$C@M05MB%9&amp;Bdh7dq+YVixp3vpw中的所有数字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos6 app]# echo &quot;Yd$C@M05MB%9&amp;Bdh7dq+YVixp3vpw&quot;|awk -F &#39;&#39; &#39;&#123;for(i&#x3D;1;i&lt;&#x3D;NF;i++)&#123;if($i ~ &#x2F;[[:digit:]]&#x2F;)printf $i&#125;&#125;&#39;</span><br><span class="line">05973[root@centos6 app]#</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决DOS攻击生产案例：根据web日志或者或者网络连接数，监控当某个IP并发连接数或者短时内PV达到100，即调用防火墙命令封掉对应的IP，监控频率每隔5分钟。防火墙命令为：iptables -A INPUT -s IP -j REJECT</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>shell_script</category>
      </categories>
      <tags>
        <tag>awk</tag>
        <tag>文本处理</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文本处理三架马车之三grep</title>
    <url>/2019/11/18/shell_grep/</url>
    <content><![CDATA[<h1 id="Linux文本处理三架马车之三grep"><a href="#Linux文本处理三架马车之三grep" class="headerlink" title="Linux文本处理三架马车之三grep"></a>Linux文本处理三架马车之三grep</h1><h1 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h1><p><strong>grep</strong>（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a 不要忽略二进制数据。</span><br><span class="line">-A&lt;显示列数&gt; 除了显示符合范本样式的那一行之外，并显示该行之后的内容。</span><br><span class="line">-b 在显示符合范本样式的那一行之外，并显示该行之前的内容。</span><br><span class="line">-c 计算符合范本样式的列数。</span><br><span class="line">-C&lt;显示列数&gt;或-&lt;显示列数&gt;  除了显示符合范本样式的那一列之外，并显示该列之前后的内容。</span><br><span class="line">-d&lt;进行动作&gt; 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。</span><br><span class="line">-e&lt;范本样式&gt; 指定字符串作为查找文件内容的范本样式。</span><br><span class="line">-E 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。</span><br><span class="line">-f&lt;范本文件&gt; 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。</span><br><span class="line">-F 将范本样式视为固定字符串的列表。</span><br><span class="line">-G 将范本样式视为普通的表示法来使用。</span><br><span class="line">-h 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。</span><br><span class="line">-H 在显示符合范本样式的那一列之前，标示该列的文件名称。</span><br><span class="line">-i 忽略字符大小写的差别。</span><br><span class="line">-l 列出文件内容符合指定的范本样式的文件名称。</span><br><span class="line">-L 列出文件内容不符合指定的范本样式的文件名称。</span><br><span class="line">-n 在显示符合范本样式的那一列之前，标示出该列的编号。</span><br><span class="line">-q 不显示任何信息。</span><br><span class="line">-R/-r 此参数的效果和指定“-d recurse”参数相同。</span><br><span class="line">-s 不显示错误信息。</span><br><span class="line">-v 反转查找。</span><br><span class="line">-w 只显示全字符合的列。</span><br><span class="line">-x 只显示全列符合的列。</span><br><span class="line">-y 此参数效果跟“-i”相同。</span><br><span class="line">-o 只输出文件中匹配到的部分。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="grep命令常见用法"><a href="#grep命令常见用法" class="headerlink" title="grep命令常见用法"></a>grep命令常见用法</h2><p>在文件中搜索一个单词，命令会返回一个包含<strong>“match_pattern”</strong>的文本行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep match_pattern file_name</span><br><span class="line">grep "match_pattern" file_name</span><br></pre></td></tr></table></figure>

<p>在多个文件中查找：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep "match_pattern" file_1 file_2 file_3 ...</span><br></pre></td></tr></table></figure>

<p>输出除之外的所有行 <strong>-v</strong> 选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -v "match_pattern" file_name</span><br></pre></td></tr></table></figure>

<p>标记匹配颜色 <strong>–color=auto</strong> 选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep "match_pattern" file_name --color=auto</span><br></pre></td></tr></table></figure>

<p>使用正则表达式 <strong>-E</strong> 选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -E "[1-9]+"</span><br><span class="line">或</span><br><span class="line">egrep "[1-9]+"</span><br></pre></td></tr></table></figure>

<p>只输出文件中匹配到的部分 <strong>-o</strong> 选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo this is a test line. | grep -o -E "[a-z]+\."  ### \.的意思是将点号作为</span><br><span class="line">line.</span><br><span class="line"></span><br><span class="line">echo this is a test line. | egrep -o "[a-z]+\."</span><br><span class="line">line.</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/shell_grep/1574155319158.png" alt="1574155319158"></p>
<p>统计文件或者文本中包含匹配字符串的行数 <strong>-c</strong> 选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -c "text" file_name</span><br></pre></td></tr></table></figure>

<p>输出包含匹配字符串的行数 <strong>-n</strong> 选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep "text" -n file_name</span><br><span class="line">或</span><br><span class="line">cat file_name | grep "text" -n</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">多个文件</span></span><br><span class="line">grep "text" -n file_1 file_2</span><br></pre></td></tr></table></figure>

<p>打印样式匹配所位于的字符或字节偏移：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo gun is not unix | grep -b -o "not"</span><br><span class="line">7:not</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在显示符合范本样式的那一行之外，并显示该行之前的内容。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">一行中字符串的字符便宜是从该行的第一个字符开始计算，起始值为0。选项 -b -o 一般总是配合使用。</span></span><br></pre></td></tr></table></figure>

<p>搜索多个文件并查找匹配文本在哪些文件中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -l "text" file1 file2 file3...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出文件内容符合指定的范本样式的文件名称。</span></span><br></pre></td></tr></table></figure>

<h3 id="grep递归搜索文件"><a href="#grep递归搜索文件" class="headerlink" title="grep递归搜索文件"></a>grep递归搜索文件</h3><p>在多级目录中对文本进行递归搜索：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep "text" . -r -n</span><br><span class="line"><span class="meta">#</span><span class="bash"> .表示当前目录。</span></span><br></pre></td></tr></table></figure>

<p>忽略匹配样式中的字符大小写：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "hello world" | grep -i "HELLO"</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<p>选项 <strong>-e</strong> 制动多个匹配样式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo this is a text line | grep -e "is" -e "line" -o</span><br><span class="line">is</span><br><span class="line">line</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">也可以使用-f选项来匹配多个样式，在样式文件中逐行写出需要匹配的字符。</span></span><br><span class="line">cat patfile</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line"></span><br><span class="line">echo aaa bbb ccc ddd eee | grep -f patfile -o</span><br></pre></td></tr></table></figure>

<p>在grep搜索结果中包括或者排除指定文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">只在目录中所有的.php和.html文件中递归搜索字符<span class="string">"main()"</span></span></span><br><span class="line">grep "main()" . -r --include *.&#123;php,html&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在搜索结果中排除所有README文件</span></span><br><span class="line">grep "main()" . -r --exclude "README"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在搜索结果中排除filelist文件列表里的文件</span></span><br><span class="line">grep "main()" . -r --exclude-from filelist</span><br></pre></td></tr></table></figure>

<p>打印出匹配文本之前或者之后的行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示匹配某个结果之后的3行，使用 -A 选项：</span></span><br><span class="line">seq 10 | grep "5" -A 3</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示匹配某个结果之前的3行，使用 -B 选项：</span></span><br><span class="line">seq 10 | grep "5" -B 3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示匹配某个结果的前三行和后三行，使用 -C 选项：</span></span><br><span class="line">seq 10 | grep "5" -C 3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如果匹配结果有多个，会用“--”作为各匹配结果之间的分隔符：</span></span><br><span class="line">echo -e "a\nb\nc\na\nb\nc" | grep a -A 1</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">--</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure>





<p>0人点赞</p>
<p><a href="https://www.jianshu.com/nb/36275013" target="_blank" rel="noopener">shell 命令</a></p>
]]></content>
      <categories>
        <category>shell_script</category>
      </categories>
      <tags>
        <tag>文本处理</tag>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文本处理三驾马车之一sed</title>
    <url>/2019/11/18/shell_sed/</url>
    <content><![CDATA[<h1 id="Linux文本处理三驾马车之一sed"><a href="#Linux文本处理三驾马车之一sed" class="headerlink" title="Linux文本处理三驾马车之一sed"></a>Linux文本处理三驾马车之一sed</h1><h2 id="sed对”行”操作"><a href="#sed对”行”操作" class="headerlink" title="sed对”行”操作"></a>sed对”行”操作</h2><h4 id="主要包括三个内容"><a href="#主要包括三个内容" class="headerlink" title="主要包括三个内容"></a>主要包括三个内容</h4><h4 id="第一：sed的动作："><a href="#第一：sed的动作：" class="headerlink" title="第一：sed的动作："></a>第一：sed的动作：</h4><p>a，c，d，i，p，s</p>
<h4 id="第二：sed的参数"><a href="#第二：sed的参数" class="headerlink" title="第二：sed的参数:"></a>第二：sed的参数:</h4><p>-i 直接编辑文本，后接文本<br>-e 是参数，表示或者的意思<br>-r 扩展正则表达式<br>-n 与动作p做搭配使用</p>
<h4 id="第三：sed的一些坑："><a href="#第三：sed的一些坑：" class="headerlink" title="第三：sed的一些坑："></a>第三：sed的一些坑：</h4><p>双引号和单引号的坑</p>
<a id="more"></a>

<blockquote>
<p>动作含义</p>
</blockquote>
<p>a ：新增， a 接字串，而这些字串会在新的一行出现(目前的下一行)～</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'1a\llll llllllll \n lllllll'</span> t.txt</span><br><span class="line">nl /etc/passwd | sed <span class="string">'2a drink tea'</span></span><br><span class="line">sed -i <span class="string">'$a# This is a test'</span> regular_express.txt  <span class="comment">####文本文件的最后插入# This is a test</span></span><br><span class="line">sed   <span class="string">'/^$/d'</span>   <span class="comment">####删除空格^$开始结束</span></span><br></pre></td></tr></table></figure>

<p>c ：取代， c接字串，这些字串可以取代 n1,n2 之间的行！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl /etc/passwd | sed <span class="string">'2,5c No 2-5 number'</span>    <span class="comment"># 替换</span></span><br></pre></td></tr></table></figure>

<p>d ：删除， d 后面通常不接任何；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl /etc/passwd | sed <span class="string">'3,$d'</span>     <span class="comment"># 第三行到最后一行删除</span></span><br><span class="line">sed   <span class="string">'/^$/d'</span> <span class="comment">#####删除空格（开始就结束的意思就是空格）</span></span><br></pre></td></tr></table></figure>

<p>i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/passwd | sed <span class="string">'2i drink tea'</span> |cat -n    <span class="comment"># 插到第2行前</span></span><br></pre></td></tr></table></figure>

<p>p ：打印，通常 p 会与参数 sed -n 一起运行～</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nl /etc/passwd | sed -n <span class="string">'5,7p'</span>    <span class="comment"># 输出</span></span><br><span class="line">nl /etc/passwd | sed -n <span class="string">'/root/p'</span></span><br></pre></td></tr></table></figure>

<p>s ：取代， + g：全局替换 + i：忽略字符大小写</p>
<h3 id="sed-‘s-要被取代的字串-新的字串-g’"><a href="#sed-‘s-要被取代的字串-新的字串-g’" class="headerlink" title="sed ‘s/要被取代的字串/新的字串/g’"></a>sed ‘s/要被取代的字串/新的字串/g’</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">'s/\.$/\!/g'</span> regular_express.txt</span><br><span class="line"><span class="comment">###### \符号表示转置，转置后. 和！就不在是通配符，而看做是字符。</span></span><br><span class="line"><span class="built_in">echo</span> 192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0|sed <span class="string">'s/Bcast.*$//g'</span>   </span><br><span class="line">nl /etc/passwd | sed -e <span class="string">'3,$d'</span> -e <span class="string">'s/bash/blueshell/'</span>  </span><br><span class="line"><span class="comment">####这一句没有g，所以只是表示替换这一行的第一个bash 变成blueshell。 -e是参数，表示或者的意思</span></span><br></pre></td></tr></table></figure>

<h4 id="删除固定行的固定内容"><a href="#删除固定行的固定内容" class="headerlink" title="删除固定行的固定内容"></a>删除固定行的固定内容</h4><blockquote>
<p>其中 ^. 为删除行首第一个字符</p>
</blockquote>
<blockquote>
<p>^.. 为删除行首头俩字符，以此类推。</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">sed -i <span class="symbol">'s</span>/^.....<span class="comment">//g' a.txt  #整个文件所有行都删除前5个字符</span></span><br><span class="line">sed -i '<span class="number">1</span>,<span class="number">5</span> s/^....<span class="comment">//g' a.txt # 第一至五行删除前4个字符。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>或者用正则</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">'s/^.\&#123;5\&#125;//g'</span> a.txt <span class="comment">#整个文件所有行都删除前5个字符</span></span><br><span class="line">sed -i <span class="string">'1,50 s/^.\&#123;4\&#125;//g'</span> a.txt <span class="comment"># 第一至五十行删除钱4个字符。</span></span><br><span class="line"><span class="comment"># \&#123;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-i 直接编辑文本，后接文本</span><br><span class="line">-e 是参数，表示或者的意思</span><br><span class="line">-r 扩展正则表达式</span><br><span class="line">-n 与动作p做搭配使用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>区域处理</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'1,2s/ok//'</span> <span class="comment">#####第一二行执行s/ok//操作！</span></span><br><span class="line"></span><br><span class="line">sed -n <span class="string">'/,/s/,/ /gp'</span></span><br><span class="line"><span class="comment">#######/,/是个正则表达式(可以看做是查找有逗号的hang)，表示只要该行中有逗号，那么就执行s命令。将含有，的行进行 s/,/ /gp操作，将,全部换成空格并print。</span></span><br><span class="line">$:最后一行    $-<span class="number">1</span><span class="symbol">:</span>倒数第二行</span><br><span class="line"></span><br><span class="line">/pattern1/,<span class="regexp">/pattern2/</span> <span class="symbol">:</span>第一次被模式<span class="number">1</span>匹配到的行开始到第一次被模式<span class="number">2</span>匹配到的行结束。</span><br></pre></td></tr></table></figure>

<h4 id="每一行后面增加内容-重要内容"><a href="#每一行后面增加内容-重要内容" class="headerlink" title="每一行后面增加内容(重要内容)"></a>每一行后面增加内容(重要内容)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed "s/$/\t"2"/" aaa</span><br></pre></td></tr></table></figure>





<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">283  <span class="built_in">echo</span> 192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0|sed <span class="string">'s/Bcast.*$//g'</span></span><br><span class="line">284  <span class="built_in">echo</span> 192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0|sed <span class="string">'s/Bcast*$//g'</span></span><br><span class="line">285  <span class="built_in">echo</span> 192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0|sed <span class="string">'s/Bcast*.$//g'</span></span><br><span class="line">286  <span class="built_in">echo</span> 192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0|sed <span class="string">'s/Bcast.*$//g'</span></span><br><span class="line">289  nl /etc/passwd | sed <span class="string">'s/:/\n/'</span>|less -S</span><br><span class="line">290  nl /etc/passwd | sed <span class="string">'s/:/\n/g'</span>|less -S</span><br><span class="line">291  nl /etc/passwd | sed <span class="string">'4,$s/:/\n/'</span>|less -S</span><br><span class="line">292  nl /etc/passwd | sed -e  <span class="string">'s/root/####/'</span></span><br><span class="line">293  nl /etc/passwd | sed -n <span class="string">'5,7p'</span></span><br><span class="line">294  nl /etc/passwd | sed -n <span class="string">'4~4p'</span></span><br><span class="line">296  nl /etc/passwd | sed -n <span class="string">'/root/p'</span></span><br><span class="line">297  nl /etc/passwd | sed -n <span class="string">'/^root/d'</span></span><br><span class="line">298  nl /etc/passwd | sed <span class="string">'/^root/d'</span></span><br><span class="line">299  nl /etc/passwd | sed -n <span class="string">'/^root/d'</span></span><br><span class="line">300  nl /etc/passwd | sed -n <span class="string">'/root/s/:/\t/p'</span></span><br><span class="line">301  sed --<span class="built_in">help</span></span><br><span class="line">302  nl /etc/passwd | sed -a <span class="string">'/root/s/:/\t/p'</span></span><br><span class="line">303  sed -i <span class="string">'$a # This is a test'</span> .txt</span><br><span class="line">305  sed -i <span class="string">'$a # This is a test'</span>  readme.txt</span><br><span class="line">307  sed --<span class="built_in">help</span></span><br><span class="line">396  <span class="built_in">echo</span> <span class="variable">$path</span> | sed <span class="string">'s/:/\n/g'</span>|grep -A 1<span class="string">'/sbin'</span></span><br><span class="line">397  <span class="built_in">echo</span> PATHh | sed <span class="string">'s/:/\n/g'</span>|grep -A 1<span class="string">'/sbin'</span></span><br><span class="line">400  <span class="built_in">echo</span> <span class="variable">$PATH</span> | sed <span class="string">'s/:/\n/g'</span></span><br><span class="line">401  <span class="built_in">echo</span> <span class="variable">$PATH</span> | sed <span class="string">'s/:/\ng'</span></span><br><span class="line">402  <span class="built_in">echo</span> <span class="variable">$PATH</span> | sed <span class="string">'s/:/\n/'</span></span><br><span class="line">403  <span class="built_in">echo</span> <span class="variable">$PATH</span> | sed <span class="string">'s/:/\n/g'</span></span><br><span class="line">404  <span class="built_in">echo</span> <span class="variable">$PATH</span> | sed <span class="string">'s/:/\n/'</span></span><br></pre></td></tr></table></figure>





<p>0人点赞</p>
<p><a href="https://www.jianshu.com/nb/36275013" target="_blank" rel="noopener">shell 命令</a></p>
<p><img src="/2019/11/18/shell_sed/1574153748191.png" alt="1574153748191"></p>
<p>错误示范</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/myblog/source/_posts</span><br><span class="line">ls *.md|while read id</span><br><span class="line">do</span><br><span class="line">	title=$&#123;id%%.*&#125;</span><br><span class="line">	echo "sed -i 's/$&#123;title&#125;\///g' ~/myblog/source/_posts/$id"</span><br><span class="line">	echo $title</span><br><span class="line">	sed -i 's/$&#123;title&#125;\///g' ~/myblog/source/_posts/$id</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<p><strong>原来在shell里用sed，如果有$这样的特殊字符，单引号要换成双引号才可以</strong></p>
<p>正确代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/myblog/source/_posts</span><br><span class="line">ls *.md|while read id</span><br><span class="line">do</span><br><span class="line">	title=$&#123;id%%.*&#125;</span><br><span class="line">	sed -i "s/$&#123;title&#125;\///g" ~/myblog/source/_posts/$id</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>shell_script</category>
      </categories>
      <tags>
        <tag>文本处理</tag>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title>vcf_filter工具之二——vcffilter</title>
    <url>/2019/11/23/vcf_filter/</url>
    <content><![CDATA[<h2 id="VCF-filter"><a href="#VCF-filter" class="headerlink" title="VCF_filter"></a>VCF_filter</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://app.yinxiang.com/shard/s51/nl/21585837/9016dfbf-7bcf-4c3f-910f-979aac592bfb" target="_blank" rel="noopener">如何过滤freebayes得到原始vcf文件</a></p>
<p><a href="https://www.jianshu.com/p/52b2dcb601d2" target="_blank" rel="noopener">关于SNP的过滤（2）</a></p>
<a id="more"></a>

<h3 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h3><p>当一个变异如果只出现在一条链上，或者是某一个位置上，那么这个位点很有可能是高通量测序时引入的偏误。</p>
<p><img src="/2019/11/23/vcf_filter/2013053-9681943e750a703c.png" alt="img"></p>
<p>先验模型并不能解决所有错误，freebayes初步会得到海量的变异位点，这肯定是不能直接用于最后分析，需要进一步过滤。过滤有两种策略，一种是硬过滤(hard filter)，一种则是使用机器学习的方法，比如说支持向量机。</p>
<p>Hard filters的策略很简单，就是按照<strong>我们所认为的好</strong>去过滤，</p>
<ul>
<li>这个变异的信度要高, QUAL&gt;N</li>
<li>有足够多的深度支持，DP &gt;N</li>
<li>变异应该出现在两条链上, SAF &gt;0 &amp; SAR&gt;0</li>
<li>变异出现在read的中部, RPL&gt;0 &amp; RPR &gt;0</li>
</ul>
<blockquote>
<p>RPL(Reads Placed Left)</p>
<p>RPR(Reads Placed Right)</p>
<p>SAF(Number of alternate observations on the forward strand)</p>
<p>SAR(Number of alternate observations on the reverse strand)</p>
</blockquote>
<p>由于每一个物种基因组性质都不太一样，那么应该设置什么样标准比较好呢？</p>
<p>如果是自然变异, 那么在大多数生物中，转换(transitions, ts, A-T&lt;-&gt;G-C)的发生的概率颠换应该大于颠换(transversion, tv,T-A&lt;-&gt;G-C). 在人类中,ts/tv约等于2, 在线粒体中, ts/tv有可能大于20。 tv/ts信息可以用<code>vt peek</code>看。</p>
<p>使用机器学习的方法有点难度，需要你提供一个高信度的变异集用来训练分类器，属于比较高级的模块。</p>
<p>参考资料</p>
<ul>
<li><a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fekg%2Ffreebayes" target="_blank" rel="noopener">https://github.com/ekg/freebayes</a></li>
<li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fddocent.com%2Ffiltering%2F" target="_blank" rel="noopener">http://ddocent.com/filtering/</a></li>
<li><a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fekg%2Falignment-and-variant-calling-tutorial" target="_blank" rel="noopener">https://github.com/ekg/alignment-and-variant-calling-tutorial</a></li>
</ul>
<h3 id="Take-a-peek-with-vt"><a href="#Take-a-peek-with-vt" class="headerlink" title="Take a peek with vt"></a>Take a peek with <code>vt</code></h3><p><a href="https://github.com/atks/vt" target="_blank" rel="noopener">vt</a> is a toolkit for variant annotation and manipulation. In addition to other methods, it provides a nice method, <code>vt peek</code>, to determine basic statistics about the variants in a VCF file.</p>
<p>We can get a summary like so:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vt peek SRR1770413.vcf.gz</span><br></pre></td></tr></table></figure>

<h3 id="Filtering-using-the-transition-transversion-ratio-ts-tv-as-a-rough-guide"><a href="#Filtering-using-the-transition-transversion-ratio-ts-tv-as-a-rough-guide" class="headerlink" title="Filtering using the transition/transversion ratio (ts/tv) as a rough guide"></a>Filtering using the transition/transversion ratio (ts/tv) as a rough guide</h3><p><code>vt</code> produces a nice summary with the transition/transversion ratio. Transitions are mutations that switch between DNA bases that have the same base structure (either a <a href="https://en.wikipedia.org/wiki/Purine" target="_blank" rel="noopener">purine</a> or <a href="https://en.wikipedia.org/wiki/Pyrimidine" target="_blank" rel="noopener">pyrimidine</a> ring).</p>
<p>In most biological systems, <a href="https://upload.wikimedia.org/wikipedia/commons/3/35/Transitions-transversions-v3.png" target="_blank" rel="noopener">transitions (A&lt;-&gt;G, C&lt;-&gt;T) are far more likely than transversions</a>, so we expect the ts/tv ratio to be pretty far from 0.5, which is what it would be if all mutations between DNA bases were random. In practice, we tend to see something that’s at least 1 in most organisms, and ~2 in some, such as human. In some biological contexts, such as in mitochondria, we see an even higher ratio, perhaps as much as 20.</p>
<p>As we don’t have validation information for our sample, we can use this as a simple guide for our first filtering attempts. An easy way is to try different filterings using <code>vcffilter</code> and check the ratio of the resulting set with <code>vt peek</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install vcflib</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># a basic filter to remove low-quality sites</span><br><span class="line">vcffilter -f &#39;QUAL &gt; 10&#39; SRR1770413.vcf.gz | vt peek -</span><br><span class="line"></span><br><span class="line"># scaling quality by depth is like requiring that the additional log-unit contribution</span><br><span class="line"># of each read is at least N</span><br><span class="line">vcffilter -f &#39;QUAL &#x2F; AO &gt; 10&#39; SRR1770413.vcf.gz | vt peek -</span><br></pre></td></tr></table></figure>

<p>Note that the second filtering removes a large region near the beginning of the reference where there appears to be some paralogy. The read counts for reference and alternate are each around half of the total depth, which is unusual for a sequenced clone and may indicate some structural differences between the sample and the original reference.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcffilter -f "SAF / SAR &gt; 100 &amp; SRF / SRR &gt; 100 | SAR / SAF &gt; 100 &amp; SRR / SRF &gt; 100" -s DP3g95p5maf05.fil1.vcf &gt; DP3g95p5maf05.fil2.vcf</span><br></pre></td></tr></table></figure>

<p>`</p>
<h3 id="关于SNP的过滤-实战"><a href="#关于SNP的过滤-实战" class="headerlink" title="关于SNP的过滤 实战"></a>关于SNP的过滤 实战</h3><p><a href="https://app.yinxiang.com/shard/s51/nl/21585837/5875e661-85a8-4d9e-9720-cc34e9668545" target="_blank" rel="noopener">关于SNP的过滤（3）</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install vcflib</span><br><span class="line">vcffilter  -f 'QUAL &gt; 10' XXX_P14592_FFG_1.raw.vcf | wc -l</span><br><span class="line">vcffilter -s -f "AB &gt; 0.25 &amp; AB &lt; 0.75 | AB &lt; 0.01" XXX_P13053_BC_1.freebayes.vcf &gt;ding.vcf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mawk '!/#/' XXX_P13053_BC_1.freebayes.vcf | wc -l</span><br><span class="line">vcffilter -f 'QUAL &gt; 10' -f 'DP&gt;30' -s -f "AB &gt; 0.25 &amp; AB &lt; 0.75 | AB &lt; 0.01" XXX_P13053_BC_1.freebayes.vcf &gt;ding.vcf</span><br><span class="line">cat ding.vcf |wc -l</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcffilter -f 'QUAL &gt; 10' -f 'DP &gt; 10'  -s -f "AB &gt; 0.01 &amp; RPL&gt;0 &amp; RPR &gt;0 &amp;  SAF &gt;0 &amp; SAR &gt; 0" XXX_P13053_BC_1.freebayes.vcf &gt;ding.vcf</span><br><span class="line"></span><br><span class="line">vcffilter -f 'SAF &gt;0 &amp; SAR&gt;0' ding.vcf &gt;ding2.vcf</span><br><span class="line">cat ding.vcf |wc -l</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcffilter -f "SAF / SAR &gt; 100 &amp; SRF / SRR &gt; 100 | SAR / SAF &gt; 100 &amp; SRR / SRF &gt; 100" -s XXX_P13053_BC_1.freebayes.vcf &gt; ding.vcf</span><br><span class="line">cat ding.vcf |wc -l</span><br><span class="line">vcffilter -f "SAF / SAR &gt; 100 &amp; SRF / SRR &gt; 100 | SAR / SAF &gt; 100 &amp; SRR / SRF &gt; 100" -s -f 'AB &gt; 0.01' XXX_P13053_BC_1.freebayes.vcf &gt; ding.vcf</span><br><span class="line">cat ding.vcf |wc -l</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep 'TYPE=snp' XXX_P14592_FFG_1.raw.vcf &gt; freebayes_snp_raw.vcf</span><br></pre></td></tr></table></figure>





<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> DP</span></span><br><span class="line">grep -v '#' XXX_P14592_FFG_1.raw.vcf |cut -f 8|cut -d ';' -f 3|head -10</span><br><span class="line">grep -v '#' XXX_P14592_FFG_1.raw.vcf |cut -f 8|cut -d ';' -f 6|head -10</span><br><span class="line"><span class="meta">#</span><span class="bash"> QUAL</span></span><br><span class="line">grep -v '#' XXX_P14592_FFG_1.raw.vcf |cut -f 8|cut -d ';' -f 12|head -10</span><br><span class="line">grep -v '#' XXX_P14592_FFG_1.raw.vcf |cut -f 8 |head -10</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>DNAseq</category>
      </categories>
      <tags>
        <tag>mutation_filters</tag>
        <tag>vcf</tag>
        <tag>vcffilter</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim查找功能</title>
    <url>/2019/11/18/vim_search/</url>
    <content><![CDATA[<h2 id="Vim查找功能"><a href="#Vim查找功能" class="headerlink" title="Vim查找功能"></a>Vim查找功能</h2><a id="more"></a>

<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>在normal模式下按下<code>/</code>即可进入查找模式，输入要查找的字符串并按下回车。 Vim会跳转到第一个匹配。按下<code>n</code>查找下一个，按下<code>N</code>查找上一个。</p>
<p>Vim查找支持正则表达式，例如<code>/vim$</code>匹配行尾的<code>&quot;vim&quot;</code>。 需要查找特殊字符需要转义，例如<code>/vim\$</code>匹配<code>&quot;vim$&quot;</code>。</p>
<blockquote>
<p>注意查找回车应当用<code>\n</code>，而替换为回车应当用<code>\r</code>（相当于<code>&lt;CR&gt;</code>）。</p>
</blockquote>
<h3 id="大小写敏感查找"><a href="#大小写敏感查找" class="headerlink" title="大小写敏感查找"></a>大小写敏感查找</h3><p>在查找模式中加入<code>\c</code>表示大小写不敏感查找，<code>\C</code>表示大小写敏感查找。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;foo\c</span><br></pre></td></tr></table></figure>

<p>将会查找所有的<code>&quot;foo&quot;</code>,<code>&quot;FOO&quot;</code>,<code>&quot;Foo&quot;</code>等字符串。</p>
<h3 id="大小写敏感配置"><a href="#大小写敏感配置" class="headerlink" title="大小写敏感配置"></a>大小写敏感配置</h3><p>Vim 默认采用大小写敏感的查找，为了方便我们常常将其配置为大小写不敏感：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot; 设置默认进行大小写不敏感查找</span><br><span class="line">set ignorecase</span><br><span class="line">&quot; 如果有一个大写字母，则切换到大小写敏感查找</span><br><span class="line">set smartcase</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将上述设置粘贴到你的<code>~/.vimrc</code>，重新打开Vim即可生效。</p>
</blockquote>
<h3 id="查找当前单词"><a href="#查找当前单词" class="headerlink" title="查找当前单词"></a>查找当前单词</h3><p>在normal模式下按下<code>*</code>即可查找光标所在单词（word）， 要求每次出现的前后为空白字符或标点符号。例如当前为<code>foo</code>， 可以匹配<code>foo bar</code>中的<code>foo</code>，但不可匹配<code>foobar</code>中的<code>foo</code>。 这在查找函数名、变量名时非常有用。</p>
<p>按下<code>g*</code>即可查找光标所在单词的字符序列，每次出现前后字符无要求。 即<code>foo bar</code>和<code>foobar</code>中的<code>foo</code>均可被匹配到。</p>
<h2 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h2><p><code>:s</code>（substitute）命令用来查找和替换字符串。语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:&#123;作用范围&#125;s&#x2F;&#123;目标&#125;&#x2F;&#123;替换&#125;&#x2F;&#123;替换标志&#125;</span><br></pre></td></tr></table></figure>

<p>例如<code>:%s/foo/bar/g</code>会在全局范围(<code>%</code>)查找<code>foo</code>并替换为<code>bar</code>，所有出现都会被替换（<code>g</code>）。</p>
<h3 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h3><p>作用范围分为当前行、全文、选区等等。</p>
<p>当前行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:s&#x2F;foo&#x2F;bar&#x2F;g</span><br></pre></td></tr></table></figure>

<p>全文：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:%s&#x2F;foo&#x2F;bar&#x2F;g</span><br></pre></td></tr></table></figure>

<p>选区，在Visual模式下选择区域后输入<code>:</code>，Vim即可自动补全为 <code>:&#39;&lt;,&#39;&gt;</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:&#39;&lt;,&#39;&gt;s&#x2F;foo&#x2F;bar&#x2F;g</span><br></pre></td></tr></table></figure>

<p>2-11行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:5,12s&#x2F;foo&#x2F;bar&#x2F;g</span><br></pre></td></tr></table></figure>

<p>当前行<code>.</code>与接下来两行<code>+2</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:.,+2s&#x2F;foo&#x2F;bar&#x2F;g</span><br></pre></td></tr></table></figure>

<h3 id="替换标志"><a href="#替换标志" class="headerlink" title="替换标志"></a>替换标志</h3><p>上文中命令结尾的<code>g</code>即是替换标志之一，表示全局<code>global</code>替换（即替换目标的所有出现）。 还有很多其他有用的替换标志：</p>
<p>空替换标志表示只替换从光标位置开始，目标的第一次出现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:%s&#x2F;foo&#x2F;bar</span><br></pre></td></tr></table></figure>

<p><code>i</code>表示大小写不敏感查找，<code>I</code>表示大小写敏感：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:%s&#x2F;foo&#x2F;bar&#x2F;i</span><br><span class="line"># 等效于模式中的\c（不敏感）或\C（敏感）</span><br><span class="line">:%s&#x2F;foo\c&#x2F;bar</span><br></pre></td></tr></table></figure>

<p><code>c</code>表示需要确认，例如全局查找<code>&quot;foo&quot;</code>替换为<code>&quot;bar&quot;</code>并且需要确认：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:%s&#x2F;foo&#x2F;bar&#x2F;gc</span><br></pre></td></tr></table></figure>

<p>回车后Vim会将光标移动到每一次<code>&quot;foo&quot;</code>出现的位置，并提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replace with bar (y&#x2F;n&#x2F;a&#x2F;q&#x2F;l&#x2F;^E&#x2F;^Y)?</span><br></pre></td></tr></table></figure>

<p>按下<code>y</code>表示替换，<code>n</code>表示不替换，<code>a</code>表示替换所有，<code>q</code>表示退出查找模式， <code>l</code>表示替换当前位置并退出。<code>^E</code>与<code>^Y</code>是光标移动快捷键，参考： <a href="https://harttle.land/2015/11/07/vim-cursor.html" target="_blank" rel="noopener">Vim中如何快速进行光标移动</a>。</p>
<h2 id="高亮设置"><a href="#高亮设置" class="headerlink" title="高亮设置"></a>高亮设置</h2><h3 id="高亮颜色设置"><a href="#高亮颜色设置" class="headerlink" title="高亮颜色设置"></a>高亮颜色设置</h3><p>如果你像我一样觉得高亮的颜色不太舒服，可以在 <code>~/.vimrc</code> 中进行设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">highlight Search ctermbg&#x3D;yellow ctermfg&#x3D;black </span><br><span class="line">highlight IncSearch ctermbg&#x3D;black ctermfg&#x3D;yellow </span><br><span class="line">highlight MatchParen cterm&#x3D;underline ctermbg&#x3D;NONE ctermfg&#x3D;NONE</span><br></pre></td></tr></table></figure>

<p>上述配置指定 Search 结果的前景色（foreground）为黑色，背景色（background）为灰色； 渐进搜索的前景色为黑色，背景色为黄色；光标处的字符加下划线。</p>
<blockquote>
<p>更多的CTERM颜色可以查阅：<a href="http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim" target="_blank" rel="noopener">http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim</a></p>
</blockquote>
<h3 id="禁用-启用高亮"><a href="#禁用-启用高亮" class="headerlink" title="禁用/启用高亮"></a>禁用/启用高亮</h3><p>有木有觉得每次查找替换后 Vim 仍然高亮着搜索结果？ 可以手动让它停止高亮，在normal模式下输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:nohighlight</span><br><span class="line">&quot; 等效于</span><br><span class="line">:nohl</span><br></pre></td></tr></table></figure>

<p>其实上述命令禁用了所有高亮，只禁用搜索高亮的命令是<code>:set nohlsearch</code>。 下次搜索时需要<code>:set hlsearch</code>再次启动搜索高亮。</p>
<h4 id="延时禁用"><a href="#延时禁用" class="headerlink" title="延时禁用"></a>延时禁用</h4><p>怎么能够让Vim查找/替换后一段时间自动取消高亮，发生查找时自动开启呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot; 当光标一段时间保持不动了，就禁用高亮</span><br><span class="line">autocmd cursorhold * set nohlsearch</span><br><span class="line">&quot; 当输入查找命令时，再启用高亮</span><br><span class="line">noremap n :set hlsearch&lt;cr&gt;n</span><br><span class="line">noremap N :set hlsearch&lt;cr&gt;N</span><br><span class="line">noremap &#x2F; :set hlsearch&lt;cr&gt;&#x2F;</span><br><span class="line">noremap ? :set hlsearch&lt;cr&gt;?</span><br><span class="line">noremap * *:set hlsearch&lt;cr&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将上述配置粘贴到<code>~/.vimrc</code>，重新打开vim即可生效。</p>
</blockquote>
<h4 id="一键禁用"><a href="#一键禁用" class="headerlink" title="一键禁用"></a>一键禁用</h4><p>如果延时禁用搜索高亮仍然不够舒服，可以设置快捷键来一键禁用/开启搜索高亮：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">noremap n :set hlsearch&lt;cr&gt;n</span><br><span class="line">noremap N :set hlsearch&lt;cr&gt;N</span><br><span class="line">noremap &#x2F; :set hlsearch&lt;cr&gt;&#x2F;</span><br><span class="line">noremap ? :set hlsearch&lt;cr&gt;?</span><br><span class="line">noremap * *:set hlsearch&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">nnoremap &lt;c-h&gt; :call DisableHighlight()&lt;cr&gt;</span><br><span class="line">function! DisableHighlight()</span><br><span class="line">    set nohlsearch</span><br><span class="line">endfunc</span><br></pre></td></tr></table></figure>

<p>希望关闭高亮时只需要按下 <code>Ctrl+H</code>，当发生下次搜索时又会自动启用。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>shell_script</tag>
      </tags>
  </entry>
  <entry>
    <title>vim安装插件youcompleteme</title>
    <url>/2019/11/18/vim_%E6%8F%92%E4%BB%B6YouCompleteMe/</url>
    <content><![CDATA[<h2 id="vim安装插件youcompleteme"><a href="#vim安装插件youcompleteme" class="headerlink" title="vim安装插件youcompleteme"></a>vim安装插件youcompleteme</h2><a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.vim/bundle/YouCompleteMe</span><br><span class="line">git submodule update --init --recursive # 这句话很重要</span><br><span class="line">python3 install.py --clang-completer --system-libclang</span><br><span class="line">python3 run_tests.py # 不断试错</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/vim_%E6%8F%92%E4%BB%B6YouCompleteMe/1574123741424.png" alt="1574123741424"></p>
<blockquote>
<p>缺什么补什么</p>
<p>缺模块就补模块 pip3 install 模块名</p>
<p>缺包就补包 sudo apt install 包名</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install nose </span><br><span class="line">pip3 install future</span><br><span class="line">pip3 install mock</span><br><span class="line">pip3 install PyHamcrest # No module named 'hamcrest' ,这个包很特殊</span><br></pre></td></tr></table></figure>

<h6 id="运行安装语句"><a href="#运行安装语句" class="headerlink" title="运行安装语句"></a>运行安装语句</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.vim/bundle/YouCompleteMe</span><br><span class="line">python3 install.py --clang-completer --system-libclang # clang-completer 是支持C语言的意思</span><br><span class="line">python3 install.py --all # 管他那么多，都安装得了</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/vim_%E6%8F%92%E4%BB%B6YouCompleteMe/1574125262109.png" alt="1574125262109"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install llvm-3.9 clang-3.9 libclang-3.9-dev libboost-all-dev</span><br></pre></td></tr></table></figure>



<p>最终安装成功 </p>
<p><a href="https://github.com/ycm-core/YouCompleteMe" target="_blank" rel="noopener">https://github.com/ycm-core/YouCompleteMe</a> </p>
<p>参考 Quick Feature Summary 支持的语言主要是C，java，python。</p>
<p><img src="/2019/11/18/vim_%E6%8F%92%E4%BB%B6YouCompleteMe/1574129126968.png" alt="1574129126968"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install exuberant-ctags</span><br></pre></td></tr></table></figure>









<p>1.安装YouCompleteMe</p>
<p>在.vimrc中插入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Plugin &#39;Valloric&#x2F;YouCompleteMe&#39;</span><br></pre></td></tr></table></figure>

<p>利用git下载安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Valloric&#x2F;YouCompleteMe.git ~&#x2F;.vim&#x2F;bundle&#x2F;YouCompleteMe</span><br></pre></td></tr></table></figure>

<p>然后进入YouCompeteMe所在的文件夹：~/.vim/bundle/YouCompleteMe，运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 install.py --clang-completer --system-libclang</span><br></pre></td></tr></table></figure>

<p>其中编译安装的过程中，不断提示编译所缺少的依赖，会有错误提示，按照提示安装缺少的依赖就好，其中比较重要的是clang，所以先需要运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install clang</span><br></pre></td></tr></table></figure>

<p>运行install.py时会显示</p>
<p>最后在.vimrc文件中，添加配置信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set ts&#x3D;4</span><br><span class="line">set expandtab</span><br><span class="line">set shiftwidth&#x3D;4</span><br><span class="line">set softtabstop&#x3D;4</span><br><span class="line">set number</span><br><span class="line">&quot;vundle&quot;</span><br><span class="line">filetype off</span><br><span class="line">set rtp+&#x3D;~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line">Plugin &#39;VundleVim&#x2F;Vundle.vim&#39;</span><br><span class="line">Plugin &#39;Valloric&#x2F;YouCompleteMe&#39;</span><br><span class="line">Plugin &#39;davidhalter&#x2F;jedi-vim&#39;</span><br><span class="line">call vundle#end()</span><br><span class="line">filetype plugin indent on</span><br><span class="line">&quot;youcompleteme&quot;</span><br><span class="line">&quot;默认配置文件路径&quot;</span><br><span class="line">let g:ycm_global_ycm_extra_conf &#x3D; &#39;~&#x2F;.vim&#x2F;bundle&#x2F;YouCompleteMe&#x2F;.ycm_extra_conf.py&#39;       &quot;配置全局路径</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;let g:ycm_server_keep_logfiles&#x3D;1</span><br><span class="line">&quot;let g:ycm_sever_log_level&#x3D;&#39;debug&#39;</span><br><span class="line">&quot;打开vim时不再询问是否加载ycm_extra_conf.py配置&quot;</span><br><span class="line">&quot;let g:ycm_confirm_extra_conf&#x3D;0</span><br><span class="line">&quot;set completeopt&#x3D;longest,menu</span><br><span class="line">&quot;python解释器路径&quot;</span><br><span class="line">let g:ycm_path_to_python_interpreter&#x3D;&#39;&#x2F;home&#x2F;wdh&#x2F;anaconda3&#x2F;bin&#x2F;python3&#39;</span><br><span class="line">&quot;let g:ycm_python_binary_path &#x3D; &#39;&#x2F;home&#x2F;wdh&#x2F;anaconda3&#x2F;bin&#x2F;python3&#39;   &quot;python 环境</span><br><span class="line">&quot;是否开启语义补全&quot;</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax&#x3D;1</span><br><span class="line">&quot;是否在注释中也开启补全&quot;</span><br><span class="line">let g:ycm_complete_in_comments&#x3D;1</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings &#x3D; 0</span><br><span class="line">&quot;开始补全的字符数&quot;</span><br><span class="line">let g:ycm_min_num_of_chars_for_completion&#x3D;2</span><br><span class="line">&quot;补全后自动关机预览窗口&quot;</span><br><span class="line">&quot;let g:ycm_autoclose_preview_window_after_completion&#x3D;1</span><br><span class="line">&quot; 禁止缓存匹配项,每次都重新生成匹配项&quot;</span><br><span class="line">let g:ycm_cache_omnifunc&#x3D;0</span><br><span class="line">&quot;字符串中也开启补全&quot;</span><br><span class="line">let g:ycm_complete_in_strings &#x3D; 1</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax&#x3D;1 &quot;补全关键字 </span><br><span class="line">&quot;离开插入模式后自动关闭预览窗口&quot;</span><br><span class="line">autocmd InsertLeave * if pumvisible() &#x3D;&#x3D; 0|pclose|endif</span><br><span class="line">&quot;回车即选中当前项&quot;</span><br><span class="line">&quot;inoremap &lt;expr&gt; &lt;CR&gt;       pumvisible() ? &#39;&lt;C-y&gt;&#39; : &#39;\&lt;CR&gt;&#39;     </span><br><span class="line">&quot;上下左右键行为&quot;</span><br><span class="line">&quot;inoremap &lt;expr&gt; &lt;Down&gt;     pumvisible() ? &#39;\&lt;C-n&gt;&#39; : &#39;\&lt;Down&gt;&#39;</span><br><span class="line">&quot;inoremap &lt;expr&gt; &lt;Up&gt;       pumvisible() ? &#39;\&lt;C-p&gt;&#39; : &#39;\&lt;Up&gt;&#39;</span><br><span class="line">&quot;inoremap &lt;expr&gt; &lt;PageDown&gt; pumvisible() ? &#39;\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;&#39; : &#39;\&lt;PageDown&gt;&#39;</span><br><span class="line">&quot;inoremap &lt;expr&gt; &lt;PageUp&gt;   pumvisible() ? &#39;\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;&#39; : &#39;\&lt;PageUp&gt;&#39;\</span><br></pre></td></tr></table></figure>





<blockquote>
<p>YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for Vim.<br> <strong>参考： <a href="https://github.com/Valloric/YouCompleteMe#full-installation-guide" target="_blank" rel="noopener">https://github.com/Valloric/YouCompleteMe#full-installation-guide</a></strong><br> 本篇文章默认读者知道什么是 unix/linux，vim/vi， YouCompleteMe，如果有不清楚的，<code>Search engine is your friend</code> 或者留言讨论。YouCompleteMe 简称 YCM 以下都称为 YCM。</p>
</blockquote>
<p><a href="https://link.jianshu.com?t=https://github.com/Valloric/YouCompleteMe" target="_blank" rel="noopener">YouCompleteMe</a> 的强大想必大家都听说过，简单的用一句话来概括的话，<code>媲美 VS 的自动补全</code> 当然可能有一点点过，但可见其强大。但是作为一个十分强大的 vim 插件，他可是十分的难以安装，几乎所有的人，都会在安装阶段苦苦挣扎（别问老夫怎么知道的），然后要么成功安装享受工具带来的便利，要么放弃继续使用传统的自动补全工具（当然也没有那么差，但可能没有 YCM 那么强大）。</p>
<p>经过老夫的辛苦探索，终于在听到 YCM 大名的一年之后成功安装，所以分享出来，希望能够帮助到更多的人。另外如果在安装过程中遇到任何问题都欢迎在评论与我讨论。</p>
<blockquote>
<p>有了你我才是我，你的存在令我完整<br> —— 老夫</p>
</blockquote>
<p>系统环境：Kali-Rolling on Oracle VirtualBox，可以当作是最新版（或者说实验版）的 Debian</p>
<p>目标：成功安装使用 YCM， 尽量少的编译软件（即尽量使用预编译 deb 包），尽量可以实现更多种语言的自动补全</p>
<h1 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h1><h4 id="0-确保-vim-版本是-7-4-143-或以上，并且支持-python-2-3-脚本"><a href="#0-确保-vim-版本是-7-4-143-或以上，并且支持-python-2-3-脚本" class="headerlink" title="0. 确保 vim 版本是 7.4.143 或以上，并且支持 python 2/3 脚本"></a>0. 确保 vim 版本是 7.4.143 或以上，并且支持 python 2/3 脚本</h4><p>vim version</p>
<p>从上图可以看出老夫的 vim 版本是 8.0.49 且支持 python3 脚本但不支持 python2 脚本（截图的倒数第 7，8 行）<br> 如果你的打印结果中没有相关 python 脚本信息，还可以在 vim 中键入命令 <code>:echo has(&#39;python&#39;) || has(&#39;python3&#39;)</code>，若结果是 1 则证明是支持的。</p>
<p>若不论是 vim 版本不满足条件或者是不支持 python 脚本，那么就需要<a href="https://link.jianshu.com?t=https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source" target="_blank" rel="noopener">从源码编译安装 vim</a> 了，</p>
<h4 id="1-通过-Vundle-来安装-YCM（官方推荐）"><a href="#1-通过-Vundle-来安装-YCM（官方推荐）" class="headerlink" title="1. 通过 Vundle 来安装 YCM（官方推荐）"></a>1. 通过 Vundle 来安装 YCM（官方推荐）</h4><p><a href="https://link.jianshu.com?t=https://github.com/VundleVim/Vundle.vim#quick-start" target="_blank" rel="noopener">快速安装 vim 的插件管理插件 vundle</a></p>
<p>在 vim 的配置文件 <code>~/.vimrc</code> 中添加一行（在<code>call vundle#begin()</code> 和 <code>call vundle#end()</code> 之间）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">call vundle<span class="comment">#begin()</span></span><br><span class="line">. . . </span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe’</span></span><br><span class="line"><span class="string">. . .</span></span><br><span class="line"><span class="string">call vundle#end()</span></span><br></pre></td></tr></table></figure>

<p>然后保存运行 vim 命令 <code>:PluginInstall</code> 安装 <strong>需要特别注意的是这个时候可能等的时间会相当的长</strong></p>
<h4 id="1-5-通过-Git-安装-YCM"><a href="#1-5-通过-Git-安装-YCM" class="headerlink" title="1.5 通过 Git 安装 YCM"></a>1.5 通过 Git 安装 YCM</h4><p>如果你跟老夫一样，等待 Vundle 安装 YCM 等了好久终于貌似好像成功了，打开 vim 却发现 <code>YouCompleteme unavailable : no module named future</code> （当然没有遇到算你运气好），那么你应该考虑一下换用 Git 来安装 YCM：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 （在 `～/.vim/bundle` 目录下）</span></span><br><span class="line">$ git <span class="built_in">clone</span> --recursive [https://github.com/Valloric/YouCompleteMe.git](https://github.com/Valloric/YouCompleteMe.git)</span><br><span class="line"><span class="comment"># 检查完整性（在 `～/.vim/bundle/YouCompleteMe` 目录下）</span></span><br><span class="line">$ git submodule update --init --recursive</span><br></pre></td></tr></table></figure>

<h4 id="2-下载安装最新版的-libclang"><a href="#2-下载安装最新版的-libclang" class="headerlink" title="2. 下载安装最新版的 libclang"></a>2. 下载安装最新版的 libclang</h4><p>如果不需要 C 家族的语义化补全，则可跳过这一步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get install llvm-3.9 clang-3.9 libclang-3.9-dev libboost-all-dev</span></span><br></pre></td></tr></table></figure>

<p>PS: ** YCM 官方墙烈推荐使用上游编译的二进制文件代替系统自带的 libclang**</p>
<blockquote>
<p>You can use the system libclang <strong>only if you are sure it is version 3.9 or higher</strong>, otherwise don’t. Even if it is, we recommend using the <a href="https://link.jianshu.com?t=http://llvm.org/releases/download.html" target="_blank" rel="noopener">official binaries from llvm.org</a> if at all possible. Make sure you download the correct archive file for your OS.</p>
</blockquote>
<blockquote>
<p>We <strong>STRONGLY recommend AGAINST use</strong> of the system libclang instead of the upstream compiled binaries. Random things may break. Save yourself the hassle and use the upstream pre-built libclang.</p>
</blockquote>
<h4 id="3-编译构建-ycm-core-库"><a href="#3-编译构建-ycm-core-库" class="headerlink" title="3. 编译构建 ycm_core 库"></a>3. 编译构建 <code>ycm_core</code> 库</h4><blockquote>
<p>** 需要：cmake python3-dev**</p>
</blockquote>
<p>YCM 的顶层目录或者说根目录应该是 <code>～/.vim/bundle/YouCompleteMe</code></p>
<ul>
<li><strong>创建一个目录放编译过程中产生的文件</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir ~/.ycm_build</span><br><span class="line">$ <span class="built_in">cd</span> ~/.ycm_build</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>生成 makefile</strong></li>
</ul>
<p>如果跳过第三步的话，则可以直接运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cmake -G <span class="string">"Unix Makefiles"</span> . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp</span><br></pre></td></tr></table></figure>

<p>如果没有跳过第三步，说明需要 c 家族的语义化补全则需运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cmake -G <span class="string">"Unix Makefiles"</span> -DUSE_SYSTEM_BOOST=ON DUSE_SYSTEM_LIBCLANG=ON . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp</span><br></pre></td></tr></table></figure>



<p><img src="https:////upload-images.jianshu.io/upload_images/83222-d228ddb8f70dc72c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/903/format/webp" alt="img"></p>
<p>有问题的编译</p>
<p>编译通过的，没有报错，但是这个编译结果是有问题的，看第 3 行，反复强调的 c 家族的语义补全没有了。经过老夫反复的检查，原来是上面的编译命令少了一个 <code>-</code> 符号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cmake -G <span class="string">"Unix Makefiles"</span> -DUSE_SYSTEM_BOOST=ON -DUSE_SYSTEM_LIBCLANG=ON . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp</span><br></pre></td></tr></table></figure>

<p>这个时候编译的过程如下图：</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/83222-40aea3936346d3ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/904/format/webp" alt="img"></p>
<p>编译正常</p>
<p>其实这个还是有问题的，看倒数第 3、4 行，使用的是外部的 libclang-3.6 ，第 2 步中说的系统安装的 libclang 最低要是是 3.9。<br> 这个时候就需要删除 <code>~/.ycm_build</code> 目录下的所有文件，使用下面的命令指定 libclang 的版本重新编译。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cmake -G <span class="string">"Unix Makefiles"</span> -DUSE_SYSTEM_BOOST=ON -DEXTERNAL_LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu/libclang-3.9.so . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp</span><br></pre></td></tr></table></figure>

<p>编译的结果是之前新建的目录（也就是当前目录下生成了一些 Makefile 文件）</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/83222-895167b14d7d8f4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/655/format/webp" alt="img"></p>
<p>Makefile</p>
<ul>
<li>构建 ycm_core</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  --config Release 这个构建选项进针对 Windows</span></span><br><span class="line">$ cmake --build . --target ycm_core --config Release</span><br></pre></td></tr></table></figure>



<p><img src="https:////upload-images.jianshu.io/upload_images/83222-063a2d668a0e3d55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/901/format/webp" alt="img"></p>
<p>build ycm_core</p>
<h4 id="3-5-配置"><a href="#3-5-配置" class="headerlink" title="3.5 配置"></a>3.5 配置</h4><ul>
<li>复制 .ycm_extra_conf.py  文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py ~/.vim/</span><br></pre></td></tr></table></figure>

<ul>
<li>添加 vim 配置<br> 注意下面的 python 解释器的路径要和编译 ycm_core  的时候使用的 python 解释器是相同的版本（2 或 3）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">“ ～/.vimrc</span><br><span class="line"><span class="built_in">let</span> g:ycm_server_python_interpreter=<span class="string">'/usr/bin/python'</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_global_ycm_extra_conf=<span class="string">'~/.vim/.ycm_extra_conf.py'</span></span><br></pre></td></tr></table></figure>

<h4 id="4-其他语言的支持"><a href="#4-其他语言的支持" class="headerlink" title="4. 其他语言的支持"></a>4. 其他语言的支持</h4><p>C#、Go、TypeScript、 JavaScript、 Rust support<br> 由于老夫对这些语言没有太多的涉猎就不做介绍了。</p>
<h4 id="5-测试安装"><a href="#5-测试安装" class="headerlink" title="5. 测试安装"></a>5. 测试安装</h4><p>首先新建一个 hello.c 文件，</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/83222-ff77cc71cfb947d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/909/format/webp" alt="img"></p>
<p>hello.c</p>
<p>可以看到自动补全了头文件，厉害了老夫的 YCM</p>
<p>然后在 vim 中运行 <code>:YcmToggleLogs stderr</code> 命令查看错误日志，</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/83222-b58f9abd726322f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/904/format/webp" alt="img"></p>
<p>stderr</p>
<p>没有看到报错信息，则证明 YCM 已成功安装。</p>
]]></content>
      <categories>
        <category>shell_script</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>youcompleteme</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim使用笔记</title>
    <url>/2019/11/18/vim_command/</url>
    <content><![CDATA[<h2 id="Vim使用笔记"><a href="#Vim使用笔记" class="headerlink" title="Vim使用笔记"></a>Vim使用笔记</h2><a id="more"></a>



<p>vim 是我最喜欢的编辑器，也是 linux 下第二强大的编辑器。 虽然 emacs 是公认的世界第一，我认为使用 emacs 并没有使用 vi 进行编辑来得高效。 如果是初学 vi，运行一下 vimtutor 是个聪明的决定。 （如果你的系统环境不是中文，而你想使用中文的 vimtutor，就运行 vimtutor zh）</p>
<h1 id="1-关于Vim"><a href="#1-关于Vim" class="headerlink" title="1. 关于Vim"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">1. 关于Vim</a></h1><h2 id="1-1-Vim-的几种模式"><a href="#1-1-Vim-的几种模式" class="headerlink" title="1.1 Vim 的几种模式"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">1.1 Vim 的几种模式</a></h2><ul>
<li>正常模式：可以使用快捷键命令，或按: 输入命令行。</li>
<li>插入模式：可以输入文本，在正常模式下，按 i、a、o 等都可以进入插入模式。</li>
<li>可视模式：正常模式下按 v 可以进入可视模式， 在可视模式下，移动光标可以选择文本。按 V 进入可视行模式， 总是整行整行的选中。ctrl+v 进入可视块模式。</li>
<li>替换模式：正常模式下，按 R 进入。</li>
</ul>
<h1 id="2-启动Vim"><a href="#2-启动Vim" class="headerlink" title="2. 启动Vim"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">2. 启动Vim</a></h1><ul>
<li>vim -c cmd file: 在打开文件前，先执行指定的命令；</li>
<li>vim -r file: 恢复上次异常退出的文件；</li>
<li>vim -R file: 以只读的方式打开文件，但可以强制保存；</li>
<li>vim -M file: 以只读的方式打开文件，不可以强制保存；</li>
<li>vim -y num file: 将编辑窗口的大小设为 num 行；</li>
<li>vim + file: 从文件的末尾开始；</li>
<li>vim +num file: 从第 num 行开始；</li>
<li>vim +/string file: 打开 file，并将光标停留在第一个找到的 string 上。</li>
<li>vim –remote file: 用已有的 vim 进程打开指定的文件。 如果你不想启用多个 vim 会话，这个很有用。但要注意， 如果你用 vim，会寻找名叫 VIM 的服务器；如果你已经有一个 gvim 在运行了， 你可以用 gvim –remote file 在已有的 gvim 中打开文件。</li>
</ul>
<h1 id="3-文档操作"><a href="#3-文档操作" class="headerlink" title="3. 文档操作"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">3. 文档操作</a></h1><ul>
<li>:e file – 关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi 会警告。</li>
<li>:e! file – 放弃对当前文件的修改，编辑新的文件。</li>
<li>:e+file – 开始新的文件，并从文件尾开始编辑。</li>
<li>:e+n file – 开始新的文件，并从第 n 行开始编辑。</li>
<li>:enew – 编译一个未命名的新文档。(CTRL-W n)</li>
<li>:e – 重新加载当前文档。</li>
<li>:e! – 重新加载当前文档，并丢弃已做的改动。</li>
<li>:e# 或 ctrl+^ – 回到刚才编辑的文件，很实用。</li>
<li>:f 或 ctrl+g – 显示文档名，是否修改，和光标位置。</li>
<li>:f filename – 改变编辑的文件名，这时再保存相当于另存为。</li>
<li>gf – 打开以光标所在字符串为文件名的文件。</li>
<li>:w – 保存修改。</li>
<li>:n1,n2w filename – 选择性保存从某 n1 行到另 n2 行的内容。</li>
<li>:wq – 保存并退出。</li>
<li>ZZ – 保存并退出。</li>
<li>:x – 保存并退出。</li>
<li>:q[uit] ——退出当前窗口。(CTRL-W q 或 CTRL-W CTRL-Q)</li>
<li>:saveas newfilename – 另存为</li>
<li>:browse e – 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开 netrw 的文件浏览窗口； 如果是 gvim，则会打开一个图形界面的浏览窗口。 实际上: browse 后可以跟任何编辑文档的命令，如 sp 等。 用 browse 打开的起始目录可以由 browsedir 来设置：<ul>
<li>:set browsedir=last – 用上次访问过的目录（默认）；</li>
<li>:set browsedir=buffer – 用当前文件所在目录；</li>
<li>:set browsedir=current – 用当前工作目录；</li>
</ul>
</li>
<li>:Sex – 水平分割一个窗口，浏览文件系统；</li>
<li>:Vex – 垂直分割一个窗口，浏览文件系统；</li>
</ul>
<h1 id="4-光标的移动"><a href="#4-光标的移动" class="headerlink" title="4. 光标的移动"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">4. 光标的移动</a></h1><h2 id="4-1-基本移动"><a href="#4-1-基本移动" class="headerlink" title="4.1 基本移动"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id64" target="_blank" rel="noopener">4.1 基本移动</a></h2><p>以下移动都是在 normal 模式下。</p>
<ul>
<li>h 或退格: 左移一个字符；</li>
<li>l 或空格: 右移一个字符；</li>
<li>j: 下移一行；</li>
<li>k: 上移一行；</li>
<li>gj: 移动到一段内的下一行；</li>
<li>gk: 移动到一段内的上一行；</li>
<li><ul>
<li>或 Enter: 把光标移至下一行第一个非空白字符。</li>
</ul>
</li>
<li>-: 把光标移至上一行第一个非空白字符。</li>
<li>w: 前移一个单词，光标停在下一个单词开头；</li>
<li>W: 移动下一个单词开头，但忽略一些标点；</li>
<li>e: 前移一个单词，光标停在下一个单词末尾；</li>
<li>E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点；</li>
<li>b: 后移一个单词，光标停在上一个单词开头；</li>
<li>B: 移动到上一个单词开头，忽略一些标点；</li>
<li>ge: 后移一个单词，光标停在上一个单词末尾；</li>
<li>gE: 同 ge ，不过‘单词’包含单词相邻的标点。</li>
<li>(: 前移 1 句。</li>
<li>): 后移 1 句。</li>
<li>{: 前移 1 段。</li>
<li>}: 后移 1 段。</li>
<li>fc: 把光标移到同一行的下一个 c 字符处</li>
<li>Fc: 把光标移到同一行的上一个 c 字符处</li>
<li>tc: 把光标移到同一行的下一个 c 字符前</li>
<li>Tc: 把光标移到同一行的上一个 c 字符后</li>
<li>;: 配合 f &amp; t 使用，重复一次</li>
<li>,: 配合 f &amp; t 使用，反向重复一次</li>
</ul>
<p>上面的操作都可以配合 n 使用，比如在正常模式 (下面会讲到) 下输入 3h， 则光标向左移动 3 个字符。</p>
<ul>
<li>0: 移动到行首。</li>
<li>g0: 移到光标所在屏幕行行首。</li>
<li>^: 移动到本行第一个非空白字符。</li>
<li>g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。</li>
<li>$: 移动到行尾。</li>
<li>g$: 移动光标所在屏幕行行尾。</li>
<li>n|: 把光标移到递 n 列上。</li>
<li>nG: 到文件第 n 行。</li>
<li>:n 移动到第 n 行。</li>
<li>:$ 移动到最后一行。</li>
<li>H: 把光标移到屏幕最顶端一行。</li>
<li>M: 把光标移到屏幕中间一行。</li>
<li>L: 把光标移到屏幕最底端一行。</li>
<li>gg: 到文件头部。</li>
<li>G: 到文件尾部。</li>
</ul>
<h2 id="4-2-翻屏"><a href="#4-2-翻屏" class="headerlink" title="4.2 翻屏"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id65" target="_blank" rel="noopener">4.2 翻屏</a></h2><ul>
<li>ctrl+f: 下翻一屏。</li>
<li>ctrl+b: 上翻一屏。</li>
<li>ctrl+d: 下翻半屏。</li>
<li>ctrl+u: 上翻半屏。</li>
<li>ctrl+e: 向下滚动一行。</li>
<li>ctrl+y: 向上滚动一行。</li>
<li>n%: 到文件 n% 的位置。</li>
<li>zz: 将当前行移动到屏幕中央。</li>
<li>zt: 将当前行移动到屏幕顶端。</li>
<li>zb: 将当前行移动到屏幕底端。</li>
</ul>
<h2 id="4-3-标记"><a href="#4-3-标记" class="headerlink" title="4.3 标记"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id66" target="_blank" rel="noopener">4.3 标记</a></h2><p>使用标记可以快速移动。到达标记后，可以用 Ctrl+o 返回原来的位置。 Ctrl+o 和 Ctrl+i 很像浏览器上的 <em>后退</em> 和 <em>前进</em> 。</p>
<ul>
<li>m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。</li>
<li>m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出 Vim， 重新启动，标记仍然有效。</li>
<li>`{a-z}: 移动到标记位置。</li>
<li>‘{a-z}: 移动到标记行的行首。</li>
<li>`{0-9}：回到上 [2-10] 次关闭 vim 时最后离开的位置。</li>
<li><code>: 移动到上次编辑的位置。&#39;&#39;也可以，不过</code> 精确到列，而’’精确到行 。如果想跳转到更老的位置，可以按 C-o，跳转到更新的位置用 C-i。</li>
<li>`”: 移动到上次离开的地方。</li>
<li>`.: 移动到最后改动的地方。</li>
<li>:marks 显示所有标记。</li>
<li>:delmarks a b – 删除标记 a 和 b。</li>
<li>:delmarks a-c – 删除标记 a、b 和 c。</li>
<li>:delmarks a c-f – 删除标记 a、c、d、e、f。</li>
<li>:delmarks! – 删除当前缓冲区的所有标记。</li>
<li>:help mark-motions 查看更多关于 mark 的知识。</li>
</ul>
<h1 id="5-插入文本"><a href="#5-插入文本" class="headerlink" title="5. 插入文本"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">5. 插入文本</a></h1><h2 id="5-1-基本插入"><a href="#5-1-基本插入" class="headerlink" title="5.1 基本插入"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id68" target="_blank" rel="noopener">5.1 基本插入</a></h2><ul>
<li>i: 在光标前插入；一个小技巧：按 8，再按 i，进入插入模式，输入 =， 按 esc 进入命令模式，就会出现 8 个 =。 这在插入分割线时非常有用，如 30i+ 就插入了 36 个 + 组成的分割线。</li>
<li>I: 在当前行第一个非空字符前插入；</li>
<li>gI: 在当前行第一列插入；</li>
<li>a: 在光标后插入；</li>
<li>A: 在当前行最后插入；</li>
<li>o: 在下面新建一行插入；</li>
<li>O: 在上面新建一行插入；</li>
<li>:r filename 在当前位置插入另一个文件的内容。</li>
<li>:[n]r filename 在第 n 行插入另一个文件的内容。</li>
<li>:r !date 在光标处插入当前日期与时间。同理，:r !command 可以将其它 shell 命令的输出插入当前文档。</li>
</ul>
<h2 id="5-2-改写插入"><a href="#5-2-改写插入" class="headerlink" title="5.2 改写插入"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id69" target="_blank" rel="noopener">5.2 改写插入</a></h2><ul>
<li>c[n]w: 改写光标后 1(n) 个词。</li>
<li>c[n]l: 改写光标后 n 个字母。</li>
<li>c[n]h: 改写光标前 n 个字母。</li>
<li>[n]cc: 修改当前 [n] 行。</li>
<li>[n]s: 以输入的文本替代光标之后 1(n) 个字符，相当于 c[n]l。</li>
<li>[n]S: 删除指定数目的行，并以所输入文本代替之。</li>
</ul>
<p>注意，类似 cnw,dnw,ynw 的形式同样可以写为 ncw,ndw,nyw。</p>
<h1 id="6-剪切复制和寄存器"><a href="#6-剪切复制和寄存器" class="headerlink" title="6. 剪切复制和寄存器"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">6. 剪切复制和寄存器</a></h1><h2 id="6-1-剪切和复制、粘贴"><a href="#6-1-剪切和复制、粘贴" class="headerlink" title="6.1 剪切和复制、粘贴"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id71" target="_blank" rel="noopener">6.1 剪切和复制、粘贴</a></h2><ul>
<li>[n]x: 剪切光标右边 n 个字符，相当于 d[n]l。</li>
<li>[n]X: 剪切光标左边 n 个字符，相当于 d[n]h。</li>
<li>y: 复制在可视模式下选中的文本。</li>
<li>yy or Y: 复制整行文本。</li>
<li>y[n]w: 复制一 (n) 个词。</li>
<li>y[n]l: 复制光标右边 1(n) 个字符。</li>
<li>y[n]h: 复制光标左边 1(n) 个字符。</li>
<li>y$: 从光标当前位置复制到行尾。</li>
<li>y0: 从光标当前位置复制到行首。</li>
<li>:m,ny 复制 m 行到 n 行的内容。</li>
<li>y1G 或 ygg: 复制光标以上的所有行。</li>
<li>yG: 复制光标以下的所有行。</li>
<li>yaw 和 yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。</li>
<li>d: 删除（剪切）在可视模式下选中的文本。</li>
<li>d$ or D: 删除（剪切）当前位置到行尾的内容。</li>
<li>d[n]w: 删除（剪切）1(n) 个单词</li>
<li>d[n]l: 删除（剪切）光标右边 1(n) 个字符。</li>
<li>d[n]h: 删除（剪切）光标左边 1(n) 个字符。</li>
<li>d0: 删除（剪切）当前位置到行首的内容</li>
<li>[n] dd: 删除（剪切）1(n) 行。</li>
<li>:m,nd 剪切 m 行到 n 行的内容。</li>
<li>d1G 或 dgg: 剪切光标以上的所有行。</li>
<li>dG: 剪切光标以下的所有行。</li>
<li>daw 和 das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。</li>
<li>d/f：这是一个比较高级的组合命令，它将删除当前位置 到下一个 f 之间的内容。</li>
<li>p: 在光标之后粘贴。</li>
<li>P: 在光标之前粘贴。</li>
</ul>
<h2 id="6-2-文本对象"><a href="#6-2-文本对象" class="headerlink" title="6.2 文本对象"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id72" target="_blank" rel="noopener">6.2 文本对象</a></h2><ul>
<li>aw：一个词</li>
<li>as：一句。</li>
<li>ap：一段。</li>
<li>ab：一块（包含在圆括号中的）。</li>
</ul>
<p>y, d, c, v 都可以跟文本对象。</p>
<h2 id="6-3-寄存器"><a href="#6-3-寄存器" class="headerlink" title="6.3 寄存器"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id73" target="_blank" rel="noopener">6.3 寄存器</a></h2><ul>
<li>a-z：都可以用作寄存器名。”ayy 把当前行的内容放入 a 寄存器。</li>
<li>A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如 “Ayy 把当前行的内容追加到 a 寄存器中。</li>
<li>:reg 显示所有寄存器的内容。</li>
<li>“”：不加寄存器索引时，默认使用的寄存器。</li>
<li>“<em>：当前选择缓冲区，”</em>yy 把当前行的内容放入当前选择缓冲区。</li>
<li>“+：系统剪贴板。”+yy 把当前行的内容放入系统剪贴板。</li>
</ul>
<h1 id="7-查找与替换"><a href="#7-查找与替换" class="headerlink" title="7. 查找与替换"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">7. 查找与替换</a></h1><h2 id="7-1-查找"><a href="#7-1-查找" class="headerlink" title="7.1 查找"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id75" target="_blank" rel="noopener">7.1 查找</a></h2><ul>
<li>/something: 在后面的文本中查找 something。</li>
<li>?something: 在前面的文本中查找 something。</li>
<li>/pattern/+number: 将光标停在包含 pattern 的行后面第 number 行上。</li>
<li>/pattern/-number: 将光标停在包含 pattern 的行前面第 number 行上。</li>
<li>n: 向后查找下一个。</li>
<li>N: 向前查找下一个。</li>
</ul>
<p>可以用 grep 或 vimgrep 查找一个模式都在哪些地方出现过，</p>
<p>其中: grep 是调用外部的 grep 程序，而: vimgrep 是 vim 自己的查找算法。</p>
<p>用法为： :vim[grep]/pattern/[g] [j] files</p>
<p>g 的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。</p>
<p>j 的含义是 grep 结束后，结果停在第 j 项，默认是停在第一项。</p>
<p>vimgrep 前面可以加数字限定搜索结果的上限，如</p>
<p>:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。</p>
<p>其实 vimgrep 在读纯文本电子书时特别有用，可以生成导航的目录。</p>
<p>比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：</p>
<p>:vim/^d{1,}./ %</p>
<p>然后用: cw 或: copen 查看结果，可以用 C-w H 把 quickfix 窗口移到左侧，</p>
<p>就更像个目录了。</p>
<h2 id="7-2-替换"><a href="#7-2-替换" class="headerlink" title="7.2 替换"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id76" target="_blank" rel="noopener">7.2 替换</a></h2><ul>
<li>:s/old/new - 用 new 替换当前行第一个 old。</li>
<li>:s/old/new/g - 用 new 替换当前行所有的 old。</li>
<li>:n1,n2s/old/new/g - 用 new 替换文件 n1 行到 n2 行所有的 old。</li>
<li>:%s/old/new/g - 用 new 替换文件中所有的 old。</li>
<li>:%s/^/xxx/g - 在每一行的行首插入 xxx，^ 表示行首。</li>
<li>:%s/$/xxx/g - 在每一行的行尾插入 xxx，$ 表示行尾。</li>
<li>所有替换命令末尾加上 c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上 i 则忽略大小写 (ignore)。</li>
</ul>
<p>还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，</p>
<p>语法为 :[range]g/pattern/command</p>
<p>例如 :%g/^ xyz/normal dd。</p>
<p>表示对于以一个空格和 xyz 开头的行执行 normal 模式下的 dd 命令。</p>
<p>关于 range 的规定为：</p>
<ul>
<li>如果不指定 range，则表示当前行。</li>
<li>m,n: 从 m 行到 n 行。</li>
<li>0: 最开始一行（可能是这样）。</li>
<li>$: 最后一行</li>
<li>.: 当前行</li>
<li>%: 所有行</li>
</ul>
<h2 id="7-3-正则表达式"><a href="#7-3-正则表达式" class="headerlink" title="7.3 正则表达式"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id77" target="_blank" rel="noopener">7.3 正则表达式</a></h2><p>高级的查找替换就要用到正则表达式。</p>
<ul>
<li>\d: 表示十进制数（我猜的）</li>
<li>\s: 表示空格</li>
<li>\S: 非空字符</li>
<li>\a: 英文字母</li>
<li>|: 表示 或</li>
<li>.: 表示.</li>
<li>{m,n}: 表示 m 到 n 个字符。这要和 \s 与 \ a 等连用，如 \a{m,n} 表示 m 到 n 个英文字母。</li>
<li>{m,}: 表示 m 到无限多个字符。</li>
<li>**: 当前目录下的所有子目录。</li>
</ul>
<p>:help pattern 得到更多帮助。</p>
<hr>
<h1 id="8-排版"><a href="#8-排版" class="headerlink" title="8. 排版"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">8. 排版</a></h1><h2 id="8-1-基本排版"><a href="#8-1-基本排版" class="headerlink" title="8.1 基本排版"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id79" target="_blank" rel="noopener">8.1 基本排版</a></h2><ul>
<li><p>&lt;&lt; 向左缩进一个 shiftwidth</p>
</li>
<li><blockquote>
<blockquote>
<p>向右缩进一个 shiftwidth</p>
</blockquote>
</blockquote>
</li>
<li><p>:ce(nter) 本行文字居中</p>
</li>
<li><p>:le(ft) 本行文字靠左</p>
</li>
<li><p>:ri(ght) 本行文字靠右</p>
</li>
<li><p>gq 对选中的文字重排，即对过长的文字进行断行</p>
</li>
<li><p>gqq 重排当前行</p>
</li>
<li><p>gqnq 重排 n 行</p>
</li>
<li><p>gqap 重排当前段</p>
</li>
<li><p>gqnap 重排 n 段</p>
</li>
<li><p>gqnj 重排当前行和下面 n 行</p>
</li>
<li><p>gqQ 重排当前段对文章末尾</p>
</li>
<li><p>J 拼接当前行和下一行</p>
</li>
<li><p>gJ 同 J ，不过合并后不留空格。</p>
</li>
</ul>
<h2 id="8-2-拼写检查"><a href="#8-2-拼写检查" class="headerlink" title="8.2 拼写检查"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id80" target="_blank" rel="noopener">8.2 拼写检查</a></h2><ul>
<li>:set spell－开启拼写检查功能</li>
<li>:set nospell－关闭拼写检查功能</li>
<li>]s－移到下一个拼写错误的单词</li>
<li>[s－作用与上一命令类似，但它是从相反方向进行搜索</li>
<li>z=－显示一个有关拼写错误单词的列表，可从中选择</li>
<li>zg－告诉拼写检查器该单词是拼写正确的</li>
<li>zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的</li>
</ul>
<h2 id="8-3-统计字数"><a href="#8-3-统计字数" class="headerlink" title="8.3 统计字数"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id81" target="_blank" rel="noopener">8.3 统计字数</a></h2><p>g ^g 可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。</p>
<hr>
<h1 id="9-编辑多个文件"><a href="#9-编辑多个文件" class="headerlink" title="9. 编辑多个文件"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">9. 编辑多个文件</a></h1><h2 id="9-1-一次编辑多个文件"><a href="#9-1-一次编辑多个文件" class="headerlink" title="9.1 一次编辑多个文件"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id83" target="_blank" rel="noopener">9.1 一次编辑多个文件</a></h2><p>我们可以一次打开多个文件，如</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi a.txt b.txt c.txt</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>使用: next(:n) 编辑下一个文件。</li>
<li>:2n 编辑下 2 个文件。</li>
<li>使用: previous 或: N 编辑上一个文件。</li>
<li>使用: wnext，保存当前文件，并编辑下一个文件。</li>
<li>使用: wprevious，保存当前文件，并编辑上一个文件。</li>
<li>使用: args 显示文件列表。</li>
<li>:n filenames 或: args filenames 指定新的文件列表。</li>
<li>vi -o filenames 在水平分割的多个窗口中编辑多个文件。</li>
<li>vi -O filenames 在垂直分割的多个窗口中编辑多个文件。</li>
</ul>
<h2 id="9-2-多标签编辑"><a href="#9-2-多标签编辑" class="headerlink" title="9.2 多标签编辑"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id84" target="_blank" rel="noopener">9.2 多标签编辑</a></h2><ul>
<li>vim -p files: 打开多个文件，每个文件占用一个标签页。</li>
<li>:tabe, tabnew – 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。</li>
<li>^w gf – 在新的标签页里打开光标下路径指定的文件。</li>
<li>:tabn – 切换到下一个标签。Control + PageDown，也可以。</li>
<li>:tabp – 切换到上一个标签。Control + PageUp，也可以。</li>
<li>[n] gt – 切换到下一个标签。如果前面加了 n ， 就切换到第 n 个标签。第一个标签的序号就是 1。</li>
<li>:tab split – 将当前缓冲区的内容在新页签中打开。</li>
<li>:tabc[lose] – 关闭当前的标签页。</li>
<li>:tabo[nly] – 关闭其它的标签页。</li>
<li>:tabs – 列出所有的标签页和它们包含的窗口。</li>
<li>:tabm[ove] [N] – 移动标签页，移动到第 N 个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。</li>
</ul>
<h2 id="9-3-缓冲区"><a href="#9-3-缓冲区" class="headerlink" title="9.3 缓冲区"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id85" target="_blank" rel="noopener">9.3 缓冲区</a></h2><ul>
<li>:buffers 或: ls 或: files 显示缓冲区列表。</li>
<li>ctrl+^：在最近两个缓冲区间切换。</li>
<li>:bn – 下一个缓冲区。</li>
<li>:bp – 上一个缓冲区。</li>
<li>:bl – 最后一个缓冲区。</li>
<li>:b[n] 或:[n]b – 切换到第 n 个缓冲区。</li>
<li>:nbw(ipeout) – 彻底删除第 n 个缓冲区。</li>
<li>:nbd(elete) – 删除第 n 个缓冲区，并未真正删除，还在 unlisted 列表中。</li>
<li>:ba[ll] – 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。</li>
<li>vim -o file1 file2: 水平分割窗口，同时打开 file1 和 file2</li>
<li>vim -O file1 file2: 垂直分割窗口，同时打开 file1 和 file2</li>
</ul>
<h1 id="10-分屏编辑"><a href="#10-分屏编辑" class="headerlink" title="10. 分屏编辑"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">10. 分屏编辑</a></h1><h2 id="10-1-水平分割"><a href="#10-1-水平分割" class="headerlink" title="10.1 水平分割"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id87" target="_blank" rel="noopener">10.1 水平分割</a></h2><ul>
<li>:split(:sp) – 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S 可能会冻结终端，请按 CTRL-Q 继续。</li>
<li>:split filename – 水平分割窗口，并在新窗口中显示另一个文件。</li>
<li>:nsplit(:nsp) – 水平分割出一个 n 行高的窗口。</li>
<li>:[N]new – 水平分割出一个 N 行高的窗口，并编辑一个新文件。 (CTRL-W n 或 CTRL-W CTRL-N)</li>
<li>ctrl+w f – 水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。</li>
<li>C-w C-^ – 水平分割一个窗口，打开刚才编辑的文件。</li>
</ul>
<h2 id="10-2-垂直分割"><a href="#10-2-垂直分割" class="headerlink" title="10.2 垂直分割"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id88" target="_blank" rel="noopener">10.2 垂直分割</a></h2><ul>
<li>:vsplit(:vsp) – 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v 或 CTRL CTRL-V)</li>
<li>:[N]vne[w] – 垂直分割出一个新窗口。</li>
<li>:vertical 水平分割的命令： 相应的垂直分割。</li>
</ul>
<h2 id="10-3-关闭子窗口"><a href="#10-3-关闭子窗口" class="headerlink" title="10.3 关闭子窗口"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id89" target="_blank" rel="noopener">10.3 关闭子窗口</a></h2><ul>
<li>:qall – 关闭所有窗口，退出 vim。</li>
<li>:wall – 保存所有修改过的窗口。</li>
<li>:only – 只保留当前窗口，关闭其它窗口。(CTRL-W o)</li>
<li>:close – 关闭当前窗口，CTRL-W c 能实现同样的功能。 (象 :q :x 同样工作)</li>
</ul>
<h2 id="10-4-调整窗口大小"><a href="#10-4-调整窗口大小" class="headerlink" title="10.4 调整窗口大小"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id90" target="_blank" rel="noopener">10.4 调整窗口大小</a></h2><ul>
<li>ctrl+w + – 当前窗口增高一行。也可以用 n 增高 n 行。</li>
<li>ctrl+w - – 当前窗口减小一行。也可以用 n 减小 n 行。</li>
<li>ctrl+w _ – 当前窗口扩展到尽可能的大。也可以用 n 设定行数。</li>
<li>:resize n – 当前窗口 n 行高。</li>
<li>ctrl+w = – 所有窗口同样高度。</li>
<li>n ctrl+w _ – 当前窗口的高度设定为 n 行。</li>
<li>ctrl+w &lt; – 当前窗口减少一列。也可以用 n 减少 n 列。</li>
<li>ctrl+w &gt; – 当前窗口增宽一列。也可以用 n 增宽 n 列。</li>
<li>ctrl+w | – 当前窗口尽可能的宽。也可以用 n 设定列数。</li>
</ul>
<h2 id="10-5-切换和移动窗口"><a href="#10-5-切换和移动窗口" class="headerlink" title="10.5 切换和移动窗口"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id91" target="_blank" rel="noopener">10.5 切换和移动窗口</a></h2><p>如果支持鼠标，切换和调整子窗口的大小就简单了。</p>
<ul>
<li>ctrl+w ctrl+w: 切换到下一个窗口。或者是 ctrl+w w。</li>
<li>ctrl+w p: 切换到前一个窗口。</li>
<li>ctrl+w h(l,j,k): 切换到左（右，下，上）的窗口。</li>
<li>ctrl+w t(b): 切换到最上（下）面的窗口。</li>
<li>ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。</li>
<li>ctrl+w r：旋转窗口的位置。</li>
<li>ctrl+w T: 将当前的窗口移动到新的标签页上。</li>
</ul>
<h1 id="11-快速编辑"><a href="#11-快速编辑" class="headerlink" title="11. 快速编辑"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">11. 快速编辑</a></h1><h2 id="11-1-改变大小写"><a href="#11-1-改变大小写" class="headerlink" title="11.1 改变大小写"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id93" target="_blank" rel="noopener">11.1 改变大小写</a></h2><ul>
<li>~: 反转光标所在字符的大小写。</li>
<li>可视模式下的 U 或 u：把选中的文本变为大写或小写。</li>
<li>gu(U) 接范围（如 $，或 G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如 ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如 gu5j，把当前行和下面四行全部变成小写。</li>
</ul>
<h2 id="11-3-撤消与重做（normal-模式）"><a href="#11-3-撤消与重做（normal-模式）" class="headerlink" title="11.3 撤消与重做（normal 模式）"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id95" target="_blank" rel="noopener">11.3 撤消与重做（normal 模式）</a></h2><ul>
<li>[n] u: 取消一 (n) 个改动。</li>
<li>:undo 5 – 撤销 5 个改变。</li>
<li>:undolist – 你的撤销历史。</li>
<li>ctrl + r: 重做最后的改动。</li>
<li>U: 取消当前行中所有的改动。</li>
<li>:earlier 4m – 回到 4 分钟前</li>
<li>:later 55s – 前进 55 秒</li>
</ul>
<h2 id="11-4-宏"><a href="#11-4-宏" class="headerlink" title="11.4 宏"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id96" target="_blank" rel="noopener">11.4 宏</a></h2><ul>
<li>. – 重复上一个编辑动作</li>
<li>qa：开始录制宏 a（键盘操作记录）</li>
<li>q：停止录制</li>
<li>@a：播放宏 a</li>
</ul>
<h1 id="12-编辑特殊文件"><a href="#12-编辑特殊文件" class="headerlink" title="12. 编辑特殊文件"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">12. 编辑特殊文件</a></h1><h2 id="12-1-文件加解密"><a href="#12-1-文件加解密" class="headerlink" title="12.1 文件加解密"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id98" target="_blank" rel="noopener">12.1 文件加解密</a></h2><ul>
<li>vim -x file: 开始编辑一个加密的文件。</li>
<li>:X – 为当前文件设置密码。</li>
<li>:set key= – 去除文件的密码。</li>
</ul>
<p><a href="http://www.cnblogs.com/jiqingwu/admin/vim-quick-edit.html" target="_blank" rel="noopener">这里是</a> 滇狐总结的比较高级的 vi 技巧。</p>
<h2 id="12-2-文件的编码"><a href="#12-2-文件的编码" class="headerlink" title="12.2 文件的编码"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id99" target="_blank" rel="noopener">12.2 文件的编码</a></h2><ul>
<li>:e ++enc=utf8 filename, 让 vim 用 utf-8 的编码打开这个文件。</li>
<li>:w ++enc=gbk，不管当前文件什么编码，把它转存成 gbk 编码。</li>
<li>:set fenc 或: set fileencoding，查看当前文件的编码。</li>
<li>在 vimrc 中添加 set fileencoding=ucs-bom,utf-8,cp936，vim 会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936 对应于 gbk 编码。 ucs-bom 对应于 windows 下的文件格式。</li>
</ul>
<p>让 vim 正确处理文件格式和文件编码，有赖于 <a href="http://www.cnblogs.com/jiqingwu/admin/vimrc.html" target="_blank" rel="noopener">~/.vimrc 的正确配置</a></p>
<h2 id="12-3-文件格式"><a href="#12-3-文件格式" class="headerlink" title="12.3 文件格式"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id100" target="_blank" rel="noopener">12.3 文件格式</a></h2><p>大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。</p>
<ul>
<li>:e ++ff=dos filename, 让 vim 用 dos 格式打开这个文件。</li>
<li>:w ++ff=mac filename, 以 mac 格式存储这个文件。</li>
<li>:set ff，显示当前文件的格式。</li>
<li>在 vimrc 中添加 set fileformats=unix,dos,mac，让 vim 自动识别文件格式。</li>
</ul>
<h1 id="13-编程辅助"><a href="#13-编程辅助" class="headerlink" title="13. 编程辅助"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">13. 编程辅助</a></h1><h2 id="13-1-一些按键"><a href="#13-1-一些按键" class="headerlink" title="13.1 一些按键"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id102" target="_blank" rel="noopener">13.1 一些按键</a></h2><ul>
<li>gd: 跳转到局部变量的定义处；</li>
<li>gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；</li>
<li>g;: 上一个修改过的地方；</li>
<li>g,: 下一个修改过的地方；</li>
<li>[[: 跳转到上一个函数块开始，需要有单独一行的 {。</li>
<li>]]: 跳转到下一个函数块开始，需要有单独一行的 {。</li>
<li>[]: 跳转到上一个函数块结束，需要有单独一行的}。</li>
<li>][: 跳转到下一个函数块结束，需要有单独一行的}。</li>
<li>[{: 跳转到当前块开始处；</li>
<li>]}: 跳转到当前块结束处；</li>
<li>[/: 跳转到当前注释块开始处；</li>
<li>]/: 跳转到当前注释块结束处；</li>
<li>%: 不仅能移动到匹配的 (),{} 或[]上，而且能在 #if，#else， #endif 之间跳跃。</li>
</ul>
<p>下面的括号匹配对编程很实用的。</p>
<ul>
<li>ci’, di’, yi’：修改、剪切或复制’之间的内容。</li>
<li>ca’, da’, ya’：修改、剪切或复制’之间的内容，包含’。</li>
<li>ci”, di”, yi”：修改、剪切或复制” 之间的内容。</li>
<li>ca”, da”, ya”：修改、剪切或复制” 之间的内容，包含 “。</li>
<li>ci(, di(, yi(：修改、剪切或复制 () 之间的内容。</li>
<li>ca(, da(, ya(：修改、剪切或复制 () 之间的内容，包含()。</li>
<li>ci[, di[, yi[：修改、剪切或复制 [] 之间的内容。</li>
<li>ca[, da[, ya[：修改、剪切或复制 [] 之间的内容，包含[]。</li>
<li>ci{, di{, yi{：修改、剪切或复制 {} 之间的内容。</li>
<li>ca{, da{, ya{：修改、剪切或复制 {} 之间的内容，包含{}。</li>
<li>ci&lt;, di&lt;, yi&lt;：修改、剪切或复制 &lt;&gt; 之间的内容。</li>
<li>ca&lt;, da&lt;, ya&lt;：修改、剪切或复制 &lt;&gt; 之间的内容，包含&lt;&gt;。</li>
</ul>
<h2 id="13-3-cscope"><a href="#13-3-cscope" class="headerlink" title="13.3 cscope"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id104" target="_blank" rel="noopener">13.3 cscope</a></h2><ul>
<li>cscope -Rbq: 生成 cscope.out 文件</li>
<li>:cs add /path/to/cscope.out /your/work/dir</li>
<li>:cs find c func – 查找 func 在哪些地方被调用</li>
<li>:cw – 打开 quickfix 窗口查看结果</li>
</ul>
<h2 id="13-5-编译"><a href="#13-5-编译" class="headerlink" title="13.5 编译"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id106" target="_blank" rel="noopener">13.5 编译</a></h2><p>vim 提供了: make 来编译程序，默认调用的是 make， 如果你当前目录下有 makefile，简单地: make 即可。</p>
<p>如果你没有 make 程序，你可以通过配置 makeprg 选项来更改 make 调用的程序。 如果你只有一个 abc.java 文件，你可以这样设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set makeprg&#x3D;javac\ abc.java</span><br></pre></td></tr></table></figure>

<p>然后: make 即可。如果程序有错，可以通过 quickfix 窗口查看错误。 不过如果要正确定位错误，需要设置好 errorformat，让 vim 识别错误信息。 如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:setl efm&#x3D;%A%f:%l:\ %m,%-Z%p^,%-C%.%#</span><br></pre></td></tr></table></figure>

<p>%f 表示文件名，%l 表示行号， %m 表示错误信息，其它的还不能理解。 请参考 :help errorformat。</p>
<h2 id="13-6-快速修改窗口"><a href="#13-6-快速修改窗口" class="headerlink" title="13.6 快速修改窗口"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id107" target="_blank" rel="noopener">13.6 快速修改窗口</a></h2><p>其实是 quickfix 插件提供的功能， 对编译调试程序非常有用 :)</p>
<ul>
<li>:copen – 打开快速修改窗口。</li>
<li>:cclose – 关闭快速修改窗口。</li>
</ul>
<p>快速修改窗口在 make 程序时非常有用，当 make 之后：</p>
<ul>
<li>:cl – 在快速修改窗口中列出错误。</li>
<li>:cn – 定位到下一个错误。</li>
<li>:cp – 定位到上一个错误。</li>
<li>:cr – 定位到第一个错误。</li>
</ul>
<h2 id="13-7-自动补全"><a href="#13-7-自动补全" class="headerlink" title="13.7 自动补全"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id108" target="_blank" rel="noopener">13.7 自动补全</a></h2><ul>
<li>C-x C-s – 拼写建议。</li>
<li>C-x C-v – 补全 vim 选项和命令。</li>
<li>C-x C-l – 整行补全。</li>
<li>C-x C-f – 自动补全文件路径。弹出菜单后，按 C-f 循环选择，当然也可以按 C-n 和 C-p。</li>
<li>C-x C-p 和 C-x C-n – 用文档中出现过的单词补全当前的词。 直接按 C-p 和 C-n 也可以。</li>
<li>C-x C-o – 编程时可以补全关键字和函数名啊。</li>
<li>C-x C-i – 根据头文件内关键字补全。</li>
<li>C-x C-d – 补全宏定义。</li>
<li>C-x C-n – 按缓冲区中出现过的关键字补全。 直接按 C-n 或 C-p 即可。</li>
</ul>
<p>当弹出补全菜单后：</p>
<ul>
<li>C-p 向前切换成员；</li>
<li>C-n 向后切换成员；</li>
<li>C-e 退出下拉菜单，并退回到原来录入的文字；</li>
<li>C-y 退出下拉菜单，并接受当前选项。</li>
</ul>
<h2 id="13-8-多行缩进缩出"><a href="#13-8-多行缩进缩出" class="headerlink" title="13.8 多行缩进缩出"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id109" target="_blank" rel="noopener">13.8 多行缩进缩出</a></h2><ul>
<li>正常模式下，按两下 &gt;; 光标所在行会缩进。</li>
<li>如果先按了 n，再按两下 &gt;;，光标以下的 n 行会缩进。</li>
<li>对应的，按两下 &lt;;，光标所在行会缩出。</li>
<li>如果在编辑代码文件，可以用 = 进行调整。</li>
<li>在可视模式下，选择要调整的代码块，按 =，代码会按书写规则缩排好。</li>
<li>或者 n =，调整 n 行代码的缩排。</li>
</ul>
<h2 id="13-9-折叠"><a href="#13-9-折叠" class="headerlink" title="13.9 折叠"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id110" target="_blank" rel="noopener">13.9 折叠</a></h2><ul>
<li>zf – 创建折叠的命令，可以在一个可视区域上使用该命令；</li>
<li>zd – 删除当前行的折叠；</li>
<li>zD – 删除当前行的折叠；</li>
<li>zfap – 折叠光标所在的段；</li>
<li>zo – 打开折叠的文本；</li>
<li>zc – 收起折叠；</li>
<li>za – 打开 / 关闭当前折叠；</li>
<li>zr – 打开嵌套的折行；</li>
<li>zm – 收起嵌套的折行；</li>
<li>zR (zO) – 打开所有折行；</li>
<li>zM (zC) – 收起所有折行；</li>
<li>zj – 跳到下一个折叠处；</li>
<li>zk – 跳到上一个折叠处；</li>
<li>zi – enable/disable fold;</li>
</ul>
<p>normal 模式下按: 进入命令行模式</p>
<h1 id="14-命令行"><a href="#14-命令行" class="headerlink" title="14. 命令行"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">14. 命令行</a></h1><h2 id="14-1-命令行模式下的快捷键："><a href="#14-1-命令行模式下的快捷键：" class="headerlink" title="14.1 命令行模式下的快捷键："></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id112" target="_blank" rel="noopener">14.1 命令行模式下的快捷键：</a></h2><ul>
<li>上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。</li>
<li>左右方向键：左 / 右移一个字符。</li>
<li>C-w： 向前删除一个单词。</li>
<li>C-h： 向前删除一个字符，等同于 Backspace。</li>
<li>C-u： 从当前位置移动到命令行开头。</li>
<li>C-b： 移动到命令行开头。</li>
<li>C-e： 移动到命令行末尾。</li>
<li>Shift-Left： 左移一个单词。</li>
<li>Shift-Right： 右移一个单词。</li>
<li>@： 重复上一次的冒号命令。</li>
<li>q： 正常模式下，q 然后按’:’，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。</li>
<li>q / 和 q? 可以打开查找历史记录。</li>
</ul>
<h2 id="14-2-执行外部命令"><a href="#14-2-执行外部命令" class="headerlink" title="14.2 执行外部命令"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id113" target="_blank" rel="noopener">14.2 执行外部命令</a></h2><ul>
<li>:! cmd 执行外部命令。</li>
<li>:!! 执行上一次的外部命令。</li>
<li>:sh 调用 shell，用 exit 返回 vim。</li>
<li>:r !cmd 将命令的返回结果插入文件当前位置。</li>
<li>:m,nw !cmd 将文件的 m 行到 n 行之间的内容做为命令输入执行命令。</li>
</ul>
<h1 id="15-其它"><a href="#15-其它" class="headerlink" title="15. 其它"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id60" target="_blank" rel="noopener">15. 其它</a></h1><h2 id="15-1-工作目录"><a href="#15-1-工作目录" class="headerlink" title="15.1 工作目录"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id115" target="_blank" rel="noopener">15.1 工作目录</a></h2><ul>
<li>:pwd 显示 vim 的工作目录。</li>
<li>:cd path 改变 vim 的工作目录。</li>
<li>:set autochdir 可以让 vim 根据编辑的文件自动切换工作目录。</li>
</ul>
<h2 id="15-2-一些快捷键（收集中）"><a href="#15-2-一些快捷键（收集中）" class="headerlink" title="15.2 一些快捷键（收集中）"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id116" target="_blank" rel="noopener">15.2 一些快捷键（收集中）</a></h2><ul>
<li>K: 打开光标所在词的 manpage。</li>
<li>*: 向下搜索光标所在词。</li>
<li>g*: 同上，但部分符合即可。</li>
<li>#: 向上搜索光标所在词。</li>
<li>g#: 同上，但部分符合即可。</li>
<li>g C-g: 统计全文或统计部分的字数。</li>
</ul>
<h2 id="15-3-在线帮助"><a href="#15-3-在线帮助" class="headerlink" title="15.3 在线帮助"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id117" target="_blank" rel="noopener">15.3 在线帮助</a></h2><ul>
<li>:h(elp) 或 F1 打开总的帮助。</li>
<li>:help user-manual 打开用户手册。</li>
<li>命令帮助的格式为：第一行指明怎么使用那个命令； 然后是缩进的一段解释这个命令的作用，然后是进一步的信息。</li>
<li>:helptags somepath 为 somepath 中的文档生成索引。</li>
<li>:helpgrep 可以搜索整个帮助文档，匹配的列表显示在 quickfix 窗口中。</li>
<li>Ctrl+] 跳转到 tag 主题，Ctrl+t 跳回。</li>
<li>:ver 显示版本信息。</li>
</ul>
<h2 id="15-4-一些小功能"><a href="#15-4-一些小功能" class="headerlink" title="15.4 一些小功能"></a><a href="http://climate2weather.cc/2019/05/18/vi_vim/#id118" target="_blank" rel="noopener">15.4 一些小功能</a></h2><ul>
<li>简单计算器: 在插入模式下，输入 C-r =，然后输入表达式，就能在 光标处得到计算结果。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id60" target="_blank" rel="noopener">1.Linuxer</a>1</p>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<p><a href="http://climate2weather.cc/images/vim1.png" target="_blank" rel="noopener"><img src="http://climate2weather.cc/images/vim1.png" alt="img"></a></p>
<h2 id="简化版本"><a href="#简化版本" class="headerlink" title="简化版本"></a>简化版本</h2><blockquote>
<p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="https://blog.qxzzf.com/361" target="_blank" rel="noopener">https://blog.qxzzf.com/361</a></p>
</blockquote>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim filename    </span><br><span class="line">:w              </span><br><span class="line">:w filename     </span><br><span class="line">:q              </span><br><span class="line">:q!             </span><br><span class="line">:wq</span><br></pre></td></tr></table></figure>

<h3 id="进入插入模式"><a href="#进入插入模式" class="headerlink" title="进入插入模式"></a>进入插入模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i   </span><br><span class="line">a   </span><br><span class="line">I   </span><br><span class="line">A   </span><br><span class="line">s   </span><br><span class="line">cw  </span><br><span class="line">c$  </span><br><span class="line">cc  </span><br><span class="line">o   </span><br><span class="line">O   </span><br><span class="line">R   </span><br><span class="line">r</span><br></pre></td></tr></table></figure>

<h3 id="复制、粘贴"><a href="#复制、粘贴" class="headerlink" title="复制、粘贴"></a>复制、粘贴</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yy          </span><br><span class="line">nyy、yny    </span><br><span class="line">yw          </span><br><span class="line">nyw         </span><br><span class="line">y^          </span><br><span class="line">y$          </span><br><span class="line"></span><br><span class="line">p           </span><br><span class="line">P</span><br></pre></td></tr></table></figure>

<h3 id="删除、撤销"><a href="#删除、撤销" class="headerlink" title="删除、撤销"></a>删除、撤销</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x           </span><br><span class="line">nx          </span><br><span class="line">dw          </span><br><span class="line">d$          </span><br><span class="line">dd          </span><br><span class="line">dnd、ndd    </span><br><span class="line"></span><br><span class="line">u       </span><br><span class="line">U</span><br></pre></td></tr></table></figure>

<h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h,j,k,l     </span><br><span class="line">空格键      </span><br><span class="line">Backspace   </span><br><span class="line">Enter       </span><br><span class="line">-           </span><br><span class="line">w           </span><br><span class="line">e           </span><br><span class="line">b           </span><br><span class="line">ge          </span><br><span class="line">gg          </span><br><span class="line">G           </span><br><span class="line">n+          </span><br><span class="line">n-          </span><br><span class="line">ngg、nG     </span><br><span class="line"></span><br><span class="line">f&#123;char&#125;     </span><br><span class="line">F&#123;char&#125;     </span><br><span class="line">t&#123;char&#125;     </span><br><span class="line">T&#123;char&#125;     </span><br><span class="line"></span><br><span class="line">&#96;&#96;  </span><br><span class="line">&#96;.  </span><br><span class="line">&#96;^  </span><br><span class="line">&#96;[  </span><br><span class="line">&#96;]  </span><br><span class="line">&#96;&lt;  </span><br><span class="line">&#96;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;str        &#x2F;&#x2F;向光标下搜索 str 字符串</span><br><span class="line">?str        &#x2F;&#x2F;向光标上搜索 str 字符串</span><br><span class="line">n           &#x2F;&#x2F;向下搜索前一个搜素动作</span><br><span class="line">N           &#x2F;&#x2F;向上搜索前一个搜索动作</span><br><span class="line"></span><br><span class="line">:s&#x2F;old&#x2F;new          </span><br><span class="line">:s&#x2F;old&#x2F;new&#x2F;g        &#x2F;&#x2F;用new替换行中所有的old</span><br><span class="line">:n,m s&#x2F;old&#x2F;new&#x2F;g    &#x2F;&#x2F;用new替换从n到m行里所有的old</span><br><span class="line">:%s&#x2F;old&#x2F;new&#x2F;g       &#x2F;&#x2F;用new替换当前文件里所有的old</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;               &#x2F;&#x2F;格式化，例 gg&#x3D;G 格式化整个文件</span><br><span class="line">:e otherfile    &#x2F;&#x2F;编辑文件名为 otherfile 的文件，支持编辑远程文件，可通过 ftp、sftp、scp、http、rsync 等多种方式访问</span><br><span class="line">:r otherfile    &#x2F;&#x2F;将 otherfile 文件中的内容写到当前文件，和 :e 一样可以支持远程文件，详见文末参考文档</span><br><span class="line">:set  nu        &#x2F;&#x2F;显示行号</span><br><span class="line">:set nonu       &#x2F;&#x2F;取消显示行号</span><br><span class="line">:set paste      &#x2F;&#x2F;设置插入模式为 paste，这个在复制代码块时很有用，粘贴的代码会保持原有的缩进而不会被 vim 的自动缩进打乱</span><br><span class="line">:set fileformat&#x3D;unix    &#x2F;&#x2F;将文件修改为unix格式，如win下面的文本文件在linux下会出现^M</span><br><span class="line">:w !sudo tee %          &#x2F;&#x2F;保存时获取sudo权限</span><br></pre></td></tr></table></figure>

<h3 id="vim-的常规语法"><a href="#vim-的常规语法" class="headerlink" title="vim 的常规语法"></a>vim 的常规语法</h3><h4 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h4><p>动词代表了我们打算对文本进行什么样的操作。例如：</p>
<ul>
<li>d 表示删除（delete）</li>
<li>r 表示替换（replace）</li>
<li>c 表示修改（change）</li>
<li>y 表示复制（yank）</li>
<li>v 表示选取（visual select）</li>
</ul>
<h4 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h4><p>名词代表了我们即将处理的文本。Vim 中有一个专门的术语叫做文本对象（text object），下面是一些文本对象的示例：</p>
<ul>
<li>$ 表示行尾</li>
<li>^ 表示行首</li>
<li>w 表示一个单词（word）</li>
<li>s 表示一个句子（sentence）</li>
<li>p 表示一个段落（paragraph）</li>
<li>t 表示一个 HTML 标签（tag）</li>
<li>引号或者各种括号所包含的文本称作一个文本块。</li>
</ul>
<h4 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h4><p>介词界定了待编辑文本的范围或者位置。例如：</p>
<ul>
<li>i 表示 “在… 之内”（inside）</li>
<li>a 表示 “环绕…”（around）</li>
<li>t 表示 “到… 位置前”（to）</li>
<li>f 表示 “到… 位置上”（forward）</li>
</ul>
<p><a href="http://climate2weather.cc/images/vim.png" target="_blank" rel="noopener"><img src="http://climate2weather.cc/images/vim.png" alt="img"></a></p>
<h4 id="组词为句"><a href="#组词为句" class="headerlink" title="组词为句"></a>组词为句</h4><p>动词 + 介词 + 名词 （介词可选，默认介词为 i）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dip &#x2F;&#x2F;删除一个段落: delete inside paragraph</span><br><span class="line">vis &#x2F;&#x2F;选取一个句子: visual select inside sentence</span><br><span class="line">ciw &#x2F;&#x2F;修改一个单词: change inside word</span><br><span class="line">caw &#x2F;&#x2F;修改一个单词: change around word</span><br><span class="line">dtx &#x2F;&#x2F;删除文本直到字符“x”（不包括字符“x”）: delete to x</span><br><span class="line">dfx &#x2F;&#x2F;删除文本直到字符“x”（包括字符“x”）: delete forward x</span><br></pre></td></tr></table></figure>

<p>动词 + 数词 + 名词 or 数词 + 动词 + 名词 （数词可选，默认数词为 1）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c3w &#x2F;&#x2F;修改三个单词：change three words</span><br><span class="line">d2w &#x2F;&#x2F;删除两个单词：delete two words</span><br><span class="line"></span><br><span class="line">2dw &#x2F;&#x2F;两次删除单词（等价于删除两个单词）: twice delete word</span><br><span class="line">3x  &#x2F;&#x2F;三次删除字符（等价于删除三个字符）：three times delete character</span><br></pre></td></tr></table></figure>

<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://mp.weixin.qq.com/s/zZAWpZbDtSFK6EROxaBRKw" target="_blank" rel="noopener">有关 vi(vim) 的常用命令</a></li>
<li><a href="https://www.jianshu.com/p/52b1b41de71f" target="_blank" rel="noopener">Vim 常用文档动作命令总结</a></li>
<li><a href="https://www.jianshu.com/p/a361ce8c97bc" target="_blank" rel="noopener">一起来说 Vim 语</a></li>
<li><a href="https://blog.csdn.net/lovelirui/article/details/6272536" target="_blank" rel="noopener">用 Vim 编辑远程文件</a></li>
<li><a href="https://github.com/chenxiaochun/blog/issues/60" target="_blank" rel="noopener">vim 常用操作总结</a></li>
</ul>
<hr>
<hr>
<blockquote>
<p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="https://blog.csdn.net/wallwind/article/details/76333562010-11-24" target="_blank" rel="noopener">https://blog.csdn.net/wallwind/article/details/76333562010-11-24</a> 16:19:41</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VI中的多行删除与复制</span><br><span class="line">法一：</span><br><span class="line">单行删除，：1（待删除行）d</span><br><span class="line">多行删除 ，：1,10d</span><br><span class="line">法二：</span><br><span class="line">光标所在行，dd</span><br><span class="line">光标所在行以下的N行，Ndd</span><br><span class="line">方法1：</span><br><span class="line">光标放到第6行，</span><br><span class="line">输入：2yy</span><br><span class="line">光标放到第9行，</span><br><span class="line">输入：p</span><br><span class="line">此方法适合复制少量行文本的情况，复制第6行（包括）下面的2行数据，放到第9行下面。</span><br><span class="line">方法2：</span><br><span class="line">命令行模式下输入</span><br><span class="line">6,9 co 12</span><br><span class="line">复制第6行到第9行之间的内容到第12行后面。</span><br><span class="line">方法3：</span><br><span class="line">有时候不想费劲看多少行或复制大量行时，可以使用标签来替代</span><br><span class="line">光标移到起始行，输入ma</span><br><span class="line">光标移到结束行，输入mb</span><br><span class="line">光标移到粘贴行，输入mc</span><br><span class="line">然后 :&#39;a,&#39;b co &#39;c 把 co 改成 m 就成剪切了</span><br><span class="line">要删除多行的话，可以用 ：5, 9 de</span><br><span class="line"></span><br><span class="line">VIM常用命令</span><br><span class="line">常用命令</span><br><span class="line"></span><br><span class="line">1) 光标命令</span><br><span class="line">k,j,h,l---上下左右光标移动命令，虽然可以在Linux中使用键盘右边的四个光标键， 但是记住这四个命令还有非常有用的，也就是右手在键盘上放置的位置部分</span><br><span class="line">nG ----n为行数，该命令立即使光标跳到指定行。</span><br><span class="line">Ctrl+G-----光标所在位置的行数和列数报告</span><br><span class="line">w,b------使光标向前或向后跳过一个单词</span><br><span class="line">2) 编辑命令</span><br><span class="line">i,a,r -------在光标的前,后,上方插入字符命令(i&#x3D;insert,a&#x3D;append,r&#x3D;replace) </span><br><span class="line">cw,dw------ 改变(置换)&#x2F;删除光标所在处的单词的命令 (c&#x3D;change,d&#x3D;delete) </span><br><span class="line">x,d$,dd -----删除一个字符，光标所在处到行尾的所有字符，和整行的命令</span><br><span class="line">3) 查找命令 </span><br><span class="line">&#x2F;string, ?string-----从光标所在处向后&#x2F;向前查找相应的字符串的命令</span><br><span class="line">4)拷贝复制命令 </span><br><span class="line">yy,p -----拷贝一行到剪贴板&#x2F;取出剪贴板中内容的命令</span><br><span class="line"></span><br><span class="line">常见问题及应用技巧</span><br><span class="line">1) 在一个新文件中读&#x2F;etc&#x2F;passwd中的内容，取出用户名部分 </span><br><span class="line">vi file </span><br><span class="line">:r &#x2F;etc&#x2F;passwd 在打开的文件file中光标所在处读入&#x2F;etc&#x2F;passwd </span><br><span class="line">:%s&#x2F;:.*&#x2F;&#x2F;g 删除&#x2F;etc&#x2F;passwd中用户名后面的从冒号开始直到行尾的所有部分 </span><br><span class="line">:3r &#x2F;etc&#x2F;passwd 这是在指定的行号后面读入文件内容</span><br><span class="line">另外一种方法删掉文件中所有的空行及以#开始的注释行 </span><br><span class="line">#cat squid.conf.default | grep -v &#39;^&#x2F;pre&gt; | grep -v &#39;^#&#39; </span><br><span class="line"></span><br><span class="line">2) 在打开一个文件编辑后才知道登录的用户对该文件没有写权，不能存盘 </span><br><span class="line">vi file </span><br><span class="line">:w &#x2F;tmp&#x2F;1 既然没法存盘，不想放弃所做的所有修改，先临时存到&#x2F;tmp&#x2F;1 </span><br><span class="line">:20,59w &#x2F;tmp&#x2F;1 或者仅仅把第20到59行之间的内容存盘成文件&#x2F;tmp&#x2F;1</span><br><span class="line">3) 用VI编辑一个文件，但需要删除大段大段的内容 </span><br><span class="line">vi file </span><br><span class="line">Ctrl+G 把光标移到需要删除的行的处按ctrl+G显示行号，再到结尾处再按Ctrl+G. </span><br><span class="line">:23,1045d 假定两次行号为23和1045，则把这几间的内容全删除 </span><br><span class="line"></span><br><span class="line">也可以在开始和结束两行中用ma,mb命令标记后用:&#39;a,&#39;bd删除.</span><br><span class="line">4) 在整个文件或某几行中在行首或行尾加一些字符串 </span><br><span class="line">vi file </span><br><span class="line">:3,$s&#x2F;^&#x2F;some string &#x2F; 在文件的第一行至最后一行的行首前插入some string </span><br><span class="line">:%s&#x2F;$&#x2F; some string&#x2F;g 在整个文件每一行的行尾添加 some string </span><br><span class="line"></span><br><span class="line">:%s&#x2F;string1&#x2F;string2&#x2F;g 在整个文件中替换string1成string2 </span><br><span class="line">:3,7s&#x2F;string1&#x2F;string2&#x2F; 仅替换文件中的第三到七行中的string1成string2 </span><br><span class="line"></span><br><span class="line">Note: s为substitute,%表示所有行,g表示global </span><br><span class="line"></span><br><span class="line">5) 同时编辑两个文件,在两个文件中拷贝剪贴文本 </span><br><span class="line">vi file1 file2 </span><br><span class="line">yy 同时打开两个文件,在文件1的光标所在处拷贝所在行 </span><br><span class="line">:n 切换到文件2 (n&#x3D;next) </span><br><span class="line">p 在文件2的光标所在处粘贴所拷贝的行 </span><br><span class="line">:N 切换回文件1</span><br><span class="line">6) 替换文件中的路径 </span><br><span class="line"></span><br><span class="line">:%s#&#x2F;usr&#x2F;bin#&#x2F;bin#g 把文件中所有路径&#x2F;usr&#x2F;bin换成&#x2F;bin </span><br><span class="line">或者用 </span><br><span class="line">:%s&#x2F;&#x2F;usr&#x2F;bin&#x2F;&#x2F;bin&#x2F;g 在&#39;&#x2F;&#39;前用符号指出&#39;&#x2F;&#39;是真的单个字符&#39;&#x2F;&#39;</span><br><span class="line">7) 用 vi 多行注释</span><br><span class="line">如果要给多行程序作注释，一个笨办法就是 插入 # ，然后用 j 跳到下一行用 . 命令，重复上个命令。如果要注释几百行，这样的方法恐怕太愚蠢了。一个聪明的办法是：</span><br><span class="line">:.,+499 s&#x2F;^&#x2F;#&#x2F;g</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>shell_script</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>发表级别的火山图</title>
    <url>/2019/11/30/vocanno_plot/</url>
    <content><![CDATA[<h2 id="用于文献发表的火山图"><a href="#用于文献发表的火山图" class="headerlink" title="用于文献发表的火山图"></a>用于文献发表的火山图</h2><a id="more"></a>



<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">setwd(<span class="string">"E:/R_Project/GSE32424"</span>)</span><br><span class="line">rm(list=ls())</span><br><span class="line">load(file = <span class="string">'./Rdata/DEGs_results.Rdata'</span>)</span><br><span class="line"><span class="comment"># nrDEG就是简单的DEG操作</span></span><br><span class="line"><span class="comment"># DESeq2_DEG = na.omit(DEG)</span></span><br><span class="line"><span class="comment"># nrDEG=DESeq2_DEG[,c(2,6)]</span></span><br><span class="line"><span class="comment"># colnames(nrDEG)=c('log2FoldChange','pvalue')  </span></span><br><span class="line">ID_trans &lt;- read.delim(<span class="string">"D:/annotation_and_reference/from_NCBI/GCA/NCBI_ID_trans.txt"</span>, header=<span class="literal">T</span>)</span><br><span class="line"></span><br><span class="line">table(ID_trans$gene_type)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 火山图热图</span></span><br><span class="line"></span><br><span class="line">data&lt;- nrDEG</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data$symbol&lt;- rownames(data)</span><br><span class="line">data$change = ifelse(data$pvalue &lt; <span class="number">0.01</span> &amp; abs(data$log2FoldChange) &gt;= <span class="number">1</span>, </span><br><span class="line">                     ifelse(data$log2FoldChange&gt; <span class="number">1</span> ,<span class="string">'Up'</span>,<span class="string">'Down'</span>),</span><br><span class="line">                     <span class="string">'Stable'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 提取数据lncRNA</span></span><br><span class="line">lncRNA&lt;- ID_trans[ID_trans$gene_type==<span class="string">'lncRNA'</span>,]$gene</span><br><span class="line">data_lncRNA&lt;- data[rownames(data)%<span class="keyword">in</span>%lncRNA,]</span><br><span class="line"><span class="comment">#### 提取数据mRNA</span></span><br><span class="line">mRNA&lt;- ID_trans[ID_trans$gene_type==<span class="string">'protein_coding'</span>,]$gene</span><br><span class="line">data_mRNA&lt;- data[rownames(data)%<span class="keyword">in</span>%mRNA,]</span><br><span class="line"><span class="comment">#### 提取数据miRNA</span></span><br><span class="line">miRNA&lt;- ID_trans[ID_trans$gene_type==<span class="string">'miRNA'</span>,]$gene</span><br><span class="line">data_miRNA&lt;- data[rownames(data)%<span class="keyword">in</span>%miRNA,]</span><br><span class="line"></span><br><span class="line"><span class="comment"># data&lt;- data_lncRNA</span></span><br><span class="line"><span class="comment"># data&lt;- data_mRNA</span></span><br><span class="line"><span class="comment"># data&lt;- data_miRNA</span></span><br><span class="line"><span class="comment">## 方法二</span></span><br><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line">colnames(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">################################增加title</span></span><br><span class="line">logFC_cutoff=<span class="number">1</span></span><br><span class="line">this_tile &lt;- paste0(<span class="string">'Cutoff for logFC is '</span>,round(logFC_cutoff,<span class="number">3</span>),</span><br><span class="line">                    <span class="string">'\nThe number of up gene is '</span>,nrow(data[data$change ==<span class="string">'Up'</span>,]) ,</span><br><span class="line">                    <span class="string">'\nThe number of down gene is '</span>,nrow(data[data$change ==<span class="string">'Down'</span>,])</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####  删除离群值，保证图像对称,需要调整</span></span><br><span class="line">data&lt;- data[abs(data$log2FoldChange)&lt;<span class="number">10</span>,]</span><br><span class="line">data&lt;- data[abs(log10(data$pvalue))&lt;<span class="number">60</span>,]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p &lt;- ggplot(data = data, </span><br><span class="line">            aes(x = log2FoldChange, </span><br><span class="line">                y = -log10(pvalue))) +</span><br><span class="line">  geom_point(alpha=<span class="number">0.4</span>, size=<span class="number">3</span>, </span><br><span class="line">             aes(color=change)) +</span><br><span class="line">  theme_set(theme_set(theme_bw(base_size=<span class="number">20</span>)))+</span><br><span class="line">  scale_color_manual(values=c(<span class="string">"blue"</span>, <span class="string">"grey"</span>,<span class="string">"red"</span>))+</span><br><span class="line">  geom_vline(xintercept=c(-<span class="number">1</span>,<span class="number">1</span>),lty=<span class="number">4</span>,col=<span class="string">"black"</span>,lwd=<span class="number">0.8</span>) +</span><br><span class="line">  geom_hline(yintercept = -log10(<span class="number">0.01</span>),lty=<span class="number">4</span>,col=<span class="string">"black"</span>,lwd=<span class="number">0.8</span>) +</span><br><span class="line">  ggtitle( this_tile ) + theme(plot.title = element_text(size=<span class="number">20</span>,hjust = <span class="number">0.5</span>))</span><br><span class="line"><span class="comment"># theme_bw()</span></span><br><span class="line">p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新数据框的内容是你想要标记的基因，这里根据logFC和Pvalue的大小来筛选，可以自定义阈值来调整要显示的基因的数量：</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for_label &lt;- data %&gt;%  filter(abs(log2FoldChange) &gt;4&amp; -log10(pvalue)&gt; -log10(0.000001))</span></span><br><span class="line"><span class="comment"># for_label &lt;- data %&gt;%  filter(abs(log2FoldChange) &gt;1 &amp; -log10(pvalue)&gt; -log10(0.05))</span></span><br><span class="line">for_label_up&lt;- data[order(data$pvalue),][data$change==<span class="string">'Up'</span>,][<span class="number">1</span>:<span class="number">20</span>,]</span><br><span class="line">for_label_down&lt;- data[order(data$pvalue),][data$change==<span class="string">'Down'</span>,][<span class="number">1</span>:<span class="number">20</span>,]</span><br><span class="line">for_label&lt;- rbind(for_label_up,for_label_down)</span><br><span class="line"><span class="comment"># tmp&lt;- data['LOC101927967',]</span></span><br><span class="line"><span class="comment"># tmp&lt;- exprSet['LOC101927967',]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for_label&lt;- data[c('MAGEA11','LINC00551'),]</span></span><br><span class="line"><span class="comment">#### </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p +</span><br><span class="line">  geom_point(size = <span class="number">3</span>, shape = <span class="number">1</span>, data = for_label) +</span><br><span class="line">  ggrepel::geom_label_repel(</span><br><span class="line">    aes(label = symbol),</span><br><span class="line">    data = for_label,</span><br><span class="line">    color=<span class="string">"black"</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ggsave(filename = <span class="string">'./figure/GSE32424_mRNA_vocano_plot.pdf'</span>,plot = last_plot(),width = <span class="number">10</span>,height = <span class="number">10</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>ggplot2</tag>
        <tag>vocanno_plot</tag>
      </tags>
  </entry>
  <entry>
    <title>学会使用shell脚本</title>
    <url>/2019/11/18/%E5%AD%A6%E4%B9%A0%E7%90%86%E8%A7%A3shell%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="学会使用shell脚本"><a href="#学会使用shell脚本" class="headerlink" title="学会使用shell脚本"></a>学会使用shell脚本</h2><h4 id="第一部分：shell字符串处理技巧"><a href="#第一部分：shell字符串处理技巧" class="headerlink" title="第一部分：shell字符串处理技巧"></a>第一部分：shell字符串处理技巧</h4><a id="more"></a>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在SHELL编程中，经常要处理一些字符串变量。比如，计算长度啊、截取子串啊、字符替换啊等等，常常要用到awk、expr、sed、tr等命令。下面给大家介绍个简单的字符串处理方法，用不着嵌套复杂的子命令。</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#VALUE&#125;：计算VALUE字符串的字符数量。</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;VALUE%.*&#125;或<span class="variable">$&#123;VALUE%%.*&#125;</span>：删除VALUE字符串中以分隔符“.”匹配的右边字符，保留左边字符。</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;VALUE<span class="comment">#*.&#125;或$&#123;VALUE##*.&#125;：删除VALUE字符串中以分隔符“.”匹配的左边字符，保留右边字符。</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;VALUE/OLD/NEW&#125;或<span class="variable">$&#123;VALUE//OLD/NEW&#125;</span>：用NEW子串替换VALUE字符串中匹配的OLD子串。</span></span><br><span class="line">    补充：“*”表示通配符，用于匹配字符串将被删除的字串。“.”表示字符串中分隔符，可以为任意一个或多个字符。“%”表示从右向左匹配，“#”表示从左向右匹配，“\”表示替换，都属于非贪婪匹配，即匹配符合通配符的最短结果。与“%”、“#”和“/”类似的有“%%”、“##”和“//”，都属于贪婪匹配，即匹配符合通配符的最长结果。</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;VALUE:OFFSET&#125;或<span class="variable">$&#123;VALUE:OFFSET:LENGTH&#125;</span>：从VALUE字符串的左边开始中截取子串。</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;VALUE:0-OFFSET&#125;或<span class="variable">$&#123;VALUE:0-OFFSET:LENGTH&#125;</span>：从VALUE字符串的右边开始中截取子串。</span></span><br><span class="line">    补充：左边第一个字符从“0”开始，右边第一个字符从“0-1”开始。 表示偏移OFFSET个字符开始，LENGTH表示要截取字符的长度。如果没有LENGTH变量，表示偏移OFFSET个字符开始到字符串结束。</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;VALUE:-WORD&#125;：当变量未定义或者值为空时，返回值为WORD的内容，否则返回变量的值。</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;VALUE:=WORD&#125;：当变量未定义或者值为空时，返回WORD的值的同时并将WORD赋值给VALUE，否则返回变量的值。</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;VALUE:+WORD&#125;：当变量已赋值时，其值才用WORD替换，否则不进行任何替换。</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;VALUE:?MESSAGE&#125;：当变量已赋值时，正常替换。否则将消息MESSAGE送到标准错误输出（若此替换出现在SHELL程序中，那么该程序将终止运行）。</span></span><br><span class="line">    补充：WORD可以为一个字符串，也可以为一个变量。当为变量时，需要用“$”引用该变量。</span><br></pre></td></tr></table></figure>

<h4 id="应用与进一步理解"><a href="#应用与进一步理解" class="headerlink" title="应用与进一步理解"></a>应用与进一步理解</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">假设我们定义了一个变量为：</span><br><span class="line">file=/dir1/dir2/dir3/my.file.txt</span><br><span class="line"></span><br><span class="line">可以用$&#123; &#125;分别替换得到不同的值：</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file<span class="comment">#*/&#125;：删掉第一个 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file<span class="comment">##*/&#125;：删掉最后一个 /  及其左边的字符串：my.file.txt</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file<span class="comment">#*.&#125;：删掉第一个 .  及其左边的字符串：file.txt</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file<span class="comment">##*.&#125;：删掉最后一个 .  及其左边的字符串：txt</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file%/*&#125;：删掉最后一个  /  及其右边的字符串：/dir1/dir2/dir3</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file%%/*&#125;：删掉第一个 /  及其右边的字符串：(空值)</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file%.*&#125;：删掉最后一个  .  及其右边的字符串：/dir1/dir2/dir3/my.file</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file%%.*&#125;：删掉第一个  .   及其右边的字符串：/dir1/dir2/dir3/my</span></span><br><span class="line"></span><br><span class="line">记忆的方法为：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 是 去掉左边（键盘上<span class="comment">#在 $ 的左边）</span></span></span><br><span class="line"><span class="meta">%</span><span class="bash">是去掉右边（键盘上% 在$ 的右边）</span></span><br><span class="line">单一符号是最小匹配；两个符号是最大匹配</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file:0:5&#125;：提取最左边的 5 个字节：/dir1</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file:5:5&#125;：提取第 5 个字节右边的连续5个字节：/dir2</span></span><br><span class="line"></span><br><span class="line">也可以对变量值里的字符串作替换：</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file/dir/path&#125;：将第一个dir 替换为path：/path1/dir2/dir3/my.file.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file//dir/path&#125;：将全部dir 替换为 path：/path1/path2/path3/my.file.txt</span></span><br><span class="line"></span><br><span class="line">利用 $&#123; &#125; 还可针对不同的变数状态赋值(沒设定、空值、非空值)： </span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file-my.file.txt&#125; ：假如 <span class="variable">$file</span> 沒有设定，則使用 my.file.txt 作传回值。(空值及非空值時不作处理) </span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file:-my.file.txt&#125; ：假如 <span class="variable">$file</span> 沒有設定或為空值，則使用 my.file.txt 作傳回值。 (非空值時不作处理)</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file+my.file.txt&#125; ：假如 <span class="variable">$file</span> 設為空值或非空值，均使用 my.file.txt 作傳回值。(沒設定時不作处理)</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file:+my.file.txt&#125; ：若 <span class="variable">$file</span> 為非空值，則使用 my.file.txt 作傳回值。 (沒設定及空值時不作处理)</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file=my.file.txt&#125; ：若 <span class="variable">$file</span> 沒設定，則使用 my.file.txt 作傳回值，同時將 <span class="variable">$file</span> 賦值為 my.file.txt 。 (空值及非空值時不作处理)</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file:=my.file.txt&#125; ：若 <span class="variable">$file</span> 沒設定或為空值，則使用 my.file.txt 作傳回值，同時將 <span class="variable">$file</span> 賦值為my.file.txt 。 (非空值時不作处理)</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file?my.file.txt&#125; ：若 <span class="variable">$file</span> 沒設定，則將 my.file.txt 輸出至 STDERR。 (空值及非空值時不作处理)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;file:?my.file.txt&#125; ：若 <span class="variable">$file</span> 没设定或为空值，则将 my.file.txt 输出至 STDERR。 (非空值時不作处理)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#var&#125; 可计算出变量值的长度：</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#file&#125; 可得到 27 ，因为/dir1/dir2/dir3/my.file.txt 是27个字节</span></span></span><br></pre></td></tr></table></figure>





<h4 id="第二部分：shell定义数组"><a href="#第二部分：shell定义数组" class="headerlink" title="第二部分：shell定义数组"></a>第二部分：shell定义数组</h4><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="将1-3，分别改为A-B"><a href="#将1-3，分别改为A-B" class="headerlink" title="将1-3，分别改为A-B"></a>将1-3，分别改为A-B</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat $1 |while read id </span><br><span class="line">do</span><br><span class="line">    arr=($&#123;id&#125;)</span><br><span class="line">    pre_name=$&#123;arr[0]&#125;</span><br><span class="line">    after_name=$&#123;arr[1]&#125;</span><br><span class="line">    mv $&#123;pre_name&#125; $after_name</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"> bash chang_name.sh ./tmp</span><br></pre></td></tr></table></figure>



<h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数组名&#x3D;(值1 值2 ... 值n)</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_name&#x3D;(value0 value1 value2 value3)</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_name&#x3D;(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>还可以单独定义数组的各个分量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_name[0]&#x3D;value0</span><br><span class="line">array_name[1]&#x3D;value1</span><br><span class="line">array_name[n]&#x3D;valuen</span><br></pre></td></tr></table></figure>

<p>可以不使用连续的下标，而且下标的范围没有限制。</p>
<h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><p>读取数组元素值的一般格式是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;数组名[下标]&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">valuen&#x3D;$&#123;array_name[n]&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <strong>@</strong> 符号可以获取数组中的所有元素，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 取得数组元素的个数</span><br><span class="line">length&#x3D;$&#123;#array_name[@]&#125;</span><br><span class="line"># 或者</span><br><span class="line">length&#x3D;$&#123;#array_name[*]&#125;</span><br><span class="line"># 取得数组单个元素的长度</span><br><span class="line">lengthn&#x3D;$&#123;#array_name[n]&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>关于hexo进阶篇 （将hexo部署到我的github上）</title>
    <url>/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/</url>
    <content><![CDATA[<h1 id="关于hexo进阶篇"><a href="#关于hexo进阶篇" class="headerlink" title="关于hexo进阶篇"></a>关于hexo进阶篇</h1><p>hexo  重新配置服务器</p>
<a id="more"></a>



<p><strong>关键点：对nginx配置后需要需要重启nginx</strong></p>
<p>安装nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>



<h4 id="配置-Nginx-网站目录"><a href="#配置-Nginx-网站目录" class="headerlink" title="配置 Nginx 网站目录"></a>配置 Nginx 网站目录</h4><p>和本地一样，网站也要有一个放东西的文件夹，由于nginx默认的目录是’var/www/html’，所以我建议你使用’var/www/hexo’，当然，你用别的也可以，就请自己记住目录，下文也替换成你自定义的目录便是</p>
<p>网站存放文件的目录，用于Nginx托管</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;var&#x2F;www&#x2F;hexo</span><br></pre></td></tr></table></figure>

<p>修改目录的权限，让所有用户都能访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chown -R $USER:$USER &#x2F;var&#x2F;www&#x2F;hexo</span><br><span class="line">sudo chmod -R 755 &#x2F;var&#x2F;www&#x2F;hexo</span><br></pre></td></tr></table></figure>



<p>c修改 Nginx设置，打开<code>/etc/nginx/sites-available/default</code>文件，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>

<p>修改：将root设置为上述目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root /var/www/hexo</span><br></pre></td></tr></table></figure>



<h4 id="配置图片-文件路径"><a href="#配置图片-文件路径" class="headerlink" title="配置图片/文件路径"></a>配置图片/文件路径</h4><p>以上为常规操作，但如果还想设置一个专门放文件/图片（的目录（也就是说在服务上建个“图床”，方便在文章中链接；文件也类似，方便下载），还需要接着配置nginx</p>
<blockquote>
<p>比如我由于是从wordpress服务器上转到阿里云的ECS服务器，之前文章的图片链接都是跟着域名走的，因此我需要在现在服务器上专门再建个相同路径的文件夹来存在文件和图片</p>
</blockquote>
<p>具体教程在网上搜：nginx访问静态文件，或者参考：<a href="https://cloud.tencent.com/developer/article/1340455" target="_blank" rel="noopener">Nginx 入门教程</a></p>
<p>大致步骤如下：</p>
<p>创建文件夹目录，分别是存放文件和图片的路径，可供网站访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;var&#x2F;www&#x2F;hexo&#x2F;data</span><br><span class="line">mkdir -p &#x2F;var&#x2F;www&#x2F;hexo&#x2F;data&#x2F;photo</span><br></pre></td></tr></table></figure>

<p>修改Nginx配置文件，加上下面一段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;data&#x2F;photo&#x2F; &#123;</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;hexo&#x2F;;</span><br><span class="line">        autoindex on;</span><br><span class="line">&#125;</span><br><span class="line">location &#x2F;data&#x2F; &#123;</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;hexo&#x2F;;</span><br><span class="line">        autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/1573970957849-1589798986461.png" alt="1573970957849"></p>
<h4 id="创建私有Git仓库"><a href="#创建私有Git仓库" class="headerlink" title="创建私有Git仓库"></a>创建私有Git仓库</h4><p>创建Git仓库，搭配后续的Git钩子使用；创建目录并修改权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /var/repo/</span><br><span class="line">sudo chown -R $USER:$USER /var/repo/</span><br><span class="line">sudo chmod -R 755 /var/repo/</span><br><span class="line">cd /var/repo/</span><br></pre></td></tr></table></figure>

<p>并用Git命令初始化仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo git init --bare hexo_static.git</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 这里的前缀hexo要和创建的文件名一致</span></span></span><br></pre></td></tr></table></figure>



<h4 id="配置Git钩子"><a href="#配置Git钩子" class="headerlink" title="配置Git钩子"></a>配置Git钩子</h4><blockquote>
<p>什么是Git钩子：Git能在特定的重要动作发生时触发自定义脚本，即我们可以通过Github远程仓库自动更新文章到我们服务器的目录下</p>
</blockquote>
<p>创建钩子文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;var&#x2F;repo&#x2F;hexo_static.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>

<p>并在文件中添加命令（主要用checkout切换分支，所以如果仓库目录跟上面写的不一样，记得同样修改下述代码中的路径）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">git --work-tree&#x3D;&#x2F;var&#x2F;www&#x2F;hexo --git-dir&#x3D;&#x2F;var&#x2F;repo&#x2F;hexo_static.git checkout -f</span><br></pre></td></tr></table></figure>

<p>将上述钩子文件赋予执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod +x &#x2F;var&#x2F;repo&#x2F;hexo_static.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>

<h4 id="配置本地部署"><a href="#配置本地部署" class="headerlink" title="配置本地部署"></a>配置本地部署</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;myblog&#x2F;</span><br></pre></td></tr></table></figure>



<p>使用这种方式部署的博客，无法进行搜索</p>
<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/image-20200518175720877.png" alt="image-20200518175720877"></p>
<p>但是同样的东西在localhost启动或者部署在github上，都可以正常运行。</p>
<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/image-20200518175832713.png" alt="image-20200518175832713"></p>
<p>随缘了</p>
<h2 id="第一章：将hexo部署到我的github上"><a href="#第一章：将hexo部署到我的github上" class="headerlink" title="第一章：将hexo部署到我的github上"></a>第一章：将hexo部署到我的github上</h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>可以使用windows进行hexo搭建，</p>
<p>将搭建好的博客部署到github给用户提供的网页服务上，比如我的github网页就是chenyuqiao1.github.io，也可以将博客部署到自己的服务器中</p>
<h4 id="第一步：在windows-上安装nodejs和git"><a href="#第一步：在windows-上安装nodejs和git" class="headerlink" title="第一步：在windows 上安装nodejs和git"></a>第一步：在windows 上安装nodejs和git</h4><h4 id="第二步：安装hexo："><a href="#第二步：安装hexo：" class="headerlink" title="第二步：安装hexo："></a>第二步：安装hexo：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs-legacy</span><br><span class="line">sudo npm install hexo-cli hexo-server hexo-deployer-git -g</span><br></pre></td></tr></table></figure>

<h4 id="第三步：建站，初始化Hexo："><a href="#第三步：建站，初始化Hexo：" class="headerlink" title="第三步：建站，初始化Hexo："></a>第三步：建站，初始化Hexo：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br><span class="line">cd myblog</span><br><span class="line">npm install</span><br><span class="line">hexo server -p 4000 --debug #测试</span><br></pre></td></tr></table></figure>

<h4 id="第四步：配置git，和ssh秘钥"><a href="#第四步：配置git，和ssh秘钥" class="headerlink" title="第四步：配置git，和ssh秘钥"></a>第四步：配置git，和ssh秘钥</h4><p>随后我们配置git的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &#39;chenyuqiao1116@gmail.com&#39;</span><br><span class="line">git config --global user.name &#39;chenyuqiao1&#39;</span><br></pre></td></tr></table></figure>

<p>然后本地生成ssh秘钥，并需要将公钥传到VPS，使VPS中的git能够识别本地机器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#39;chenyuqiao1116@gmail.com&#39;</span><br></pre></td></tr></table></figure>

<p><strong>然后连续3次回车</strong>，最终会生成一个文件在用户目录下，打开用户目录，找到 <code>.ssh\id_rsa.pub</code> 文件（生成的秘钥在<code>~/.ssh</code>），记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>
<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/1574038739081.png" alt="1574038739081"></p>
<p>测试是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/1574039263666.png" alt="1574039263666"></p>
<h4 id="第五步：在github下创建自己的网站"><a href="#第五步：在github下创建自己的网站" class="headerlink" title="第五步：在github下创建自己的网站"></a>第五步：在github下创建自己的网站</h4><p>有默认的格式。我的是chenyuqiao1.github.io</p>
<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/image-20200517165616157.png" alt="image-20200517165616157"></p>
<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/image-20200517170043885.png" alt="image-20200517170043885"></p>
<p>即修改hexo配置文件<code>_config.yml</code>，修改Deployment；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;chenyuqiao1&#x2F;chenyuqiao1.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>部署之前安装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>



<h4 id="第六步完成部署"><a href="#第六步完成部署" class="headerlink" title="第六步完成部署"></a>第六步完成部署</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>





<h2 id="第二章：将hexo部署到我的服务器上"><a href="#第二章：将hexo部署到我的服务器上" class="headerlink" title="第二章：将hexo部署到我的服务器上"></a>第二章：将hexo部署到我的服务器上</h2><p>思路：主要是要对服务器进行配置，只要将我们的windows创建好的博客部署到我们的域名下的服务器就好了。</p>
<h4 id="准备：和之前一样，在window下部署博客"><a href="#准备：和之前一样，在window下部署博客" class="headerlink" title="准备：和之前一样，在window下部署博客"></a>准备：和之前一样，在window下部署博客</h4><h4 id="第一步-域名解析"><a href="#第一步-域名解析" class="headerlink" title="第一步: 域名解析"></a>第一步: 域名解析</h4><p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/1573981869976.png" alt="1573981869976"></p>
<p>10分钟后解析完成，就可以登录了</p>
<h3 id="第二：服务器配置"><a href="#第二：服务器配置" class="headerlink" title="第二：服务器配置"></a>第二：服务器配置</h3><h5 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>



<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/1573981843703.png" alt="1573981843703"></p>
<h5 id="配置-Nginx-网站目录-1"><a href="#配置-Nginx-网站目录-1" class="headerlink" title="配置 Nginx 网站目录"></a>配置 Nginx 网站目录</h5><p>和本地一样，网站也要有一个放东西的文件夹，由于nginx默认的目录是’var/www/html’，所以我建议你使用’var/www/hexo’，当然，你用别的也可以，就请自己记住目录，下文也替换成你自定义的目录便是</p>
<p>网站存放文件的目录，用于Nginx托管</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;var&#x2F;www&#x2F;hexo</span><br></pre></td></tr></table></figure>

<p>修改目录的权限，让所有用户都能访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chown -R $USER:$USER &#x2F;var&#x2F;www&#x2F;hexo</span><br><span class="line">sudo chmod -R 755 &#x2F;var&#x2F;www&#x2F;hexo</span><br></pre></td></tr></table></figure>

<p>c修改 Nginx设置，打开<code>/etc/nginx/sites-available/default</code>文件，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</span><br></pre></td></tr></table></figure>

<p>修改：将root设置为上述目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root &#x2F;var&#x2F;www&#x2F;hexo</span><br></pre></td></tr></table></figure>

<h5 id="配置图片-文件路径-1"><a href="#配置图片-文件路径-1" class="headerlink" title="配置图片/文件路径"></a>配置图片/文件路径</h5><p>以上为常规操作，但如果还想设置一个专门放文件/图片（的目录（也就是说在服务上建个“图床”，方便在文章中链接；文件也类似，方便下载），还需要接着配置nginx</p>
<blockquote>
<p>比如我由于是从wordpress服务器上转到阿里云的ECS服务器，之前文章的图片链接都是跟着域名走的，因此我需要在现在服务器上专门再建个相同路径的文件夹来存在文件和图片</p>
</blockquote>
<p>具体教程在网上搜：nginx访问静态文件，或者参考：<a href="https://cloud.tencent.com/developer/article/1340455" target="_blank" rel="noopener">Nginx 入门教程</a></p>
<p>大致步骤如下：</p>
<p>创建文件夹目录，分别是存放文件和图片的路径，可供网站访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;var&#x2F;www&#x2F;hexo&#x2F;data</span><br><span class="line">mkdir -p &#x2F;var&#x2F;www&#x2F;hexo&#x2F;data&#x2F;photo</span><br></pre></td></tr></table></figure>

<p>修改Nginx配置文件，加上下面一段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;data&#x2F;photo&#x2F; &#123;</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;hexo&#x2F;;</span><br><span class="line">        autoindex on;</span><br><span class="line">&#125;</span><br><span class="line">location &#x2F;data&#x2F; &#123;</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;hexo&#x2F;;</span><br><span class="line">        autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/1573970957849.png" alt="1573970957849"></p>
<h4 id="第三步：创建私有Git仓库"><a href="#第三步：创建私有Git仓库" class="headerlink" title="第三步：创建私有Git仓库"></a>第三步：创建私有Git仓库</h4><p>创建Git仓库，搭配后续的Git钩子使用；创建目录并修改权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir &#x2F;var&#x2F;repo&#x2F;</span><br><span class="line">sudo chown -R $USER:$USER &#x2F;var&#x2F;repo&#x2F;</span><br><span class="line">sudo chmod -R 755 &#x2F;var&#x2F;repo&#x2F;</span><br><span class="line">cd &#x2F;var&#x2F;repo&#x2F;</span><br></pre></td></tr></table></figure>

<p>并用Git命令初始化仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo git init --bare hexo_static.git</span><br></pre></td></tr></table></figure>



<h4 id="第四步：配置Git钩子"><a href="#第四步：配置Git钩子" class="headerlink" title="第四步：配置Git钩子"></a>第四步：配置Git钩子</h4><blockquote>
<p>什么是Git钩子：Git能在特定的重要动作发生时触发自定义脚本，即我们可以通过Github远程仓库自动更新文章到我们服务器的目录下</p>
</blockquote>
<p>创建钩子文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;var&#x2F;repo&#x2F;hexo_static.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>

<p>并在文件中添加命令（主要用checkout切换分支，所以如果仓库目录跟上面写的不一样，记得同样修改下述代码中的路径）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">git --work-tree&#x3D;&#x2F;var&#x2F;www&#x2F;hexo --git-dir&#x3D;&#x2F;var&#x2F;repo&#x2F;hexo_static.git checkout -f</span><br></pre></td></tr></table></figure>

<p>将上述钩子文件赋予执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod +x &#x2F;var&#x2F;repo&#x2F;hexo_static.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>



<p>即修改hexo配置文件<code>_config.yml</code>，修改Deployment；其中<code>root</code>是用户，然后<code>IP</code>，最后是Git仓库路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: ubuntu@49.234.226.202:&#x2F;var&#x2F;repo&#x2F;hexo_static</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>部署之前安装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>最后其实单独设置个Git用户并设置SSH登陆，并给与其权限比较方便；不然就会每次发布时都要输入root密码咯</p>
<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/1573987316232.png" alt="1573987316232"></p>
<blockquote>
<p>完成</p>
</blockquote>
<h2 id="第三章-一个主题可以搜索同时可以对图片进行简单管理"><a href="#第三章-一个主题可以搜索同时可以对图片进行简单管理" class="headerlink" title="第三章 一个主题可以搜索同时可以对图片进行简单管理"></a>第三章 一个主题可以搜索同时可以对图片进行简单管理</h2><h4 id="尝试next"><a href="#尝试next" class="headerlink" title="尝试next"></a>尝试next</h4><p>我一直使用的是next 但是对图片的管理不友好</p>
<p>我是用markdown进行写作的</p>
<p>图片的默认格式需要是{$filename/111.jpg}</p>
<p>但是next默认格式是{111.jpg}</p>
<p><a href="https://leay.net/2019/12/25/hexo/" target="_blank" rel="noopener">https://leay.net/2019/12/25/hexo/</a></p>
<p>这篇博客可能能解决我的一切问题</p>
<p><a href="https://github.com/xcodebuild/hexo-asset-image" target="_blank" rel="noopener">https://github.com/xcodebuild/hexo-asset-image</a></p>
<h1 id="Usege"><a href="#Usege" class="headerlink" title="Usege"></a>Usege</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MacGesture2-Publish</span><br><span class="line">├── apppicker.jpg</span><br><span class="line">├── logo.jpg</span><br><span class="line">└── rules.jpg</span><br><span class="line">MacGesture2-Publish.md</span><br></pre></td></tr></table></figure>

<p>Make sure <code>post_asset_folder: true</code> in your <code>_config.yml</code>.</p>
<p>Just use <code>![logo](logo.jpg)</code> to insert <code>logo.jpg</code>.</p>
<h4 id="将markdown格式中的-assets删掉，的代码"><a href="#将markdown格式中的-assets删掉，的代码" class="headerlink" title="将markdown格式中的.assets删掉，的代码"></a>将markdown格式中的.assets删掉，的代码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /d/SynologyDrive/Document/myblog2</span><br><span class="line">ls *.md|while read id</span><br><span class="line">do</span><br><span class="line">        title=$&#123;id%%.*&#125;</span><br><span class="line">        sed -i "s/\.assets//g" /d/SynologyDrive/Document/myblog2/$id</span><br><span class="line">        mv $&#123;title&#125;.assets $&#123;title&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>







<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><p>成功：</p>
<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/image-20200517214041568.png" alt="image-20200517214041568"></p>
<p>这里图1和图2 同时显示了</p>
<p><img src="/2020/05/17/%E5%85%B3%E4%BA%8Ehexo%E8%BF%9B%E9%98%B6%E7%AF%87/image-20200517214110320.png" alt="image-20200517214110320"></p>
<h1 id="参考一下博文"><a href="#参考一下博文" class="headerlink" title="参考一下博文"></a>参考一下博文</h1><h2 id="Hexo-引用本地图片以及引用本地任意位置图片的一点思路"><a href="#Hexo-引用本地图片以及引用本地任意位置图片的一点思路" class="headerlink" title="Hexo 引用本地图片以及引用本地任意位置图片的一点思路"></a>Hexo 引用本地图片以及引用本地任意位置图片的一点思路</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前想在博文里引用本地图片，按着随便搜到的教程无脑折腾了一番，当时记录了下步骤放在博文里，其实根本没搞懂。在 CSDN 上的备份经常被人访问，为了不误人子弟，稍微按自己的理解捋一下。</p>
<p>当然，也不一定正确。</p>
<h2 id="引用本地图片与插件-hexo-asset-image"><a href="#引用本地图片与插件-hexo-asset-image" class="headerlink" title="引用本地图片与插件 hexo-asset-image"></a>引用本地图片与插件 hexo-asset-image</h2><h3 id="引用本地图片"><a href="#引用本地图片" class="headerlink" title="引用本地图片"></a>引用本地图片</h3><p>首先要在 Hexo 博客配置添加一行<a href="https://leay.net/2019/12/25/hexo/#fn1" target="_blank" rel="noopener">[1]</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开始使用本地静态资源</span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p><strong>先提一下，我目前的 hexo 版本为 4.0，其它版本可能会有不同。</strong></p>
<p>当你什么插件也没安装时，使用 hexo 4.0 也可以在文章引用本地图片，引用方式是这样的：</p>
<p>首先在 <code>_posts</code> 文件夹下建立一个博文文件，比如 <code>2019-12-23-hello-world.md</code>，再建立一个同名的文件夹 <code>2019-12-23-hello-world</code>。这篇文章要引用的图片就放在该文件夹下。</p>
<blockquote>
<p>或者 <code>hexo new 2019-12-23-my-post</code></p>
</blockquote>
<p>比如我就在该目录下放一个图片<code>2019-12-23-hello-world/haha.png</code>。然后在博文 Markdown 文件里引用该图片，怎么引用呢？用下面这种方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](haha.png)</span><br></pre></td></tr></table></figure>

<p>如果你熟悉 Markdown 语法的话就会注意到，这个引用路径不太对劲。<strong>而且通过该路径引用图片，本地的 Markdown 编辑器是不能预览图片的！</strong></p>
<p>本来文章与图片的路径是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-- &#x2F;2019-12-23-hello-world</span><br><span class="line">|----  haha.png</span><br><span class="line">|-- 2019-12-23-hello-world.md</span><br></pre></td></tr></table></figure>

<p>理论上 <code>2019-12-23-hello-world.md</code> 要引用 <code>2019-12-23-hello-world</code> 文件夹下的 <code>haha.png</code>，引用方式应该是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](2019-12-23-hello-world&#x2F;haha.png)</span><br></pre></td></tr></table></figure>

<p>这样才对啊！</p>
<p><strong>那么，为什么引用的时候不能加文件夹的路径呢？</strong></p>
<p>这是因为 hexo 在渲染的时候，会把 <code>2019-12-23-hello-world.md</code> 渲染为 <code>public/2019/12/23/hello-world</code> 下的 <code>index.html</code> 网页文件，再把对应文件夹下的静态资源，比如图片 <code>/2019-12-23-hello-world/haha.png</code> 也拷贝到 <code>public/2019/12/23/hello-world</code> 下。</p>
<p>因此，虽然在我们写博文的时候看来，博文和图片不在同一个文件夹路径下，但是它们最终被渲染后，是放在同一个文件夹下的。</p>
<p>像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 渲染后</span><br><span class="line">|-- &#x2F;public&#x2F;2019&#x2F;12&#x2F;23&#x2F;hello-world</span><br><span class="line">|---- index.html</span><br><span class="line">|---- haha.png</span><br></pre></td></tr></table></figure>

<p>所以我们在写博文引用图片时，就得把它们当作在一个文件夹下来处理，也就是引用的时候，要去掉文件夹路径。</p>
<p>最后渲染出来的效果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;haha.png&quot; alt&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>这样有点反直觉啊！！</strong></p>
<p>或者简单讲，<strong>我想在本地编辑器里预览图片</strong>，该咋整呢？</p>
<h3 id="关于-hexo-asset-image"><a href="#关于-hexo-asset-image" class="headerlink" title="关于 hexo-asset-image"></a>关于 hexo-asset-image</h3><p>根据我看到的情况，hexo-asset-image 插件解决的问题是「给引用的本地图片添加绝对路径。」</p>
<p>毕竟说明里只提到「Give asset image in hexo a absolutely path automatically」……</p>
<p>比如上面渲染出来的图片标签是用的相对路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;haha.png&quot; alt&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>经 hexo-asset-image 插件处理后，标签会变成绝对路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;&#x2F;2019&#x2F;12&#x2F;23&#x2F;hello-world&#x2F;haha.png&quot; alt&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>但是，在我现在的环境（hexo 4.0）发现，使用 hexo-asset-image 插件后，我可以在博文（原 Markdown 文件）里使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](2019-12-23-hello-world&#x2F;haha.png)</span><br></pre></td></tr></table></figure>

<p>这种形式来引用图片了！</p>
<p><strong>这样的好处是本地编辑器里也可以直接预览图片。</strong></p>
<blockquote>
<p><code>![](haha.png)</code> 这种方式也仍可正常使用。</p>
</blockquote>
<p>跟踪了一下插件的代码，发现插件在获取到 <code>2019-12-23-hello-world/haha.png</code> 这个链接后，会先通过字符串操作获取到后面的 <code>haha.png</code>，然后统一进行「相对路径转绝对路径」的操作。</p>
<p>最后处理为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;&#x2F;2019&#x2F;12&#x2F;23&#x2F;hello-world&#x2F;haha.png&quot; alt&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>有些博文里直接把「解决本地编辑器图片显示」当作 hexo-asset-image 的本来功能，可该插件的 Issue 里还有「如何在本地支持 Markdown 图片显示」……</p>
<p>我觉得可能该插件的本来目的只是「将静态资源的引用路径转化为绝对路径」，至于后面解决了「本地预览」应该是随手做的……不然作者怎么也不说明下……</p>
<p><strong>也可能我理解错了。</strong></p>
<blockquote>
<p>老实说我有点迷惑，也许这可能和 Hexo 的历史有关？</p>
</blockquote>
<h3 id="安装-hexo-asset-image"><a href="#安装-hexo-asset-image" class="headerlink" title="安装 hexo-asset-image"></a>安装 hexo-asset-image</h3><p>不过至今（2019-12-25）为止， hexo 4.0 使用了 npm 仓库里的插件 hexo-asset-image 1.0 有点问题，安装后图片不能正常显示，查看图片路径被渲染成了 <code>/.xx/haha.png</code> 的格式。（xx 是域名后缀。）</p>
<p>但是直接安装 Github 仓库的源码没问题，可以执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;xcodebuild&#x2F;hexo-asset-image.git</span><br><span class="line"># or yarn add https:&#x2F;&#x2F;github.com&#x2F;xcodebuild&#x2F;hexo-asset-image.git</span><br></pre></td></tr></table></figure>

<p>具体使用及配置查看 <a href="https://github.com/xcodebuild/hexo-asset-image" target="_blank" rel="noopener">https://github.com/xcodebuild/hexo-asset-image</a></p>
<h2 id="hexo-asset-image-的说明与问题"><a href="#hexo-asset-image-的说明与问题" class="headerlink" title="hexo-asset-image 的说明与问题"></a>hexo-asset-image 的说明与问题</h2><p>我在刚使用 Hexo 时，搜索静态图片的问题，大家都推荐使用 hexo-asset-image 这个插件，也没多做考虑……</p>
<p>现在回头看，其实有许多的轮子可以解决这个问题……比如在 npm 或者 Github 搜索 <code>hexo-asset</code> 或 <code>hexo-imge</code>，就能搜到一大堆大佬们的轮子……</p>
<blockquote>
<p>甚至能搜到一大堆 <code>hexo-asset-image</code> 的 fix 包……</p>
</blockquote>
<p>现在 <code>hexo-asset-image</code> 已经被作者归档了……我想 npm 上的包应该是因为过时没有更新才会出问题的吧……</p>
<p><strong>也许现在应该有更好的解决方案。</strong>（但我没研究，毕竟自己的需求够用了……）</p>
<p>使用 hexo-asset-image 可能会遇到一些问题，比如与懒加载插件搭配时的问题。（我遇到了，所以提一下</p>
<p>感觉其它莫名其妙的问题也挺多的……但是这个包现在没人统一维护，有许多人都只能修复了一下自己的问题然后单独说明一下……</p>
<h3 id="hexo-asset-image-与-懒加载的冲突"><a href="#hexo-asset-image-与-懒加载的冲突" class="headerlink" title="hexo-asset-image 与 懒加载的冲突"></a>hexo-asset-image 与 懒加载的冲突</h3><p>我在使用 Hexo 的主题 hexo-next-theme 开启图片懒加载时，hexo-asset-image 插件会失效。</p>
<p>跟了下代码，发现 hexo-next-theme 使用的图片懒加载插件是 <a href="https://github.com/ApoorvSaxena/lozad.js" target="_blank" rel="noopener">lozad.js</a> 。这个插件会将 <code>img</code> 的 <code>src</code> 属性改为 <code>data-src</code>。hexo-asset-image 的工作原理是统一处理 <code>src</code> ，没有对 <code>data-src</code> 等属性的判断，所以就不会处理图片。</p>
<p>我自己改了下，想提个 PR 来着，发现原插件仓库已经被归档了……</p>
<p>于是 fork 了一份：<a href="https://github.com/bythecode/hexo-asset-image" target="_blank" rel="noopener">bythecode/hexo-asset-image</a></p>
<p>在解决这个问题的时候，发现也有人遇到过类似的问题。可以参考一下别人的问题：</p>
<p><a href="https://github.com/ci0n/hexo-asset-image" target="_blank" rel="noopener">ci0n/hexo-asset-image</a></p>
<p>该仓库的 ChangeLog：</p>
<blockquote>
<p>2019-09-23: support hexo-lazyload-image<br>2019-09-23: fixed hexo-abbrlink using *.html image path error</p>
</blockquote>
<h2 id="【与正文无关】引用本地任意位置图片的一点思路"><a href="#【与正文无关】引用本地任意位置图片的一点思路" class="headerlink" title="【与正文无关】引用本地任意位置图片的一点思路"></a>【与正文无关】引用本地任意位置图片的一点思路</h2><p>hexo 引用本地图片的方式确实不大优雅 —— 必须把图片存储在固定的位置。有时候写一些截图比较多的文章，还得把截图一张张放到那个固定的文件夹，再进行引用。</p>
<p>比较直观的操作应当这样才对：截图后直接粘贴到文档里。</p>
<p>如果用图床，甚至是用 Github 做图床，可以使用 <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a> 这个开源的图床上传工具。它可以把你剪贴板里图片上传到图床，然后返回一个 Markdown 格式的引用路径——再粘贴到你需要的位置即可。</p>
<p>看了一下 hexo-asset-image 的实现方式，想到也许可以把 Markdown 博文中 <strong>任意位置的图片</strong> 拷贝到相应的文件夹里，然后用类似的方式进行字符串替换。</p>
<p><strong>然后尝试了一下，没做出来……记录一下思路。</strong></p>
<p>首先需要考虑到不同平台的绝对路径不同，我心想先把流程做出来，于是以 Linux 的为准。</p>
<p>然后因为我一开始不懂 hexo 怎么写插件，于是就在 hexo-asset-image 上直接改。我把任意位置图片的路径获取到了，然后就是把该图片往文章对应的文件夹复制了。</p>
<p>这里有两个问题，一是我应该把图片复制到 <code>/public</code> 下还是 <code>/posts</code> 下呢，先复制到 <code>/post</code> 文件夹下吧。</p>
<p>这还有个问题，如果在 <code>/posts</code> 还有子文件夹咋办？管他的，先不管这个，莽出来再说。</p>
<p>然后又有问题了，我要把图片复制过来，那首先得判断该文件夹下有没有博文 Markdown 文件对应的文件夹吧……如果没有，我还得创建……</p>
<p>创建的文件夹得与博文 Markdown 文件同名。我已经创建测试文件夹成功了，完事后才发现在这儿获取不到该篇文章对应的 Markdown 文件的文件名。</p>
<p>因为 hexo-asset-image 实际上操作的是 hexo 生成的 public 下的 index.html 网页文件……</p>
<p>于是我尝试到 hexo 渲染 Markdown 为 HTML 的那儿去操作，正当我找到入口，准备大干一番时又发现个问题……插件那边的代码获取不到我在这儿找到的变量啊……</p>
<p>太麻烦了，遂放弃之。</p>
<p>PS：我的思路局限在「渲染时」或者「渲染后」，也许写个脚本直接处理 Markdown 博文，很简单就能做到吧……</p>
<h2 id="ChangeLog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h2><p>[2020-04-02-update]</p>
<p>PS：<a href="mailto:Typora@0.9.86">Typora@0.9.86</a>(beta) 现在可以在设置里开启「插入图片时」，「复制图片到当前文件夹」等操作。而且和 PicGo 联动了，将来甚至可以插入图片时自动上传到云服务再返回链接吧。这就完美实现了我上面关于「引用本地图片」的想法啦！酷～</p>
<hr>
<ol>
<li>这是 Hexo 官方提供的：<a href="https://hexo.io/docs/asset-folders" target="_blank" rel="noopener">asset-folders</a> ，不是插件提供的。其它静态资源的引用方式也可以看这个链接。 <a href="https://leay.net/2019/12/25/hexo/#fnref1" target="_blank" rel="noopener">↩︎</a></li>
</ol>
<ul>
<li><strong>本文作者：</strong> hqweay</li>
<li><strong>本文链接：</strong> <a href="https://leay.net/2019/12/25/hexo/" target="_blank" rel="noopener">https://leay.net/2019/12/25/hexo/</a></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>学会使用git一文就够</title>
    <url>/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/</url>
    <content><![CDATA[<h3 id="学会使用git一文就够"><a href="#学会使用git一文就够" class="headerlink" title="学会使用git一文就够"></a>学会使用git一文就够</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git init</span><br><span class="line">git config --global user.name 'chenyuqiao1'</span><br><span class="line">git config --global user.email 'chenyuqiao1116@gmail.com'</span><br><span class="line">git add . # 加所有的文件</span><br><span class="line">git add *.R # 所有的R文件</span><br><span class="line">git commit -m 'storage'</span><br><span class="line">git remote add origin https://github.com/chenyuqiao1/Markdown</span><br><span class="line">git remote add origin https://github.com/chenyuqiao1/Project</span><br><span class="line"><span class="meta">#</span><span class="bash"> origin指向的就是你本地的代码库托管在Github上的版本</span></span><br><span class="line">git remote -v</span><br><span class="line">git branch</span><br><span class="line">git pull origin master</span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line">git push -u origin master -f </span><br><span class="line"><span class="meta">#</span><span class="bash"> 这句话要非常的小心，因为他直接会覆盖掉原来的所有文件（github中），所以可以先使用git pull下载同步数据</span></span><br><span class="line"> git add --all &amp;&amp; git commit -m '随机数据' &amp;&amp; git pull &amp;&amp; git push 1</span><br></pre></td></tr></table></figure>



<a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前远程</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> origin  https://github.com/OWNER/REPOSITORY.git (fetch)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> origin  https://github.com/OWNER/REPOSITORY.git (push)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> destination  https://github.com/FORKER/REPOSITORY.git (fetch)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> destination  https://github.com/FORKER/REPOSITORY.git (push)</span></span><br><span class="line"></span><br><span class="line">git remote rm destination</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure>







<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>用过git管理github，托管项目</p>
<p>首先是安装git</p>
<p>git工作流程</p>
<p>git工作区域</p>
<p>工作区working directory</p>
<p>暂存区</p>
<p>git Repository</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git add </span><br><span class="line">git commit -m '描述'</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/1573734793283.png" alt="1573734793283"></p>
<ol>
<li><p>创建文件夹</p>
</li>
<li><p>在文件内初始化git –创建git 仓库 </p>
</li>
<li><pre><code class="shell">git init
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 向仓库中添加文件</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;shell</span><br><span class="line">git add</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure>






</code></pre>
</li>
</ol>
<h3 id="修改和删除文件"><a href="#修改和删除文件" class="headerlink" title="修改和删除文件"></a>修改和删除文件</h3><ol>
<li>删除文件</li>
<li>从git中删除文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm test</span><br><span class="line">git commit -m 'description'</span><br></pre></td></tr></table></figure>











<h3 id="git远程仓库管理：备份和共享"><a href="#git远程仓库管理：备份和共享" class="headerlink" title="git远程仓库管理：备份和共享"></a>git远程仓库管理：备份和共享</h3><p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/1573735933031.png" alt="1573735933031"></p>
<ol>
<li>git clone</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone 仓库地址https://github.com/chenyuqiao1/Project_Markdowm.gicah</span><br></pre></td></tr></table></figure>



<p>查看信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>



<h3 id="防止反反复复输入密码"><a href="#防止反反复复输入密码" class="headerlink" title="防止反反复复输入密码"></a>防止反反复复输入密码</h3><p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/1573739143412.png" alt="1573739143412"></p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/1573740187415.png" alt="1573740187415"></p>
<h3 id="创建个人网站"><a href="#创建个人网站" class="headerlink" title="创建个人网站"></a>创建个人网站</h3><p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/1573737182299.png" alt="1573737182299"></p>
<p>用户名</p>
<p>chenyuqiao1.github.io</p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/1573737338989.png" alt="1573737338989"></p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/1573737618757.png" alt="1573737618757"></p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/1573737912410.png" alt="1573737912410"></p>
<h1 id="github上的版本和本地版本冲突的解决方法"><a href="#github上的版本和本地版本冲突的解决方法" class="headerlink" title="github上的版本和本地版本冲突的解决方法"></a>github上的版本和本地版本冲突的解决方法</h1><p>其实只要一句话就可以解决这些问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure>





<h1 id="一篇文章，教你学会Git"><a href="#一篇文章，教你学会Git" class="headerlink" title="一篇文章，教你学会Git"></a>一篇文章，教你学会Git</h1><blockquote>
<p>在日常工作中，经常会用到Git操作。但是对于新人来讲，刚上来对Git很陌生，操作起来也很懵逼。本篇文章主要针对刚开始接触Git的新人，理解Git的基本原理，掌握常用的一些命令。</p>
</blockquote>
<h2 id="一、Git工作流程"><a href="#一、Git工作流程" class="headerlink" title="一、Git工作流程"></a>一、Git工作流程</h2><p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/10612886-d5ae0f2283b24feb.webp" alt="img"></p>
<p>image.png</p>
<p>以上包括一些简单而常用的命令，但是先不关心这些，先来了解下面这4个专有名词。</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<p><strong>工作区</strong></p>
<p>程序员进行开发改动的地方，是你当前看到的，也是最新的。</p>
<p>平常我们开发就是拷贝远程仓库中的一个分支，基于该分支进行开发。在开发过程中就是对工作区的操作。</p>
<p><strong>暂存区</strong></p>
<p>.git目录下的index文件, 暂存区会记录<code>git add</code>添加文件的相关信息(文件名、大小、timestamp…)，不保存文件实体, 通过id指向每个文件实体。可以使用<code>git status</code>查看暂存区的状态。暂存区标记了你当前工作区中，哪些内容是被git管理的。</p>
<p>当你完成某个需求或功能后需要提交到远程仓库，那么第一步就是通过<code>git add</code>先提交到暂存区，被git管理。</p>
<p><strong>本地仓库</strong></p>
<p>保存了对象被提交 过的各个版本，比起工作区和暂存区的内容，它要更旧一些。</p>
<p><code>git commit</code>后同步index的目录树到本地仓库，方便从下一步通过<code>git push</code>同步本地仓库与远程仓库的同步。</p>
<p><strong>远程仓库</strong></p>
<p>远程仓库的内容可能被分布在多个地点的处于协作关系的本地仓库修改，因此它可能与本地仓库同步，也可能不同步，但是它的内容是最旧的。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>任何对象都是在工作区中诞生和被修改；</li>
<li>任何修改都是从进入index区才开始被版本控制；</li>
<li>只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹；</li>
<li>与协作者分享本地的修改，可以把它们push到远程仓库来共享。</li>
</ol>
<p>下面这幅图更加直接阐述了四个区域之间的关系，可能有些命令不太清楚，没关系，下部分会详细介绍。</p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/10612886-10d6c4afde926ef3.webp" alt="img"></p>
<p>image.png</p>
<h2 id="二、常用Git命令"><a href="#二、常用Git命令" class="headerlink" title="二、常用Git命令"></a>二、常用Git命令</h2><p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/10612886-49d9ad1ae0ed4182-1574327069635.webp" alt="img"></p>
<p>image.png</p>
<p>网上找了个图，别人整理的一张图，很全很好，借来用下。下面详细解释一些常用命令。</p>
<h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/10612886-7cba8127a8608bcc.webp" alt="img"></p>
<p>image.png</p>
<p>在掌握具体命令前，先理解下HEAD。</p>
<p>HEAD，它始终指向当前所处分支的最新的提交点。你所处的分支变化了，或者产生了新的提交点，HEAD就会跟着改变。</p>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p><img src="https://upload-images.jianshu.io/upload_images/10612886-c8b01473bf0b60a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/465/format/webp" alt="img"></p>
<p>image.png</p>
<p>add相关命令很简单，主要实现将工作区修改的内容提交到暂存区，交由git管理。</p>
<table>
<thead>
<tr>
<th><strong>git add .</strong></th>
<th><strong>添加当前目录的所有文件到暂存区</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>git add [dir]</strong></td>
<td><strong>添加指定目录到暂存区，包括子目录</strong></td>
</tr>
<tr>
<td><strong>git add [file1]</strong></td>
<td><strong>添加指定文件到暂存区</strong></td>
</tr>
</tbody></table>
<h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/10612886-33f2897a6c692082.webp" alt="img"></p>
<p>image.png</p>
<p>commit相关命令也很简单，主要实现将暂存区的内容提交到本地仓库，并使得当前分支的HEAD向后移动一个提交点。</p>
<table>
<thead>
<tr>
<th><strong>git commit -m [message]</strong></th>
<th><strong>提交暂存区到本地仓库,message代表说明信息</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>git commit [file1] -m [message]</strong></td>
<td><strong>提交暂存区的指定文件到本地仓库</strong></td>
</tr>
<tr>
<td><strong>git commit –amend -m [message]</strong></td>
<td><strong>使用一次新的commit，替代上一次提交</strong></td>
</tr>
</tbody></table>
<h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/10612886-05c470f1cea06847.webp" alt="img"></p>
<p>image.png</p>
<p>涉及到协作，自然会涉及到分支，关于分支，大概有展示分支，切换分支，创建分支，删除分支这四种操作。</p>
<table>
<thead>
<tr>
<th><strong>git branch</strong></th>
<th><strong>列出所有本地分支</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>git branch -r</strong></td>
<td><strong>列出所有远程分支</strong></td>
</tr>
<tr>
<td><strong>git branch -a</strong></td>
<td><strong>列出所有本地分支和远程分支</strong></td>
</tr>
<tr>
<td><strong>git branch [branch-name]</strong></td>
<td><strong>新建一个分支，但依然停留在当前分支</strong></td>
</tr>
<tr>
<td><strong>git checkout -b [branch-name]</strong></td>
<td><strong>新建一个分支，并切换到该分支</strong></td>
</tr>
<tr>
<td><strong>git branch –track [branch][remote-branch]</strong></td>
<td><strong>新建一个分支，与指定的远程分支建立追踪关系</strong></td>
</tr>
<tr>
<td><strong>git checkout [branch-name]</strong></td>
<td><strong>切换到指定分支，并更新工作区</strong></td>
</tr>
<tr>
<td><strong>git branch -d [branch-name]</strong></td>
<td><strong>删除分支</strong></td>
</tr>
<tr>
<td><strong>git push origin –delete [branch-name]</strong></td>
<td><strong>删除远程分支</strong></td>
</tr>
</tbody></table>
<p>关于分支的操作虽然比较多，但都比较简单好记。</p>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/10612886-f3ec51177edb5259.webp" alt="img"></p>
<p>image.png</p>
<p>merge命令把不同的分支合并起来。如上图，在实际开放中，我们可能从master分支中切出一个分支，然后进行开发完成需求，中间经过R3,R4,R5的commit记录，最后开发完成需要合入master中，这便用到了merge。</p>
<table>
<thead>
<tr>
<th><strong>git fetch [remote]</strong></th>
<th><strong>merge之前先拉一下远程仓库最新代码</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>git merge [branch]</strong></td>
<td><strong>合并指定分支到当前分支</strong></td>
</tr>
</tbody></table>
<p>一般在merge之后，会出现conflict，需要针对冲突情况，手动解除冲突。主要是因为两个用户修改了同一文件的同一块区域。如下图所示，需要手动解除。</p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/10612886-05c2303cbc9612f2.webp" alt="img"></p>
<p>image.png</p>
<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8git/10612886-d42a340e3d54cbe2.webp" alt="img"></p>
<p>rebase又称为衍合，是合并的另外一种选择。</p>
<p>在开始阶段，我们处于new分支上，执行<code>git rebase dev</code>，那么new分支上新的commit都在master分支上重演一遍，最后checkout切换回到new分支。这一点与merge是一样的，合并前后所处的分支并没有改变。<code>git rebase dev</code>，通俗的解释就是new分支想站在dev的肩膀上继续下去。rebase也需要手动解决冲突。</p>
<p><strong>rebase与merge的区别</strong></p>
<p>现在我们有这样的两个分支,test和master，提交如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      D---E test</span><br><span class="line">     &#x2F;</span><br><span class="line">A---B---C---F master复制代码</span><br></pre></td></tr></table></figure>

<p>在master执行<code>git merge test</code>,然后会得到如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      D--------E</span><br><span class="line">     &#x2F;          \</span><br><span class="line">A---B---C---F----G   test, master复制代码</span><br></pre></td></tr></table></figure>

<p>在master执行<code>git rebase test</code>，然后得到如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A---B---D---E---C&#39;---F&#39;   test, master复制代码</span><br></pre></td></tr></table></figure>

<p>可以看到，merge操作会生成一个新的节点，之前的提交分开显示。而rebase操作不会生成新的节点，是将两个分支融合成一个线性的提交。</p>
<p>如果你想要一个干净的，没有merge commit的线性历史树，那么你应该选择git rebase<br>如果你想保留完整的历史记录，并且想要避免重写commit history的风险，你应该选择使用git merge</p>
<h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><p><img src="https://upload-images.jianshu.io/upload_images/10612886-e4f8e7502d291d1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/561/format/webp" alt="img"></p>
<p>image.png</p>
<p>reset命令把当前分支指向另一个位置，并且相应的变动工作区和暂存区。</p>
<table>
<thead>
<tr>
<th><strong>git reset —soft [commit]</strong></th>
<th>只改变提交点，暂存区和工作目录的内容都不改变</th>
</tr>
</thead>
<tbody><tr>
<td><strong>git reset —mixed [commit]</strong></td>
<td><strong>改变提交点，同时改变暂存区的内容</strong></td>
</tr>
<tr>
<td><strong>git reset —hard [commit]</strong></td>
<td><strong>暂存区、工作区的内容都会被修改到与提交点完全一致的状态</strong></td>
</tr>
<tr>
<td><strong>git reset –hard HEAD</strong></td>
<td><strong>让工作区回到上次提交时的状态</strong></td>
</tr>
</tbody></table>
<h3 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h3><p><img src="https://upload-images.jianshu.io/upload_images/10612886-6b3653f50d57fed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/497/format/webp" alt="img"></p>
<p>image.png</p>
<p>git revert用一个新提交来消除一个历史提交所做的任何修改。</p>
<p><strong>revert与reset的区别</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/10612886-b05cdf3e151e5863.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/468/format/webp" alt="img"></p>
<p>image.png</p>
<ul>
<li>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit。</li>
<li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，减少冲突。但是git reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入，产生很多冲突。关于这一点，不太理解的可以看<a href="https://link.juejin.im/?target=http%3A%2F%2Fyijiebuyi.com%2Fblog%2F8f985d539566d0bf3b804df6be4e0c90.html">这篇文章</a>。</li>
<li>git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li>
</ul>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>上传本地仓库分支到远程仓库分支，实现同步。</p>
<table>
<thead>
<tr>
<th>git push [remote][branch]</th>
<th>上传本地指定分支到远程仓库</th>
</tr>
</thead>
<tbody><tr>
<td><strong>git push [remote] –force</strong></td>
<td><strong>强行推送当前分支到远程仓库，即使有冲突</strong></td>
</tr>
<tr>
<td><strong>git push [remote] –all</strong></td>
<td><strong>推送所有分支到远程仓库</strong></td>
</tr>
</tbody></table>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><table>
<thead>
<tr>
<th>git status</th>
<th>显示有变更的文件</th>
</tr>
</thead>
<tbody><tr>
<td><strong>git log</strong></td>
<td><strong>显示当前分支的版本历史</strong></td>
</tr>
<tr>
<td><strong>git diff</strong></td>
<td><strong>显示暂存区和工作区的差异</strong></td>
</tr>
<tr>
<td><strong>git diff HEAD</strong></td>
<td><strong>显示工作区与当前分支最新commit之间的差异</strong></td>
</tr>
<tr>
<td><strong>git cherry-pick [commit]</strong></td>
<td><strong>选择一个commit，合并进当前分支</strong></td>
</tr>
</tbody></table>
<p>以上就是关于Git的一些常用命令及详细阐述，相信能对Git有一个初步的认识。</p>
<h1 id="git使用总结报错解决方法"><a href="#git使用总结报错解决方法" class="headerlink" title="git使用总结报错解决方法"></a>git使用总结报错解决方法</h1><p>2017年04月24日 10:53:01 <a href="https://me.csdn.net/zhezhebie" target="_blank" rel="noopener">SHUIPING_YANG</a> 阅读数 1680</p>
<p>版权声明：本文为博主原创文章，遵循<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener"> CC 4.0 by-sa </a>版权协议，转载请附上原文出处链接和本声明。本文链接：<a href="https://blog.csdn.net/zhezhebie/article/details/70574040" target="_blank" rel="noopener">https://blog.csdn.net/zhezhebie/article/details/70574040</a></p>
<h2 id="1-执行-Git-add-somefile-的时候，出现-如下-错误："><a href="#1-执行-Git-add-somefile-的时候，出现-如下-错误：" class="headerlink" title="1.执行 Git add somefile 的时候，出现 如下 错误："></a>1.执行 Git add somefile 的时候，出现 如下 错误：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If no other git process is currently running, this probably means a</span><br><span class="line">git process crashed in this repository earlier. Make sure no other git</span><br><span class="line">process is running and remove the file manually to continue.123</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -f .&#x2F;.git&#x2F;index.lock1</span><br></pre></td></tr></table></figure>

<h2 id="2-编译ICS时出现如下错误："><a href="#2-编译ICS时出现如下错误：" class="headerlink" title="2. 编译ICS时出现如下错误："></a>2. 编译ICS时出现如下错误：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">build&#x2F;core&#x2F;Java.mk:20: *** dalvik&#x2F;dexgen: Invalid LOCAL_SDK_VERSION &#39;4&#39; Choices are: current .  Stop.1</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf prebuilt ; repo sync prebuilt1</span><br></pre></td></tr></table></figure>

<h2 id="3-一步上传文件并更新文件到本地和远程"><a href="#3-一步上传文件并更新文件到本地和远程" class="headerlink" title="3.一步上传文件并更新文件到本地和远程"></a>3.一步上传文件并更新文件到本地和远程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add --all &amp;&amp; git commit -m &#39;随机数据&#39; &amp;&amp; git pull &amp;&amp; git push 1</span><br></pre></td></tr></table></figure>

<h2 id="4-今天使用Git-添加远程github仓库的时候提示错误：fatal-remote-origin-already-exists"><a href="#4-今天使用Git-添加远程github仓库的时候提示错误：fatal-remote-origin-already-exists" class="headerlink" title="4.今天使用Git 添加远程github仓库的时候提示错误：fatal: remote origin already exists."></a>4.今天使用Git 添加远程github仓库的时候提示错误：fatal: remote origin already exists.</h2><p>最后找到解决办法如下：<br>1、先删除远程 Git 仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote rm origin1</span><br></pre></td></tr></table></figure>

<p>2、再添加远程 Git 仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:ShuiPingYang&#x2F;php1</span><br></pre></td></tr></table></figure>

<p>如果执行 git remote rm origin 报错的话，我们可以手动修改gitconfig文件的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vi .git&#x2F;config1</span><br></pre></td></tr></table></figure>

<p>把 [remote “origin”] 那一行删掉就好了。</p>
<h2 id="5、git切换分支出错参考："><a href="#5、git切换分支出错参考：" class="headerlink" title="5、git切换分支出错参考："></a>5、git切换分支出错参考：</h2><p><a href="http://blog.csdn.net/zhezhebie/article/details/72178532" target="_blank" rel="noopener">http://blog.csdn.net/zhezhebie/article/details/72178532</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>学会使用vim</title>
    <url>/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/</url>
    <content><![CDATA[<h3 id="学会使用vim–一些-vimrc-的配置文件"><a href="#学会使用vim–一些-vimrc-的配置文件" class="headerlink" title="学会使用vim–一些.vimrc 的配置文件"></a>学会使用vim–一些.vimrc 的配置文件</h3><a id="more"></a>



<h4 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h4><blockquote>
<p><a href="https://github.com/iamcco/markdown-preview.nvim" target="_blank" rel="noopener">https://github.com/iamcco/markdown-preview.nvim</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.vim/bundle</span><br><span class="line">git clone https://github.com/iamcco/markdown-preview.nvim.git</span><br></pre></td></tr></table></figure>







<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/1574129752428.png" alt="1574129752428"></p>
<h1 id="Vim-缩进总结"><a href="#Vim-缩进总结" class="headerlink" title="Vim 缩进总结"></a>Vim 缩进总结</h1><p>在linux上编辑文件时，有时候从别的地方copy过来的代码要缩进，如果一行一行的搞，忒麻烦耗时了，下面是自己使用中不同模式下的一些缩进快捷方法：</p>
<p><strong>一、 normal 模式下</strong><br>&gt;&gt; 当前行增加缩进<br>&lt;&lt; 当前行减少缩进</p>
<p>或者<br>:10,100&gt;<br>第10行至第100行缩进<br>:20,80&lt;<br>第20行至第80行反缩进</p>
<p><strong>二、 Visual 模式下</strong><br>normal 模式下按v 即进入VISUAL模式，可选择多行</p>
<p>选择好需要缩进的行后，按一次大于号’&gt;’缩进一次，按’6&gt;’缩进六次，按’&lt;’回缩</p>
<p><strong>三、INSERT 模式下</strong></p>
<p>CTRL+SHIFT+T：当前行增加缩进<br>CTRL+SHIFT+D：当前行减少缩进</p>
<p><strong>四、 缩进相关的参数</strong></p>
<p>默认vim的缩进宽度为8个空格</p>
<ol>
<li>与缩进相关的参数有shiftwidth、tabstop、softtabstop、expandtab。<br>shiftwidth reindent 操作（&lt;&lt;和&gt;&gt;）时缩进的列数（这里的一列相当于一个空格）<br>tabstop 一个tab键所占的列数，linux 内核代码建议每个tab占用8列<br>softtabstop 敲入tab键时实际占有的列数。<br>expandtab 输入tab时自动将其转化为空格</li>
</ol>
<blockquote>
<p>softtabstop大于tabstop时，且没有设置expandtab时， 例如：softtabstop=12，tabstop=8，<br>那么当输入一个tab时（softtabstop：实际占用的是12列），最后会变成一个tab（tabstop）加4个空格（8+4），<br>输入两个tab（2个softtabstop：24列）会变成3个tab（tabstop），也就是说vim或用tabstop+空格来表示，最终你能看到的缩进的列数一定是softtabstop*按的tab键次数。（ps：:set<br>list 可以查看tab符号）<br>softtabstop小于tabstop且没有设置expandtab时，如果softtabstop=4，tabstop=8，输入一个tab（softtabstop），会变成4个空格（因为不够用一个tabstop表示），输入两个tab会变成一个tab（8列）。 如果softtabstop等于tabstop，而且expandtab没有设置，softtabstop与tabstop就没什么区别了。<br>如果设置的expandtab，输入一个tab，将被展开成softtabstop值个空格，如果softtabstop=4，那么一个tab就会被替换成4个空格。</p>
</blockquote>
<ol>
<li>设置expandtab:<br>:set expandtab<br>取消expandtab:<br>:set noexpandtab<br>自动缩进<br>:set autoindent 回车后自动缩进<br>通常Java的配置方式是：<br>:set softtabstop=4 shiftwidth=4 expandtab<br>Linux kernel的配置方式：<br>:set tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab</li>
<li>查看参数值：<br>:set $arg（这里的arg是变量，值就是上面的那些参数），比如：set softtabstop</li>
</ol>
<p>参考：<br><a href="http://liuzhijun.iteye.com/blog/1831548" target="_blank" rel="noopener">http://liuzhijun.iteye.com/blog/1831548</a><br><a href="https://segmentfault.com/q/1010000000343626" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000343626</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set noexpandtab</span><br><span class="line">" 设置默认进行大小写不敏感查找</span><br><span class="line">:set ignorecase</span><br><span class="line">" 如果有一个大写字母，则切换到大小写敏感查找</span><br><span class="line">:set smartcase</span><br></pre></td></tr></table></figure>







<h1 id="Linux下下载安装vim"><a href="#Linux下下载安装vim" class="headerlink" title="Linux下下载安装vim"></a>Linux下下载安装vim</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure>

<blockquote>
<p>国内搞研究真操蛋，git无法登陆报错</p>
</blockquote>
<p>在git上下载，并且改名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv Vundle.vim-master Vundle.vim</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener">https://github.com/VundleVim/Vundle.vim</a></p>
<p>具体安装使用方法就在这个github中</p>
<blockquote>
<p>一段一段耐心复制，否则就会出错, 因为会出现格式错误</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim .vimrc</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set nocompatible              " be iMproved, required</span><br><span class="line">filetype off                  " required</span><br><span class="line"></span><br><span class="line">" set the runtime path to include Vundle and initialize</span><br><span class="line">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line">" alternatively, pass a path where Vundle should install plugins</span><br><span class="line">"call vundle#begin('~/some/path/here')</span><br><span class="line"></span><br><span class="line">" let Vundle manage Vundle, required</span><br><span class="line">Plugin 'VundleVim/Vundle.vim'</span><br><span class="line"></span><br><span class="line">" The following are examples of different formats supported.</span><br><span class="line">" Keep Plugin commands between vundle#begin/end.</span><br><span class="line">" plugin on GitHub repo</span><br><span class="line">Plugin 'tpope/vim-fugitive'</span><br><span class="line">" plugin from http://vim-scripts.org/vim/scripts.html</span><br><span class="line">" Plugin 'L9'</span><br><span class="line">" Git plugin not hosted on GitHub</span><br><span class="line">Plugin 'git://git.wincent.com/command-t.git'</span><br><span class="line">" git repos on your local machine (i.e. when working on your own plugin)</span><br><span class="line">Plugin 'file:///home/gmarik/path/to/plugin'</span><br><span class="line">" The sparkup vim script is in a subdirectory of this repo called vim.</span><br><span class="line">" Pass the path to set the runtimepath properly.</span><br><span class="line">Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;</span><br><span class="line">" Install L9 and avoid a Naming conflict if you've already installed a</span><br><span class="line">" different version somewhere else.</span><br><span class="line">" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span><br><span class="line"></span><br><span class="line">" All of your Plugins must be added before the following line</span><br><span class="line">call vundle#end()            " required</span><br><span class="line">filetype plugin indent on    " required</span><br><span class="line">" To ignore plugin indent changes, instead use:</span><br><span class="line">"filetype plugin on</span><br><span class="line">"</span><br><span class="line">" Brief help</span><br><span class="line">" :PluginList       - lists configured plugins</span><br><span class="line">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span><br><span class="line">" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span><br><span class="line">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span><br><span class="line">"</span><br><span class="line">" see :h vundle for more details or wiki for FAQ</span><br><span class="line">" Put your non-Plugin stuff after this line</span><br></pre></td></tr></table></figure>





<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim</span><br><span class="line">PluginInstall</span><br></pre></td></tr></table></figure>





<h4 id="1-通过-Vundle-来安装-YCM（官方推荐）"><a href="#1-通过-Vundle-来安装-YCM（官方推荐）" class="headerlink" title="1. 通过 Vundle 来安装 YCM（官方推荐）"></a>1. 通过 Vundle 来安装 YCM（官方推荐）</h4><p><a href="https://link.jianshu.com?t=https://github.com/VundleVim/Vundle.vim#quick-start" target="_blank" rel="noopener">快速安装 vim 的插件管理插件 vundle</a></p>
<p>在 vim 的配置文件 <code>~/.vimrc</code> 中添加一行（在<code>call vundle#begin()</code> 和 <code>call vundle#end()</code> 之间）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">call vundle<span class="comment">#begin()</span></span><br><span class="line">. . . </span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe’</span></span><br><span class="line"><span class="string">. . .</span></span><br><span class="line"><span class="string">call vundle#end()</span></span><br></pre></td></tr></table></figure>

<p>然后保存运行 vim 命令 <code>:PluginInstall</code> 安装 <strong>需要特别注意的是这个时候可能等的时间会相当的长</strong></p>
<p>配置<br>如果你需要配置vim，只需在Home目录创建一个<del>/.vimrc文件即可以配置vim了，如需安装插件，在</del>/.vim目录下创建一个bundle文件夹，插件装在里面。（我通过Vundle管理插件，自行百度Vundle怎么使用）,可以参考我的vimrc配置文件：</p>
<p>含有完整的注释</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set nocompatible</span><br><span class="line">filetype on</span><br><span class="line"> </span><br><span class="line">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">" 这里根据自己需要的插件来设置，以下是我的配置 "</span><br><span class="line">"</span><br><span class="line">" YouCompleteMe:语句补全插件</span><br><span class="line">set runtimepath+=~/.vim/bundle/YouCompleteMe</span><br><span class="line">autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口"</span><br><span class="line">let g:ycm_collect_identifiers_from_tags_files = 1           " 开启 YCM基于标签引擎</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释与字符串中的内容也用于补全</span><br><span class="line">let g:syntastic_ignore_files=[".*\.py$"]</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax = 1                  " 语法关键字补全</span><br><span class="line">let g:ycm_complete_in_comments = 1</span><br><span class="line">let g:ycm_confirm_extra_conf = 0                            " 关闭加载.ycm_extra_conf.py提示</span><br><span class="line">let g:ycm_key_list_select_completion = ['&lt;c-n&gt;', '&lt;Down&gt;']  " 映射按键,没有这个会拦截掉tab, 导致其他插件的tab不能用.</span><br><span class="line">let g:ycm_key_list_previous_completion = ['&lt;c-p&gt;', '&lt;Up&gt;']</span><br><span class="line">let g:ycm_complete_in_comments = 1                          " 在注释输入中也能补全</span><br><span class="line">let g:ycm_complete_in_strings = 1                           " 在字符串输入中也能补全</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释和字符串中的文字也会被收入补全</span><br><span class="line">let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'</span><br><span class="line">let g:ycm_show_diagnostics_ui = 0                           " 禁用语法检查</span><br><span class="line">inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? "\&lt;C-y&gt;" : "\&lt;CR&gt;"             " 回车即选中当前项</span><br><span class="line">nnoremap &lt;c-j&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;     " 跳转到定义处</span><br><span class="line">let g:ycm_min_num_of_chars_for_completion=2                 " 从第2个键入字符就开始罗列匹配项</span><br><span class="line">"</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">" github 仓库中的插件 "</span><br><span class="line">Plugin 'VundleVim/Vundle.vim'</span><br><span class="line">Plugin 'Valloric/YouCompleteMe'</span><br><span class="line">Plugin 'vim-airline/vim-airline'</span><br><span class="line">"vim-airline配置:优化vim界面"</span><br><span class="line">"let g:airline#extensions#tabline#enabled = 1</span><br><span class="line">" airline设置</span><br><span class="line">" 显示颜色</span><br><span class="line">set t_Co=256</span><br><span class="line">set laststatus=2</span><br><span class="line">" 使用powerline打过补丁的字体</span><br><span class="line">let g:airline_powerline_fonts = 1</span><br><span class="line">" 开启tabline</span><br><span class="line">let g:airline#extensions#tabline#enabled = 1</span><br><span class="line">" tabline中当前buffer两端的分隔字符</span><br><span class="line">let g:airline#extensions#tabline#left_sep = ' '</span><br><span class="line">" tabline中未激活buffer两端的分隔字符</span><br><span class="line">let g:airline#extensions#tabline#left_alt_sep = ' '</span><br><span class="line">" tabline中buffer显示编号</span><br><span class="line">let g:airline#extensions#tabline#buffer_nr_show = 1</span><br><span class="line">" 映射切换buffer的键位</span><br><span class="line">nnoremap [b :bp&lt;CR&gt;</span><br><span class="line">nnoremap ]b :bn&lt;CR&gt;</span><br><span class="line">" 映射&lt;leader&gt;num到num buffer</span><br><span class="line">map &lt;leader&gt;1 :b 1&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;2 :b 2&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;3 :b 3&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;4 :b 4&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;5 :b 5&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;6 :b 6&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;7 :b 7&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;8 :b 8&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;9 :b 9&lt;CR&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">" vim-scripts 中的插件 "</span><br><span class="line">Plugin 'taglist.vim'</span><br><span class="line">"ctags 配置:F3快捷键显示程序中的各种tags，包括变量和函数等。</span><br><span class="line">map &lt;F3&gt; :TlistToggle&lt;CR&gt;</span><br><span class="line">let Tlist_Use_Right_Window=1</span><br><span class="line">let Tlist_Show_One_File=1</span><br><span class="line">let Tlist_Exit_OnlyWindow=1</span><br><span class="line">let Tlist_WinWidt=25</span><br><span class="line"> </span><br><span class="line">Plugin 'The-NERD-tree'</span><br><span class="line">"NERDTree 配置:F2快捷键显示当前目录树</span><br><span class="line">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">let NERDTreeWinSize=25 </span><br><span class="line"> </span><br><span class="line">Plugin 'indentLine.vim'</span><br><span class="line">Plugin 'delimitMate.vim'</span><br><span class="line"> </span><br><span class="line">" 非 github 仓库的插件"</span><br><span class="line">" Plugin 'git://git.wincent.com/command-t.git'</span><br><span class="line">" 本地仓库的插件 "</span><br><span class="line"> </span><br><span class="line">call vundle#end()</span><br><span class="line"> </span><br><span class="line">"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""</span><br><span class="line">"""""新文件标题</span><br><span class="line">""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""</span><br><span class="line">"新建.c,.h,.sh,.java文件，自动插入文件头 </span><br><span class="line">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" </span><br><span class="line">""定义函数SetTitle，自动插入文件头 </span><br><span class="line">func SetTitle() </span><br><span class="line">	"如果文件类型为.sh文件 </span><br><span class="line">	if &amp;filetype == 'sh' </span><br><span class="line">		call setline(1, "##########################################################################") </span><br><span class="line">		call append(line("."), "# File Name: ".expand("%")) </span><br><span class="line">		call append(line(".")+1, "# Author: amoscykl") </span><br><span class="line">		call append(line(".")+2, "# mail: amoscykl980629@163.com") </span><br><span class="line">		call append(line(".")+3, "# Created Time: ".strftime("%c")) </span><br><span class="line">		call append(line(".")+4, "#########################################################################") </span><br><span class="line">		call append(line(".")+5, "#!/bin/zsh")</span><br><span class="line">		call append(line(".")+6, "PATH=/home/edison/bin:/home/edison/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/work/tools/gcc-3.4.5-glibc-2.3.6/bin")</span><br><span class="line">		call append(line(".")+7, "export PATH")</span><br><span class="line">		call append(line(".")+8, "")</span><br><span class="line">	else </span><br><span class="line">		call setline(1, "/*************************************************************************") </span><br><span class="line">		call append(line("."), "	&gt; File Name: ".expand("%")) </span><br><span class="line">		call append(line(".")+1, "	&gt; Author: amoscykl") </span><br><span class="line">		call append(line(".")+2, "	&gt; Mail: amoscykl@163.com ") </span><br><span class="line">		call append(line(".")+3, "	&gt; Created Time: ".strftime("%c")) </span><br><span class="line">		call append(line(".")+4, " ************************************************************************/") </span><br><span class="line">		call append(line(".")+5, "")</span><br><span class="line">	endif</span><br><span class="line">	if &amp;filetype == 'cpp'</span><br><span class="line">		call append(line(".")+6, "#include&lt;iostream&gt;")</span><br><span class="line">    	call append(line(".")+7, "using namespace std;")</span><br><span class="line">		call append(line(".")+8, "")</span><br><span class="line">	endif</span><br><span class="line">	if &amp;filetype == 'c'</span><br><span class="line">		call append(line(".")+6, "#include&lt;stdio.h&gt;")</span><br><span class="line">		call append(line(".")+7, "")</span><br><span class="line">	endif</span><br><span class="line">	"	if &amp;filetype == 'java'</span><br><span class="line">	"		call append(line(".")+6,"public class ".expand("%"))</span><br><span class="line">	"		call append(line(".")+7,"")</span><br><span class="line">	"	endif</span><br><span class="line">	"新建文件后，自动定位到文件末尾</span><br><span class="line">	autocmd BufNewFile * normal G</span><br><span class="line">endfunc </span><br><span class="line">""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""</span><br><span class="line">"键盘命令</span><br><span class="line">""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""</span><br><span class="line"> </span><br><span class="line">nmap &lt;leader&gt;w :w!&lt;cr&gt;</span><br><span class="line">nmap &lt;leader&gt;f :find&lt;cr&gt;</span><br><span class="line"> </span><br><span class="line">" 映射全选+复制 ctrl+a</span><br><span class="line">map &lt;C-A&gt; ggVGY</span><br><span class="line">map! &lt;C-A&gt; &lt;Esc&gt;ggVGY</span><br><span class="line">map &lt;F12&gt; gg=G</span><br><span class="line">" 选中状态下 Ctrl+c 复制</span><br><span class="line">vmap &lt;C-c&gt; "+y</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""</span><br><span class="line">""实用设置</span><br><span class="line">"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""</span><br><span class="line">" 设置当文件被改动时自动载入</span><br><span class="line">set autoread</span><br><span class="line">" quickfix模式</span><br><span class="line">autocmd FileType c,cpp map &lt;buffer&gt; &lt;leader&gt;&lt;space&gt; :w&lt;cr&gt;:make&lt;cr&gt;</span><br><span class="line">"代码补全 </span><br><span class="line">set completeopt=preview,menu </span><br><span class="line">"允许插件  </span><br><span class="line">filetype plugin on</span><br><span class="line">"共享剪贴板  </span><br><span class="line">set clipboard=unnamed </span><br><span class="line">"从不备份  </span><br><span class="line">set nobackup</span><br><span class="line">"make 运行</span><br><span class="line">:set makeprg=g++\ -Wall\ \ %</span><br><span class="line">"自动保存</span><br><span class="line">set autowrite</span><br><span class="line">set ruler                   " 打开状态栏标尺</span><br><span class="line">set cursorline              " 突出显示当前行</span><br><span class="line">set magic                   " 设置魔术</span><br><span class="line">set guioptions-=T           " 隐藏工具栏</span><br><span class="line">set guioptions-=m           " 隐藏菜单栏</span><br><span class="line">"set statusline=\ %&lt;%F[%1*%M%*%n%R%H]%=\ %y\ %0(%&#123;&amp;fileformat&#125;\ %&#123;&amp;encoding&#125;\ %c:%l/%L%)\</span><br><span class="line">" 设置在状态行显示的信息</span><br><span class="line">set foldcolumn=0</span><br><span class="line">set foldmethod=indent </span><br><span class="line">set foldlevel=3 </span><br><span class="line">set foldenable              " 开始折叠</span><br><span class="line">" 不要使用vi的键盘模式，而是vim自己的</span><br><span class="line">set nocompatible</span><br><span class="line">" 语法高亮</span><br><span class="line">set syntax=on</span><br><span class="line">" 去掉输入错误的提示声音</span><br><span class="line">set noeb</span><br><span class="line">" 在处理未保存或只读文件的时候，弹出确认</span><br><span class="line">set confirm</span><br><span class="line">" 自动缩进</span><br><span class="line">set autoindent</span><br><span class="line">set cindent</span><br><span class="line">" Tab键的宽度</span><br><span class="line">set tabstop=4</span><br><span class="line">" 统一缩进为4</span><br><span class="line">set softtabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line">" 不要用空格代替制表符</span><br><span class="line">set noexpandtab</span><br><span class="line">" 在行和段开始处使用制表符</span><br><span class="line">set smarttab</span><br><span class="line">" 显示行号</span><br><span class="line">set number</span><br><span class="line">" 历史记录数</span><br><span class="line">set history=1000</span><br><span class="line">"禁止生成临时文件</span><br><span class="line">set nobackup</span><br><span class="line">set noswapfile</span><br><span class="line">"搜索忽略大小写</span><br><span class="line">set ignorecase</span><br><span class="line">"搜索逐字符高亮</span><br><span class="line">set hlsearch</span><br><span class="line">set incsearch</span><br><span class="line">"行内替换</span><br><span class="line">set gdefault</span><br><span class="line">"编码设置</span><br><span class="line">set enc=utf-8</span><br><span class="line">set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936</span><br><span class="line">"语言设置</span><br><span class="line">set langmenu=zh_CN.UTF-8</span><br><span class="line">set helplang=cn</span><br><span class="line">" 我的状态行显示的内容（包括文件类型和解码）</span><br><span class="line">set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\"%d/%m/%y\ -\ %H:%M\")&#125;</span><br><span class="line">set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]</span><br><span class="line">" 总是显示状态行</span><br><span class="line">set laststatus=2</span><br><span class="line">" 命令行（在状态行下）的高度，默认为1，这里是2</span><br><span class="line">set cmdheight=2</span><br><span class="line">" 侦测文件类型</span><br><span class="line">filetype on</span><br><span class="line">" 载入文件类型插件</span><br><span class="line">filetype plugin on</span><br><span class="line">" 为特定文件类型载入相关缩进文件</span><br><span class="line">filetype indent on</span><br><span class="line">" 保存全局变量</span><br><span class="line">set viminfo+=!</span><br><span class="line">" 带有如下符号的单词不要被换行分割</span><br><span class="line">set iskeyword+=_,$,@,%,#,-</span><br><span class="line">" 字符间插入的像素行数目</span><br><span class="line">set linespace=0</span><br><span class="line">" 增强模式中的命令行自动完成操作</span><br><span class="line">set wildmenu</span><br><span class="line">" 使回格键（backspace）正常处理indent, eol, start等</span><br><span class="line">set backspace=2</span><br><span class="line">" 允许backspace和光标键跨越行边界</span><br><span class="line">set whichwrap+=&lt;,&gt;,h,l</span><br><span class="line">" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）</span><br><span class="line">set mouse=a</span><br><span class="line">set selection=exclusive</span><br><span class="line">set selectmode=mouse,key</span><br><span class="line">" 通过使用: commands命令，告诉我们文件的哪一行被改变过</span><br><span class="line">set report=0</span><br><span class="line">" 在被分割的窗口间显示空白，便于阅读</span><br><span class="line">set fillchars=vert:\ ,stl:\ ,stlnc:\</span><br><span class="line">" 高亮显示匹配的括号</span><br><span class="line">set showmatch</span><br><span class="line">" 匹配括号高亮的时间（单位是十分之一秒）</span><br><span class="line">set matchtime=1</span><br><span class="line">" 光标移动到buffer的顶部和底部时保持3行距离</span><br><span class="line">set scrolloff=3</span><br><span class="line">" 为C程序提供自动缩进</span><br><span class="line">set smartindent</span><br><span class="line">" 高亮显示普通txt文件（需要txt.vim脚本）</span><br><span class="line"> au BufRead,BufNewFile *  setfiletype txt</span><br><span class="line">"自动补全</span><br><span class="line">:inoremap ( ()&lt;ESC&gt;i</span><br><span class="line">:inoremap ) &lt;c-r&gt;=ClosePair(')')&lt;CR&gt;</span><br><span class="line">":inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O</span><br><span class="line">":inoremap &#125; &lt;c-r&gt;=ClosePair('&#125;')&lt;CR&gt;</span><br><span class="line">:inoremap [ []&lt;ESC&gt;i</span><br><span class="line">:inoremap ] &lt;c-r&gt;=ClosePair(']')&lt;CR&gt;</span><br><span class="line">:inoremap " ""&lt;ESC&gt;i</span><br><span class="line">:inoremap ' ''&lt;ESC&gt;i</span><br><span class="line">function! ClosePair(char)</span><br><span class="line">	if getline('.')[col('.') - 1] == a:char</span><br><span class="line">		return "\&lt;Right&gt;"</span><br><span class="line">	else</span><br><span class="line">		return a:char</span><br><span class="line">	endif</span><br><span class="line">endfunction</span><br><span class="line">filetype plugin indent on </span><br><span class="line">"打开文件类型检测, 加了这句才可以用智能补全</span><br><span class="line">set completeopt=longest,menu</span><br><span class="line">"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""</span><br></pre></td></tr></table></figure>





<h4 id="当使用vim时遇到Taglist-Exuberant-ctags-http-ctags-sf-net-not-found-in-PATH-Plugin-is-not-loaded"><a href="#当使用vim时遇到Taglist-Exuberant-ctags-http-ctags-sf-net-not-found-in-PATH-Plugin-is-not-loaded" class="headerlink" title="当使用vim时遇到Taglist: Exuberant ctags (http://ctags.sf.net) not found in PATH. Plugin is not loaded."></a>当使用vim时遇到Taglist: Exuberant ctags (<a href="http://ctags.sf.net" target="_blank" rel="noopener">http://ctags.sf.net</a>) not found in PATH. Plugin is not loaded.</h4><p>用vim编辑器时出现提示：</p>
<p>Taglist: Exuberant ctags (<a href="http://ctags.sf.net" target="_blank" rel="noopener">http://ctags.sf.net</a>) not found in PATH. Plugin is not loaded. </p>
<p>原因：taglist plugin不能找到ctags 程序</p>
<p>解决方案：</p>
<p>1.删除.vim文件夹下的相关文件：plugin/taglist.vim和doc/taglist.txt</p>
<p>2.安装ctags      命令：apt-get install ctags （推荐使用第二个方法）</p>
<p>参考地址：<a href="http://stackoverflow.com/questions/7454796/taglist-exuberant-ctags-not-found-in-path" target="_blank" rel="noopener">http://stackoverflow.com/questions/7454796/taglist-exuberant-ctags-not-found-in-path</a></p>
<blockquote>
<p>需要进一步安装yum，这样方便进行中文管理</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sudo apt install yum </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也不一定要安装，因为已经有安装好的yum,并不是这些问题</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $LANG</span><br><span class="line">locale</span><br><span class="line">LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/1573353665802.png" alt="1573353665802"></p>
<p>安装插件</p>
<p>1.安装YouCompleteMe</p>
<p>在.vimrc中插入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Plugin &#39;Valloric&#x2F;YouCompleteMe&#39;</span><br></pre></td></tr></table></figure>

<p>利用git下载安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Valloric&#x2F;YouCompleteMe.git ~&#x2F;.vim&#x2F;bundle&#x2F;YouCompleteMe</span><br></pre></td></tr></table></figure>

<p>然后进入YouCompeteMe所在的文件夹：~/.vim/bundle/YouCompleteMe，运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;.vim&#x2F;bundle&#x2F;YouCompleteMe</span><br><span class="line">python3 install.py --clang-completer --system-libclang</span><br></pre></td></tr></table></figure>

<p>其中编译安装的过程中，不断提示编译所缺少的依赖，会有错误提示，按照提示安装缺少的依赖就好，其中比较重要的是clang，所以先需要运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install clang</span><br></pre></td></tr></table></figure>

<p>运行install.py时会显示</p>
<p><img src="https://oscimg.oschina.net/oscnet/a626a70962782acc76ed21b0d12e7efc14e.jpg" alt="img"></p>
<p>最后在.vimrc文件中，添加配置信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set ts&#x3D;4</span><br><span class="line">set expandtab</span><br><span class="line">set shiftwidth&#x3D;4</span><br><span class="line">set softtabstop&#x3D;4</span><br><span class="line">set number</span><br><span class="line">&quot;vundle&quot;</span><br><span class="line">filetype off</span><br><span class="line">set rtp+&#x3D;~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line">Plugin &#39;VundleVim&#x2F;Vundle.vim&#39;</span><br><span class="line">Plugin &#39;Valloric&#x2F;YouCompleteMe&#39;</span><br><span class="line">Plugin &#39;davidhalter&#x2F;jedi-vim&#39;</span><br><span class="line">call vundle#end()</span><br><span class="line">filetype plugin indent on</span><br><span class="line">&quot;youcompleteme&quot;</span><br><span class="line">&quot;默认配置文件路径&quot;</span><br><span class="line">let g:ycm_global_ycm_extra_conf &#x3D; &#39;~&#x2F;.vim&#x2F;bundle&#x2F;YouCompleteMe&#x2F;.ycm_extra_conf.py&#39;       &quot;配置全局路径</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;let g:ycm_server_keep_logfiles&#x3D;1</span><br><span class="line">&quot;let g:ycm_sever_log_level&#x3D;&#39;debug&#39;</span><br><span class="line">&quot;打开vim时不再询问是否加载ycm_extra_conf.py配置&quot;</span><br><span class="line">&quot;let g:ycm_confirm_extra_conf&#x3D;0</span><br><span class="line">&quot;set completeopt&#x3D;longest,menu</span><br><span class="line">&quot;python解释器路径&quot;</span><br><span class="line">let g:ycm_path_to_python_interpreter&#x3D;&#39;&#x2F;home&#x2F;wdh&#x2F;anaconda3&#x2F;bin&#x2F;python3&#39;</span><br><span class="line">&quot;let g:ycm_python_binary_path &#x3D; &#39;&#x2F;home&#x2F;wdh&#x2F;anaconda3&#x2F;bin&#x2F;python3&#39;   &quot;python 环境</span><br><span class="line">&quot;是否开启语义补全&quot;</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax&#x3D;1</span><br><span class="line">&quot;是否在注释中也开启补全&quot;</span><br><span class="line">let g:ycm_complete_in_comments&#x3D;1</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings &#x3D; 0</span><br><span class="line">&quot;开始补全的字符数&quot;</span><br><span class="line">let g:ycm_min_num_of_chars_for_completion&#x3D;2</span><br><span class="line">&quot;补全后自动关机预览窗口&quot;</span><br><span class="line">&quot;let g:ycm_autoclose_preview_window_after_completion&#x3D;1</span><br><span class="line">&quot; 禁止缓存匹配项,每次都重新生成匹配项&quot;</span><br><span class="line">let g:ycm_cache_omnifunc&#x3D;0</span><br><span class="line">&quot;字符串中也开启补全&quot;</span><br><span class="line">let g:ycm_complete_in_strings &#x3D; 1</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax&#x3D;1 &quot;补全关键字 </span><br><span class="line">&quot;离开插入模式后自动关闭预览窗口&quot;</span><br><span class="line">autocmd InsertLeave * if pumvisible() &#x3D;&#x3D; 0|pclose|endif</span><br><span class="line">&quot;回车即选中当前项&quot;</span><br><span class="line">&quot;inoremap &lt;expr&gt; &lt;CR&gt;       pumvisible() ? &#39;&lt;C-y&gt;&#39; : &#39;\&lt;CR&gt;&#39;     </span><br><span class="line">&quot;上下左右键行为&quot;</span><br><span class="line">&quot;inoremap &lt;expr&gt; &lt;Down&gt;     pumvisible() ? &#39;\&lt;C-n&gt;&#39; : &#39;\&lt;Down&gt;&#39;</span><br><span class="line">&quot;inoremap &lt;expr&gt; &lt;Up&gt;       pumvisible() ? &#39;\&lt;C-p&gt;&#39; : &#39;\&lt;Up&gt;&#39;</span><br><span class="line">&quot;inoremap &lt;expr&gt; &lt;PageDown&gt; pumvisible() ? &#39;\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;&#39; : &#39;\&lt;PageDown&gt;&#39;</span><br><span class="line">&quot;inoremap &lt;expr&gt; &lt;PageUp&gt;   pumvisible() ? &#39;\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;&#39; : &#39;\&lt;PageUp&gt;&#39;\</span><br></pre></td></tr></table></figure>







<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只在终端键入 vim，后面什么都不加</span></span><br><span class="line">vim</span><br><span class="line"><span class="comment"># 然后键入下面的命令</span></span><br><span class="line"><span class="symbol">:PluginInstall</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后等待安装完成，[ :q ] 来退出即可</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/1572858986067.png" alt="1572858986067"></p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/1572860322895.png" alt="1572860322895"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ctags</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/1572860418599.png" alt="1572860418599"></p>
<blockquote>
<p>这个只有root 才能安装</p>
</blockquote>
<p>安装vim-powerline，Solarized以及Markdown三个插件。</p>
<h1 id="windows-下下载安装vim-失败"><a href="#windows-下下载安装vim-失败" class="headerlink" title="windows 下下载安装vim 失败"></a>windows 下下载安装vim 失败</h1><h4 id="下载安装vim"><a href="#下载安装vim" class="headerlink" title="下载安装vim"></a>下载安装vim</h4><p><a href="https://www.vim.org/download.php#pc" target="_blank" rel="noopener">https://www.vim.org/download.php#pc</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">C:\Program Files (x86)\Vim</span><br><span class="line"></span><br><span class="line">git clone https://github.com/VundleVim/Vundle.vim.git C:\Program Files (x86)\Vim\vimfiles/bundle/Vundle.vim</span><br></pre></td></tr></table></figure>

<p>配置环境变量</p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/1572786694342.png" alt="1572786694342"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Program Files (x86)\Vim\vim81</span><br></pre></td></tr></table></figure>



<p>首先在Windows 下下载 Ubuntu18，在windows 的应用商城中下载</p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/1572788163675.png" alt="1572788163675"></p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/1572788702980.png" alt="1572788702980"></p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/1572788689519.png" alt="1572788689519"></p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/1572788676624.png" alt="1572788676624"></p>
<p>参考</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/3e3f881bb5bd" target="_blank" rel="noopener">https://www.jianshu.com/p/3e3f881bb5bd</a></p>
</blockquote>
<p>配置一下颜色</p>
<p>然后解决一下:</p>
<p><img src="/2019/11/18/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8vim/1572793348215.png" alt="1572793348215"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure>





<h4 id="要安装vundle-这个插件"><a href="#要安装vundle-这个插件" class="headerlink" title="要安装vundle 这个插件"></a>要安装vundle 这个插件</h4><p>哔哩哔哩视频中的vim配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">let mapleader=" "</span><br><span class="line">syntax on</span><br><span class="line">set number</span><br><span class="line">set norelativenumber</span><br><span class="line">set cursorline</span><br><span class="line">set wrap</span><br><span class="line">set showcmd</span><br><span class="line">set wildmenu</span><br><span class="line"></span><br><span class="line">set hlsearch</span><br><span class="line">exec "nohlsearch"</span><br><span class="line">set incsearch</span><br><span class="line">set ignorecase</span><br><span class="line">set smartcase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set nocompatible</span><br><span class="line">filetype on</span><br><span class="line">filetype indent on</span><br><span class="line">filetype plugin on</span><br><span class="line">filetype plugin indent on</span><br><span class="line">set mouse=a</span><br><span class="line">set encoding=utf-8</span><br><span class="line">let &amp;t_ut=''</span><br><span class="line">set expandtab</span><br><span class="line">set tabstop=2</span><br><span class="line">set shiftwidth=2</span><br><span class="line">set softtabstop=2</span><br><span class="line">set list</span><br><span class="line">set listchars=tab:▸\ ,trail:▫</span><br><span class="line">set scrolloff=5</span><br><span class="line">set tw=0</span><br><span class="line">set indentexpr=</span><br><span class="line">set backspace=indent,eol,start</span><br><span class="line">set foldmethod=indent</span><br><span class="line">set foldlevel=99</span><br><span class="line">let &amp;t_SI = "\&lt;Esc&gt;]50;CursorShape=1\x7"</span><br><span class="line">let &amp;t_SR = "\&lt;Esc&gt;]50;CursorShape=2\x7"</span><br><span class="line">let &amp;t_EI = "\&lt;Esc&gt;]50;CursorShape=0\x7"</span><br><span class="line">set laststatus=2</span><br><span class="line">set autochdir</span><br><span class="line">au BufReadPost * if line("'\"") &gt; 1 &amp;&amp; line("'\"") &lt;= line("$") | exe "normal! g'\"" | endif</span><br><span class="line"></span><br><span class="line">noremap = nzz</span><br><span class="line">noremap - Nzz</span><br><span class="line">noremap &lt;LEADER&gt;&lt;CR&gt; :nohlsearch&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">noremap n h</span><br><span class="line">noremap u k</span><br><span class="line">noremap e j</span><br><span class="line">noremap i l</span><br><span class="line">noremap U 5k</span><br><span class="line">noremap E 5j</span><br><span class="line">noremap N 7h</span><br><span class="line">noremap I 7l</span><br><span class="line">" N key: go to the start of the line</span><br><span class="line">noremap &lt;C-n&gt; 0</span><br><span class="line">" I key: go to the end of the line</span><br><span class="line">noremap &lt;C-i&gt; $</span><br><span class="line"></span><br><span class="line">noremap k i</span><br><span class="line">noremap K I</span><br><span class="line">noremap l u</span><br><span class="line"></span><br><span class="line">map s &lt;nop&gt;</span><br><span class="line">map S :w&lt;CR&gt;</span><br><span class="line">map Q :q&lt;CR&gt;</span><br><span class="line">map R :source $MYVIMRC&lt;CR&gt;</span><br><span class="line">map ; :</span><br><span class="line"></span><br><span class="line">map si :set splitright&lt;CR&gt;:vsplit&lt;CR&gt;</span><br><span class="line">map sn :set nosplitright&lt;CR&gt;:vsplit&lt;CR&gt;</span><br><span class="line">map su :set nosplitbelow&lt;CR&gt;:split&lt;CR&gt;</span><br><span class="line">map se :set splitbelow&lt;CR&gt;:split&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">map &lt;LEADER&gt;i &lt;C-w&gt;l</span><br><span class="line">map &lt;LEADER&gt;u &lt;C-w&gt;k</span><br><span class="line">map &lt;LEADER&gt;n &lt;C-w&gt;h</span><br><span class="line">map &lt;LEADER&gt;e &lt;C-w&gt;j</span><br><span class="line"></span><br><span class="line">map &lt;up&gt; :res +5&lt;CR&gt;</span><br><span class="line">map &lt;down&gt; :res -5&lt;CR&gt;</span><br><span class="line">map &lt;left&gt; :vertical resize-5&lt;CR&gt;</span><br><span class="line">map &lt;right&gt; :vertical resize+5&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">map tu :tabe&lt;CR&gt;</span><br><span class="line">map tn :-tabnext&lt;CR&gt;</span><br><span class="line">map ti :+tabnext&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">map sv &lt;C-w&gt;t&lt;C-w&gt;H</span><br><span class="line">map sh &lt;C-w&gt;t&lt;C-w&gt;K</span><br><span class="line"></span><br><span class="line">call plug#begin('~/.vim/plugged')</span><br><span class="line"></span><br><span class="line">Plug 'vim-airline/vim-airline'</span><br><span class="line">Plug 'connorholyday/vim-snazzy'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" File navigation</span><br><span class="line">Plug 'scrooloose/nerdtree', &#123; 'on': 'NERDTreeToggle' &#125;</span><br><span class="line">Plug 'Xuyuanp/nerdtree-git-plugin'</span><br><span class="line"></span><br><span class="line">" Taglist</span><br><span class="line">Plug 'majutsushi/tagbar', &#123; 'on': 'TagbarOpenAutoClose' &#125;</span><br><span class="line"></span><br><span class="line">" Error checking</span><br><span class="line">Plug 'w0rp/ale'</span><br><span class="line"></span><br><span class="line">" Auto Complete</span><br><span class="line">Plug 'Valloric/YouCompleteMe'</span><br><span class="line"></span><br><span class="line">" Undo Tree</span><br><span class="line">Plug 'mbbill/undotree/'</span><br><span class="line"></span><br><span class="line">" Other visual enhancement</span><br><span class="line">Plug 'nathanaelkane/vim-indent-guides'</span><br><span class="line">Plug 'itchyny/vim-cursorword'</span><br><span class="line"></span><br><span class="line">" Git</span><br><span class="line">Plug 'rhysd/conflict-marker.vim'</span><br><span class="line">Plug 'tpope/vim-fugitive'</span><br><span class="line">Plug 'mhinz/vim-signify'</span><br><span class="line">Plug 'gisphm/vim-gitignore', &#123; 'for': ['gitignore', 'vim-plug'] &#125;</span><br><span class="line"></span><br><span class="line">" HTML, CSS, JavaScript, PHP, JSON, etc.</span><br><span class="line">Plug 'elzr/vim-json'</span><br><span class="line">Plug 'hail2u/vim-css3-syntax'</span><br><span class="line">Plug 'spf13/PIV', &#123; 'for' :['php', 'vim-plug'] &#125;</span><br><span class="line">Plug 'gko/vim-coloresque', &#123; 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] &#125;</span><br><span class="line">Plug 'pangloss/vim-javascript', &#123; 'for' :['javascript', 'vim-plug'] &#125;</span><br><span class="line">Plug 'mattn/emmet-vim'</span><br><span class="line"></span><br><span class="line">" Python</span><br><span class="line">Plug 'vim-scripts/indentpython.vim'</span><br><span class="line"></span><br><span class="line">" Markdown</span><br><span class="line">Plug 'iamcco/markdown-preview.nvim', &#123; 'do': &#123; -&gt; mkdp#util#install_sync() &#125;, 'for' :['markdown', 'vim-plug'] &#125;</span><br><span class="line">Plug 'dhruvasagar/vim-table-mode', &#123; 'on': 'TableModeToggle' &#125;</span><br><span class="line">Plug 'vimwiki/vimwiki'</span><br><span class="line"></span><br><span class="line">" Bookmarks</span><br><span class="line">Plug 'kshenoy/vim-signature'</span><br><span class="line"></span><br><span class="line">" Other useful utilities</span><br><span class="line">Plug 'terryma/vim-multiple-cursors'</span><br><span class="line">Plug 'junegunn/goyo.vim' " distraction free writing mode</span><br><span class="line">Plug 'tpope/vim-surround' " type ysks' to wrap the word with '' or type cs'` to change 'word' to `word`</span><br><span class="line">Plug 'godlygeek/tabular' " type ;Tabularize /= to align the =</span><br><span class="line">Plug 'gcmt/wildfire.vim' " in Visual mode, type i' to select all text in '', or type i) i] i&#125; ip</span><br><span class="line">Plug 'scrooloose/nerdcommenter' " in &lt;space&gt;cc to comment a line</span><br><span class="line"></span><br><span class="line">" Dependencies</span><br><span class="line">Plug 'MarcWeber/vim-addon-mw-utils'</span><br><span class="line">Plug 'kana/vim-textobj-user'</span><br><span class="line">Plug 'fadein/vim-FIGlet'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call plug#end()</span><br><span class="line"></span><br><span class="line">let g:SnazzyTransparent = 1</span><br><span class="line">color snazzy</span><br><span class="line"></span><br><span class="line">" ===</span><br><span class="line">" === NERDTree</span><br><span class="line">" ===</span><br><span class="line">map tt :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">let NERDTreeMapOpenExpl = ""</span><br><span class="line">let NERDTreeMapUpdir = ""</span><br><span class="line">let NERDTreeMapUpdirKeepOpen = "l"</span><br><span class="line">let NERDTreeMapOpenSplit = ""</span><br><span class="line">let NERDTreeOpenVSplit = ""</span><br><span class="line">let NERDTreeMapActivateNode = "i"</span><br><span class="line">let NERDTreeMapOpenInTab = "o"</span><br><span class="line">let NERDTreeMapPreview = ""</span><br><span class="line">let NERDTreeMapCloseDir = "n"</span><br><span class="line">let NERDTreeMapChangeRoot = "y"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" ==</span><br><span class="line">" == NERDTree-git</span><br><span class="line">" ==</span><br><span class="line">let g:NERDTreeIndicatorMapCustom = &#123;</span><br><span class="line">    \ "Modified"  : "✹",</span><br><span class="line">    \ "Staged"    : "✚",</span><br><span class="line">    \ "Untracked" : "✭",</span><br><span class="line">    \ "Renamed"   : "➜",</span><br><span class="line">    \ "Unmerged"  : "═",</span><br><span class="line">    \ "Deleted"   : "✖",</span><br><span class="line">    \ "Dirty"     : "✗",</span><br><span class="line">    \ "Clean"     : "✔︎",</span><br><span class="line">    \ "Unknown"   : "?"</span><br><span class="line">    \ &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" ===</span><br><span class="line">" === You Complete ME</span><br><span class="line">" ===</span><br><span class="line">nnoremap gd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</span><br><span class="line">nnoremap g/ :YcmCompleter GetDoc&lt;CR&gt;</span><br><span class="line">nnoremap gt :YcmCompleter GetType&lt;CR&gt;</span><br><span class="line">nnoremap gr :YcmCompleter GoToReferences&lt;CR&gt;</span><br><span class="line">let g:ycm_autoclose_preview_window_after_completion=0</span><br><span class="line">let g:ycm_autoclose_preview_window_after_insertion=1</span><br><span class="line">let g:ycm_use_clangd = 0</span><br><span class="line">let g:ycm_python_interpreter_path = "/bin/python3"</span><br><span class="line">let g:ycm_python_binary_path = "/bin/python3"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" ===</span><br><span class="line">" === ale</span><br><span class="line">" ===</span><br><span class="line">let b:ale_linters = ['pylint']</span><br><span class="line">let b:ale_fixers = ['autopep8', 'yapf']</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" ===</span><br><span class="line">" === Taglist</span><br><span class="line">" ===</span><br><span class="line">map &lt;silent&gt; T :TagbarOpenAutoClose&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" ===</span><br><span class="line">" === MarkdownPreview</span><br><span class="line">" ===</span><br><span class="line">let g:mkdp_auto_start = 0</span><br><span class="line">let g:mkdp_auto_close = 1</span><br><span class="line">let g:mkdp_refresh_slow = 0</span><br><span class="line">let g:mkdp_command_for_global = 0</span><br><span class="line">let g:mkdp_open_to_the_world = 0</span><br><span class="line">let g:mkdp_open_ip = ''</span><br><span class="line">let g:mkdp_browser = 'chromium'</span><br><span class="line">let g:mkdp_echo_preview_url = 0</span><br><span class="line">let g:mkdp_browserfunc = ''</span><br><span class="line">let g:mkdp_preview_options = &#123;</span><br><span class="line">    \ 'mkit': &#123;&#125;,</span><br><span class="line">    \ 'katex': &#123;&#125;,</span><br><span class="line">    \ 'uml': &#123;&#125;,</span><br><span class="line">    \ 'maid': &#123;&#125;,</span><br><span class="line">    \ 'disable_sync_scroll': 0,</span><br><span class="line">    \ 'sync_scroll_type': 'middle',</span><br><span class="line">    \ 'hide_yaml_meta': 1</span><br><span class="line">    \ &#125;</span><br><span class="line">let g:mkdp_markdown_css = ''</span><br><span class="line">let g:mkdp_highlight_css = ''</span><br><span class="line">let g:mkdp_port = ''</span><br><span class="line">let g:mkdp_page_title = '「$&#123;name&#125;」'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" ===</span><br><span class="line">" === vim-table-mode</span><br><span class="line">" ===</span><br><span class="line">map &lt;LEADER&gt;tm :TableModeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">" ===</span><br><span class="line">" === Python-syntax</span><br><span class="line">" ===</span><br><span class="line">let g:python_highlight_all = 1</span><br><span class="line">" let g:python_slow_sync = 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" ===</span><br><span class="line">" === vim-indent-guide</span><br><span class="line">" ===</span><br><span class="line">let g:indent_guides_guide_size = 1</span><br><span class="line">let g:indent_guides_start_level = 2</span><br><span class="line">let g:indent_guides_enable_on_vim_startup = 1</span><br><span class="line">let g:indent_guides_color_change_percent = 1</span><br><span class="line">silent! unmap &lt;LEADER&gt;ig</span><br><span class="line">autocmd WinEnter * silent! unmap &lt;LEADER&gt;ig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" ===</span><br><span class="line">" === Goyo</span><br><span class="line">" ===</span><br><span class="line">map &lt;LEADER&gt;gy :Goyo&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" ===</span><br><span class="line">" === vim-signiture</span><br><span class="line">" ===</span><br><span class="line">let g:SignatureMap = &#123;</span><br><span class="line">        \ 'Leader'             :  "m",</span><br><span class="line">        \ 'PlaceNextMark'      :  "m,",</span><br><span class="line">        \ 'ToggleMarkAtLine'   :  "m.",</span><br><span class="line">        \ 'PurgeMarksAtLine'   :  "dm-",</span><br><span class="line">        \ 'DeleteMark'         :  "dm",</span><br><span class="line">        \ 'PurgeMarks'         :  "dm/",</span><br><span class="line">        \ 'PurgeMarkers'       :  "dm?",</span><br><span class="line">        \ 'GotoNextLineAlpha'  :  "m&lt;LEADER&gt;",</span><br><span class="line">        \ 'GotoPrevLineAlpha'  :  "",</span><br><span class="line">        \ 'GotoNextSpotAlpha'  :  "m&lt;LEADER&gt;",</span><br><span class="line">        \ 'GotoPrevSpotAlpha'  :  "",</span><br><span class="line">        \ 'GotoNextLineByPos'  :  "",</span><br><span class="line">        \ 'GotoPrevLineByPos'  :  "",</span><br><span class="line">        \ 'GotoNextSpotByPos'  :  "mn",</span><br><span class="line">        \ 'GotoPrevSpotByPos'  :  "mp",</span><br><span class="line">        \ 'GotoNextMarker'     :  "",</span><br><span class="line">        \ 'GotoPrevMarker'     :  "",</span><br><span class="line">        \ 'GotoNextMarkerAny'  :  "",</span><br><span class="line">        \ 'GotoPrevMarkerAny'  :  "",</span><br><span class="line">        \ 'ListLocalMarks'     :  "m/",</span><br><span class="line">        \ 'ListLocalMarkers'   :  "m?"</span><br><span class="line">        \ &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" ===</span><br><span class="line">" === Undotree</span><br><span class="line">" ===</span><br><span class="line">let g:undotree_DiffAutoOpen = 0</span><br><span class="line">map L :UndotreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>upload_files_to_NCBI</title>
    <url>/2019/12/10/upload_files_to_NCBI/</url>
    <content><![CDATA[<h2 id="上传SRA数据"><a href="#上传SRA数据" class="headerlink" title="上传SRA数据"></a>上传SRA数据</h2><p>首先访问SRA的提交界面，<a href="https://submit.ncbi.nlm.nih.gov/subs/sra/，在没有登陆NCBI时，网页内容如下所示" target="_blank" rel="noopener">https://submit.ncbi.nlm.nih.gov/subs/sra/，在没有登陆NCBI时，网页内容如下所示</a></p>
<a id="more"></a>

<p><img src="/2019/12/10/upload_files_to_NCBI/1575973302733.png" alt="1575973302733"></p>
<p>未登录时</p>
<p>点击Log in, 会进入一个新的网页用于登陆或者创建新的NCBI账户。</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575973314474.png" alt="1575973314474"></p>
<p>登陆NCBI</p>
<p>在创建完账号或者登陆之后，返回之前的SRA上传页面，界面就变成了如下。</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575973355342.png" alt="1575973355342"></p>
<p>登陆后</p>
<p>他提示了有三种方法可以递交：</p>
<ul>
<li>Aspera浏览器插件</li>
<li>Aspera命令行和FTP上传</li>
<li>Amzon S3方式</li>
</ul>
<p>个人比较喜欢用Aspera命令行的方式（FTP对于国内用户或许有点慢）</p>
<p>在Apeara命令和FPT上传选项中点击如下的蓝色小按钮</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575973366416.png" alt="1575973366416"></p>
<p>预上传文件夹</p>
<p>点击之后，页面就会发生变化，跳出每个用户专门的预上传地址，还有专门的上传说明文字。</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575973380829.png" alt="1575973380829"></p>
<p>上传地址</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575973604766.png" alt="1575973604766"></p>
<p>有了地址之后，下一步就是安装Aspera, 在<a href="https://downloads.asperasoft.com/en/downloads/8?list" target="_blank" rel="noopener">Aspera</a>上选择合适的版本，我装的就是Linux版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.asperasoft.com/download/sw/connect/3.8.1/ibm-aspera-connect-3.8.1.161274-linux-g2.12-64.tar.gz</span><br><span class="line">tar xf ibm-aspera-connect-3.8.1.161274-linux-g2.12-64.tar.gz</span><br><span class="line">./ibm-aspera-connect-3.8.1.161274-linux-g2.12-64.sh</span><br></pre></td></tr></table></figure>

<p>安装的内容存放在<code>~/.aspera/connect</code>下。所使用到的命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ascp -i &lt;path/to/key_file&gt; -QT -l100m -k1 -d &lt;path/to/folder/containing files&gt; subasp@upload.ncbi.nlm.nih.gov:uploads/每个人都不同</span><br></pre></td></tr></table></figure>

<p><code>&lt;path/to/key_file&gt;</code>要点击上图中的<code>Get the key file</code>下载，然后上传到服务器上。<br> <code>&lt;path/to/folder/containing files&gt;</code> 是你需要上传的数据的本地路径。</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575975115829.png" alt="1575975115829"></p>
<blockquote>
<p>陈宇乔chenyuqiao</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup ascp -i ~/project/up_load_to_SRA/aspera.openssh -QT -l100m -k1 -d ~/project/RNA_seq_ESCC/pengxiong_ESCC subasp@upload.ncbi.nlm.nih.gov:uploads/chenyuqiaoxy_163.com_w1XITUG6 &amp;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/12/10/upload_files_to_NCBI/1575975354140.png" alt="1575975354140"></p>
<p>所有数据上传之后，你可以点击页面的New submission创建一个新的上传任务。</p>
<p>然后就是一步一步的填写信息，将你预先上传的数据和你的项目进行关联。这里的SUBXXXX是临时的，完成上传后就自动无效，并且还可以反悔中途取消掉。</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575973424444.png" alt="1575973424444"></p>
<h2 id="SRA-metadata-数据填写"><a href="#SRA-metadata-数据填写" class="headerlink" title="SRA metadata 数据填写"></a>SRA metadata 数据填写</h2><hr>
<h3 id="填写项目信息表单的几个关键点"><a href="#填写项目信息表单的几个关键点" class="headerlink" title="填写项目信息表单的几个关键点"></a>填写项目信息表单的几个关键点</h3><p>上传数据到 SRA 稍微麻烦点的就是填写项目信息表单了，先把数据通过 FTP 上传到 SRA 服务器，然后填好项目信息表单，就成功了。</p>
<h3 id="数据属性信息格式"><a href="#数据属性信息格式" class="headerlink" title="数据属性信息格式"></a>数据属性信息格式</h3><p>填写 attributes file 时候，每一列都按照文件表头的示例格式来，没有示例格式的可以自己根据实际项目信息填写。<br> 表头绿色代表必须填写的项目（如果没有信息用 ‘not collected’，’not applicable’，’missing’ 其中一个代替 ），蓝色代表至少需要填写一栏的项目（如果没有信息用 ‘not collected’，’not applicable’，’missing’ 其中一个代替 ），黄色是可选项目（可以不填或者删除）。<br> 填写好之后，另存为 TSV 格式文本文件才能上传，否则报错：无法识别文件编码。</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/Image-20170417-001.png" alt="不同颜色 column 对应不同的要求"></p>
<p>不同颜色 column 对应不同的要求</p>
<h3 id="文件名格式"><a href="#文件名格式" class="headerlink" title="文件名格式"></a>文件名格式</h3><p>填写 SRA_metadata 的时候 sample_name 这一栏要与之前 attributes file 中天的 Biosample name （即上图中绿色的 *sample_name）一致，不是 Biosample 的编号，如果事先申请了 Bioproject 就填写，如果没有申请就空着。<br> 特别注意文件名 filename，filename2，filename3…这些栏目，文件名与需要上传的文件完全相同（包括文件拓展名），例如上传文件 S1_1.fastq.gz，S1_2.fastq.gz 就填写文件名就是 filename:S1_1.fastq.gz,filename2:S1_2.fastq.gz。但是需要注意，如果是 tar 打包的文件则需要填写打包之前的原始文件名（包括拓展名），例如 S1_1.fastq.gz，S1_2.fastq.gz 被打包在一个文件 S1.tar 里面，文件名依然要分开填写 filename:S1_1.fastq.gz,filename2:S1_2.fastq.gz。</p>
<h3 id="上传数据属性信息文件之前的格式检查"><a href="#上传数据属性信息文件之前的格式检查" class="headerlink" title="上传数据属性信息文件之前的格式检查"></a>上传数据属性信息文件之前的格式检查</h3><p>有些不用的 column 例如下图红色框中的，直接删除，防止报错。</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/Image-20170503-001.png" alt="空出来的 column 可以删除"></p>
<p>空出来的 column 可以删除</p>
<h1 id="转录组数据上传教程（SRA）"><a href="#转录组数据上传教程（SRA）" class="headerlink" title="转录组数据上传教程（SRA）"></a>转录组数据上传教程（SRA）</h1><h2 id="为什么要上传"><a href="#为什么要上传" class="headerlink" title="为什么要上传"></a>为什么要上传</h2><p>我们在投稿之前都要把数据上传才能发表。但是，数据上传如果不知道一些套路的话，会很麻烦。笔者曾经在博士期间被转录组数据上传弄得焦头烂额，直接被老板鄙视。<br> 那么，转录组数据上传到底要怎么搞呢？<br> 为了让大家不再走我的弯路，把上传的经验整理了一个教程。</p>
<h2 id="上传数据全流程"><a href="#上传数据全流程" class="headerlink" title="上传数据全流程"></a>上传数据全流程</h2><p>上传的过程比较简单，不包括上传数据的时间，大概一个小时就搞定了。</p>
<h4 id="注册帐号"><a href="#注册帐号" class="headerlink" title="注册帐号"></a>注册帐号</h4><p>上传之前首先要注册一个NCBI帐号。这个就不教了。</p>
<h4 id="新建NCBI上传"><a href="#新建NCBI上传" class="headerlink" title="新建NCBI上传"></a>新建NCBI上传</h4><p> 在NCBI的首页点Submit</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575977702735.png" alt="1575977702735"></p>
<p> 然后选择上面的SRA，千万别选错了，选成下面的SRA会很麻烦很麻烦的（别问我是怎么知道的）</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575977735647.png" alt="1575977735647"></p>
<p> 然后点New submission</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575977756445.png" alt="1575977756445"></p>
<p>image</p>
<h4 id="完成认证"><a href="#完成认证" class="headerlink" title="完成认证"></a>完成认证</h4><p> 然后会提示你完成认证，至少有一个科研单位/大学的email </p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575977772684.png" alt="1575977772684"></p>
<h4 id="完善信息"><a href="#完善信息" class="headerlink" title="完善信息"></a>完善信息</h4><p> 这两个都选NO，为了省事。</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575977788253.png" alt="1575977788253"></p>
<p> 填写相关项目信息 </p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575977799540.png" alt="1575977799540"></p>
<p> 然后选数据类型，这里我选的是plant sample </p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575977816901.png" alt="1575977816901"></p>
<p>接下来就是最关键的部分了：填写数据相关表格 </p>
<p> 填写Attributes </p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575977839002.png" alt="1575977839002"></p>
<p>具体方法可以参考我的例子或NCBI的例子，从<a href="https://link.jianshu.com?t=https%3A%2F%2Fpan.baidu.com%2Fs%2F1WtZrnHy753soYMtHwr970Q" target="_blank" rel="noopener">这里</a>下载，密码为kt79。如果不确定可以先参考下面的图片试着填一下，但是一定要注意：<strong>拉丁名</strong>一定要写对，否则可能需要至少2天才能改过来（需要NCBI人工修改）。</p>
<blockquote>
<p>chenyuqiao: 这部分已经下载在我的百度云中，文件名NCBI上传SRA</p>
</blockquote>
<p> 我的最终版本如下：</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/638619-e835d62a928787b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1087/format/webp" alt="img"></p>
<p> 然后是完成metadata的表格填写</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575977925350.png" alt="1575977925350"></p>
<p> 这一步可以参考我的最终版本(右键点开查看大图）：</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575977978469.png" alt="1575977978469"></p>
<h4 id="开始上传数据。"><a href="#开始上传数据。" class="headerlink" title="开始上传数据。"></a>开始上传数据。</h4><p> 如果数据较多就选第一个，较少就用http网页上传就可以了： </p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575978046770.png" alt="1575978046770"></p>
<p> 下面介绍如何用aspera批量上传大量数据。选中preload之后，会在下面出现相关的aspera命令和key。下载key到本地。</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575978058732.png" alt="1575978058732"></p>
<p> 以mac系统为例：下载aspera </p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575978075361.png" alt="1575978075361"></p>
<p>安装aspera之后，输入以下代码，将aspera加入到环境变量，方便使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Applications/Aspera\ Connect.app/Contents/Resources/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"alias ascp='<span class="variable">$PWD</span>/ascp'"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>





<p> 使用网页上给出的命令，上传数据（注意，-i后面是之前下载的key的绝对路径）：</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575978090921.png" alt="1575978090921"></p>
<p> 上传速度还不错，大概5min能上传2G。上传完所有的数据之后等上10-15min，可以出现下面的选项：</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575978115401.png" alt="1575978115401"></p>
<p> 注意，如果少上传了数据，NCBI会提示你继续上传；但是如果上传多了，直接点下一步就可以了，NCBI会自动忽略多余的文件：</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575978137500.png" alt="1575978137500"></p>
<h4 id="完成上传："><a href="#完成上传：" class="headerlink" title="完成上传："></a>完成上传：</h4><p> 上传完了之后，会给你一个Overview: </p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575978160392.png" alt="1575978160392"></p>
<p> 大概半小时之后，NCBI会处理你的数据：</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575978175712.png" alt="1575978175712"></p>
<h2 id="上传之后"><a href="#上传之后" class="headerlink" title="上传之后"></a>上传之后</h2><h4 id="找NCBI要review-link"><a href="#找NCBI要review-link" class="headerlink" title="找NCBI要review link"></a>找NCBI要review link</h4><p>一般，我们不会把数据上传之后立即release，所以在文章投稿的时候，需要一个review link，可以发邮件给</p>
<p><a href="mailto:sra@ncbi.nlm.nih.gov">sra@ncbi.nlm.nih.gov</a></p>
<p>，告知其内容如下(仅供参考）：</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575978214364.png" alt="1575978214364"></p>
<p> 大概1-2天之后，NCBI会给你回信：</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575978241704.png" alt="1575978241704"></p>
<p>chenyuqiao 后续填写metadata的问题</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575979858308.png" alt="1575979858308"></p>
<blockquote>
<p>可以先留白</p>
</blockquote>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575980296096.png" alt="上传完成"></p>
<p>Each row should have a unique <strong>library_id</strong> that is short and meaningful (like an ID you might use in lab).</p>
<p><strong>library_id</strong>是可以自己取名字的</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575982147972.png" alt="1575982147972"></p>
<p>要生成一个TSV格式的文件</p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575982851272.png" alt="1575982851272"></p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1575987455158.png" alt="1575987455158"></p>
<p><img src="/2019/12/10/upload_files_to_NCBI/1576043705809.png" alt="1576043705809"></p>
]]></content>
      <categories>
        <category>上传NCBI</category>
        <category>上传SRA数据</category>
      </categories>
      <tags>
        <tag>数据上传</tag>
      </tags>
  </entry>
  <entry>
    <title>配置个人服务器</title>
    <url>/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h3 id="配置个人服务器一文就够"><a href="#配置个人服务器一文就够" class="headerlink" title="配置个人服务器一文就够"></a>配置个人服务器一文就够</h3><p>包括：</p>
<p>硬盘挂载</p>
<p>进程管理</p>
<a id="more"></a>

<p><a href="https://www.bilibili.com/video/av15976434/?p=11" target="_blank" rel="noopener">安装Linux视频参考</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line"></span><br><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure>

<h5 id="了解服务器的局域网"><a href="#了解服务器的局域网" class="headerlink" title="了解服务器的局域网"></a>了解服务器的局域网</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<h5 id="通过SSH-（shell）连接服务器"><a href="#通过SSH-（shell）连接服务器" class="headerlink" title="通过SSH （shell）连接服务器"></a>通过SSH （shell）连接服务器</h5><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sudo adduser chenyuqiao</span><br><span class="line">sudo adduser -u <span class="number">504</span> -g yuqiao -d /dev5/</span><br></pre></td></tr></table></figure>

<h5 id="管理员身份安装-vim"><a href="#管理员身份安装-vim" class="headerlink" title="管理员身份安装 vim"></a>管理员身份安装 vim</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure>

<h5 id="修改服务器颜色"><a href="#修改服务器颜色" class="headerlink" title="修改服务器颜色"></a>修改服务器颜色</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###永久配置酷炫颜色</span></span></span><br><span class="line">cat &gt;&gt; .bashrc</span><br><span class="line"></span><br><span class="line">PS1='\[\e[1;35m\][\[\e[1;33m\]\u@\h \[\e[1;31m\]\w\[\e[1;35m\]]\[\e[1;36m\]\$ \[\e[0m\]'</span><br><span class="line"></span><br><span class="line">source .bashrc</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565180003041.png" alt="1565180003041"></p>
<h5 id="配置miniconda"><a href="#配置miniconda" class="headerlink" title="配置miniconda"></a>配置miniconda</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda2-4.5.11-Linux-x86_64.sh</span><br><span class="line">bash Miniconda2-4.5.11-Linux-x86_64.sh </span><br><span class="line">source .bashrc #####激活 </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>



<h5 id="conda-create-enviroment"><a href="#conda-create-enviroment" class="headerlink" title="conda create enviroment"></a>conda create enviroment</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n rna python=2 ####创建环境变量</span><br><span class="line">source activate rna ####激活环境</span><br><span class="line">conda info --envs  ####查看环境</span><br><span class="line">conda search sra-tools</span><br><span class="line">conda install -y sra-tools</span><br></pre></td></tr></table></figure>





<h5 id="关于硬盘挂载"><a href="#关于硬盘挂载" class="headerlink" title="关于硬盘挂载"></a>关于硬盘挂载</h5><p>理解sda与sdb</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll /dev/sd*</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565183251806.png" alt="1565183251806"></p>
<p>Linux系统检测到有两块物理硬盘，其中sda为SATA第一接口连接的硬盘，sdb为SATA第二接口连接的硬盘。而sda1，sda2和sd5分别表示sda硬盘的两个分区。</p>
<h5 id="查看内存的情况"><a href="#查看内存的情况" class="headerlink" title="查看内存的情况"></a>查看内存的情况</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">free df -lh # 查看内存信息</span><br></pre></td></tr></table></figure>



<p>这里是8G内存</p>
<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565183995104.png" alt="1565183995104"></p>
<h5 id="用管理员身份查看硬盘的情况"><a href="#用管理员身份查看硬盘的情况" class="headerlink" title="用管理员身份查看硬盘的情况"></a>用管理员身份查看硬盘的情况</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l # 先查看下是否有磁盘没有分区</span><br></pre></td></tr></table></figure>



<p>先查看下是否有磁盘没有分区</p>
<p>示例：</p>
<p><img src="https://img-blog.csdn.net/20130809161617015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb3Blbm4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p>
<blockquote>
<p>其中第一个框和第二个框，是已经分好区的磁盘，第三个硬盘没有分区。</p>
</blockquote>
<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565184423583.png" alt="1565184423583"></p>
<blockquote>
<p>我们自己的硬盘数据</p>
</blockquote>
<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565188675187.png" alt="1565188675187"></p>
<blockquote>
<p>其实默认已经将sdb1 分为了3个区，每个区是310G，所以电脑硬盘的总容积只有931G </p>
</blockquote>
<h5 id="开始分区"><a href="#开始分区" class="headerlink" title="开始分区"></a>开始分区</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure>

<p>输入m，可以查看有哪些操作</p>
<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565184762497.png" alt="1565184762497"></p>
<p>输入p 查看当前硬盘分区，目前没有分区。</p>
<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565184914065.png" alt="1565184914065"></p>
<blockquote>
<p>由此可见，这些硬盘都是挂载好的，不需要重新挂载</p>
</blockquote>
<p>如果需要重新挂载参考<a href="https://blog.csdn.net/pi9nc/article/details/21740319" target="_blank" rel="noopener">https://blog.csdn.net/pi9nc/article/details/21740319</a></p>
<h5 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h5><p>格式化命令：mkfs.ext3   /dev/sdb1 是格式化成 ext3</p>
<pre><code>mkfs.ext2   /dev/sdb1 是格式化成 ext2</code></pre><p>我这里使用了 mkfs.ext3 。</p>
<p>其实这个时候，建立好的分区还不能用，还需要挂载才可以用。但是挂载之前，必须要格式化，才行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext3 /dev/sdb5</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565185446438.png" alt="1565185446438"></p>
<h5 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h5><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sudo mkdir /dev5</span><br><span class="line">sudo mount /dev/sdb5 /dev5 </span><br><span class="line">sudo umount /dev/sdb5 <span class="comment"># 卸载了，其实还可以挂载，而且数据还会在的</span></span><br></pre></td></tr></table></figure>

<h5 id="查看硬盘情况"><a href="#查看硬盘情况" class="headerlink" title="查看硬盘情况"></a>查看硬盘情况</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565186683159.png" alt="1565186683159"></p>
<h5 id="继续挂载"><a href="#继续挂载" class="headerlink" title="继续挂载"></a>继续挂载</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext3 /dev/sdb6</span><br><span class="line">sudo mkdir /dev6</span><br><span class="line">sudo mount /dev/sdb6 /dev6</span><br><span class="line"></span><br><span class="line">sudo mkfs.ext3 /dev/sdb7</span><br><span class="line">sudo mkdir /dev7</span><br><span class="line">sudo mount /dev/sdb7 /dev7</span><br></pre></td></tr></table></figure>



<h5 id="硬盘挂载后最终结果"><a href="#硬盘挂载后最终结果" class="headerlink" title="硬盘挂载后最终结果"></a>硬盘挂载后最终结果</h5><h5 id><a href="#" class="headerlink" title></a></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565188891879.png" alt="1565188891879"></p>
<blockquote>
<p>可以看到60个G的固态硬盘在根目录，而900G的机械硬盘挂载在/dev5和/dev6和dev7 下面‘</p>
</blockquote>
<h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure>





<h5 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod -R 777 /dev5/</span><br></pre></td></tr></table></figure>

<p>其中<br>-R 是指级联应用到目录里的所有子目录和文件<br>777 是所有用户都拥有最高权限</p>
<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565193126940.png" alt="1565193126940"></p>
<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565193094156.png" alt="1565193094156"></p>
<h5 id="开机自动挂载硬盘"><a href="#开机自动挂载硬盘" class="headerlink" title="开机自动挂载硬盘"></a>开机自动挂载硬盘</h5><h6 id="重新分区"><a href="#重新分区" class="headerlink" title="重新分区"></a>重新分区</h6><h5 id="-1"><a href="#-1" class="headerlink" title></a></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565366144007.png" alt="1565366144007"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext3 /dev/sdb7</span><br><span class="line">sudo mkdir /home/zhuangwei/Project</span><br><span class="line">sudo mount /dev/sdb6 /home/zhuangwei/Project</span><br><span class="line">sudo umount /dev/sdb5 # 卸载了，其实还可以挂载，而且数据还会在的</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo blkid</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3dfaab43-2de4-4eb3-be5a-8ae7a7dd1f82</p>
</blockquote>
<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565366366157.png" alt="1565366366157"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br><span class="line"><span class="meta">#</span><span class="bash"> UUID=e05f9de3-a795-4e82-bf87-b97431607889 /home/zhuangwei/Project               ext4  defaults  1  1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>按照这种方法真的可以开机自动挂载成功。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod -R 777 /home/zhuangwei/Project</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565367330160.png" alt="1565367330160"></p>
<h5 id="这一部分告一段落，我很开心。"><a href="#这一部分告一段落，我很开心。" class="headerlink" title="这一部分告一段落，我很开心。"></a>这一部分告一段落，我很开心。</h5><p>最终结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -lh</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565410312140.png" alt="1565410312140"></p>
<h5 id="查看CPU的info"><a href="#查看CPU的info" class="headerlink" title="查看CPU的info"></a>查看CPU的info</h5><p>【1】 查看CPU的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;cpuinfo | grep name | cut -f2 -d: | uniq -c</span><br></pre></td></tr></table></figure>

<p>【2】查看物理cpu个数：物理核心数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep "physical id" | sort | uniq|wc -l</span><br></pre></td></tr></table></figure>

<p>【3】查看逻辑cpu的个数：逻辑cpu个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;cpuinfo | grep &quot;processor&quot; |wc -l</span><br></pre></td></tr></table></figure>

<p>【4】查看cpu是几核：cpu是8核</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;cpuinfo | grep &quot;cores&quot;|uniq</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565415518886.png" alt="1565415518886"></p>
<blockquote>
<p>AMD FX-4300</p>
<p>2核4 线程</p>
</blockquote>
<h5 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef</span><br><span class="line">kill -s 9 9383</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1566034408702.png" alt="1566034408702"></p>
<h4 id="U盘挂载"><a href="#U盘挂载" class="headerlink" title="U盘挂载"></a>U盘挂载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure>





<h2 id="挂载硬盘实战（家里的AMD电脑挂载2T硬盘）"><a href="#挂载硬盘实战（家里的AMD电脑挂载2T硬盘）" class="headerlink" title="挂载硬盘实战（家里的AMD电脑挂载2T硬盘）"></a>挂载硬盘实战（家里的AMD电脑挂载2T硬盘）</h2><p>2019-11-3 全新挂载一块一盘</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565958878762.png" alt="1565958878762"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l /dev/sda</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565954676136.png" alt="1565954676136"></p>
<h4 id="关于分区，可参考"><a href="#关于分区，可参考" class="headerlink" title="关于分区，可参考"></a>关于分区，可参考</h4><blockquote>
<p><a href="https://blog.csdn.net/openn/article/details/9856451" target="_blank" rel="noopener">https://blog.csdn.net/openn/article/details/9856451</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 /dev/sda</span><br></pre></td></tr></table></figure>

<p>很奇怪了，为什么又是sda，别的sdb and sdc 都会问句，但是sda会自动运行</p>
<p>这样还是很恐怖的，很害怕会出错</p>
<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1572776738192.png" alt="1572776738192"></p>
<p>但确实sda是4T的</p>
<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1572776818776.png" alt="1572776818776"></p>
<blockquote>
<p>这可能是因为,我把硬盘插在了sata1的接口上有关系,他会自动默认读取后,分别会显示sda,sdb,sdc,sdd,一共是四个sata 接口,我现在无从考证.但是应该是这个原因。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/partitions</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1565953602447.png" alt="1565953602447"></p>
<h5 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/sda /home/chenyuqiao/work_project</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载硬盘</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo umount /dev/sda/</span></span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1573093516491.png" alt="1573093516491"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir my_disk</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo mount /dev/sda /home/chenyuqiao/my_disk</span></span><br><span class="line">sudo chmod -R 777 /home/chenyuqiao/work_project</span><br></pre></td></tr></table></figure>



<h4 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo blkid</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/1567135050494.png" alt="1567135050494"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br><span class="line"><span class="meta">#</span><span class="bash"> UUID=<span class="string">"bad3b35d-5143-46a9-8b7d-2685a7e19c61"</span> TYPE=<span class="string">"ext4"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> UUID=bad3b35d-5143-46a9-8b7d-2685a7e19c61 /home/chenyuqiao/my_disk               ext4  defaults  1  1</span></span><br><span class="line">UUID=0af51597-9cb2-4191-8733-7a3798f591d5  /home/chenyuqiao/work_project  ext4 defaults  1  1</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UUID=ef2ac660-3ff7-4eae-8e37-ec60e5a156f7 /               ext4    errors=remount-ro 0       1</span><br><span class="line">UUID=bad3b35d-5143-46a9-8b7d-2685a7e19c61 /home/chenyuqiao/my_disk     ext4  defaults  1  1</span><br><span class="line">UUID=ec0dc026-aba5-4087-b458-45b42c7a7fe1  /home/chenyuqiao/project  ext4 defaults  1  1</span><br><span class="line">UUID=857320dd-8129-44ef-b56f-9bbec2c175df  /home/chenyuqiao/project  ext4 defaults  1  1</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod -R 777 /home/chenyuqiao/my_disk</span><br></pre></td></tr></table></figure>



<p>树莓派添加用户，并改变文件夹权限</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sudo adduser chenyuqiao</span><br><span class="line">sudo chown -R chenyuqiao /home/chenyuqiao</span><br></pre></td></tr></table></figure>



<p>删除树莓派桌面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove abiword abiword-common abiword-plugin-grammar abiword-plugin-mathview bison blueman brltty-x11 catfish elementary-icon-theme exo-utils flex gigolo gimp gimp-data gmusicbrowser gnome-icon-theme-full gnome-system-tools gnome-time-admin gnumeric gnumeric-common gnumeric-doc gstreamer0.10-gnomevfs gthumb gthumb-data gtk2-engines-pixbuf gtk2-engines-xfce indicator-application-gtk2 indicator-messages-gtk2 indicator-sound-gtk2 indicator-status-provider-pidgin leafpad libabiword-2.8 libaiksaurus-1.2-0c2a libaiksaurus-1.2-data libaiksaurusgtk-1.2-0c2a libao-common libao4 libaudio-scrobbler-perl libbabl-0.0-0 libclutter-1.0-0 libclutter-1.0-common libclutter-gtk-1.0-0 libcogl-common libcogl5 libconfig-inifiles-perl libencode-locale-perl libept1 libexo-1-0 libexo-common libfile-listing-perl libfont-afm-perl libgarcon-1-0 libgarcon-common libgdome2-0 libgdome2-cpp-smart0c2a libgegl-0.0-0 libgimp2.0 libglade2-0 libgnomevfs2-extra libgoffice-0.8-8 libgoffice-0.8-8-common libgsf-1-114 libgsf-1-common libgstreamer-perl libgtk2-notify-perl libgtk2-trayicon-perl libgtkmathview0c2a libhtml-form-perl libhtml-format-perl libhtml-parser-perl libhtml-tagset-perl libhtml-tree-perl libhttp-cookies-perl libhttp-daemon-perl libhttp-date-perl libhttp-message-perl libhttp-negotiate-perl libid3tag0 libido-0.1-0 libilmbase6 libio-socket-ssl-perl libjpeg-progs libkeybinder0 liblink-grammar4 libloudmouth1-0 liblwp-mediatypes-perl liblwp-protocol-https-perl libmad0 libmailtools-perl libnet-dbus-perl libnet-http-perl libnet-ssleay-perl liboobs-1-5 libopenexr6 libotr2 libots0 libpolkit-gtk-1-0 libsexy2 libtagc0 libthunarx-2-0 libtie-ixhash-perl libtimedate-perl libtumbler-1-0 liburi-perl libwv-1.2-3 libwww-perl libwww-robotrules-perl libxfce4ui-1-0 libxfce4util-bin libxfce4util-common libxfce4util4 libxfcegui4-4 libxfconf-0-2 libxml-parser-perl libxml-twig-perl libxml-xpath-perl libxss1 lightdm-gtk-greeter link-grammar-dictionaries-en m4 mpg321 murrine-themes orage parole pastebinit pidgin pidgin-data pidgin-libnotify pidgin-microblog pidgin-otr plymouth-theme-xubuntu-logo plymouth-theme-xubuntu-text python-configobj python-glade2 quadrapassel ristretto screensaver-default-images synaptic system-tools-backends tango-icon-theme tango-icon-theme-common tcl8.5 thunar thunar-archive-plugin thunar-data thunar-media-tags-plugin thunar-volman ttf-droid ttf-lyx tumbler tumbler-common xchat xchat-common xfburn xfce-keyboard-shortcuts xfce4-appfinder xfce4-cpugraph-plugin xfce4-dict xfce4-fsguard-plugin xfce4-indicator-plugin xfce4-mailwatch-plugin xfce4-mixer xfce4-mount-plugin xfce4-netload-plugin xfce4-notes xfce4-notes-plugin xfce4-notifyd xfce4-panel xfce4-places-plugin xfce4-power-manager xfce4-power-manager-data xfce4-quicklauncher-plugin xfce4-screenshooter xfce4-session xfce4-settings xfce4-smartbookmark-plugin xfce4-systemload-plugin xfce4-taskmanager xfce4-terminal xfce4-utils xfce4-verve-plugin xfce4-volumed xfce4-weather-plugin xfconf xfdesktop4 xfdesktop4-data xfwm4 xfwm4-themes xscreensaver xscreensaver-data xscreensaver-gl xubuntu-artwork xubuntu-default-settings xubuntu-desktop xubuntu-docs xubuntu-icon-theme xubuntu-wallpapers</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>servers</tag>
      </tags>
  </entry>
  <entry>
    <title>学会使用可视化神器maftools</title>
    <url>/2019/11/24/maftools/</url>
    <content><![CDATA[<h1 id="学会使用maftools可视化annovar的注释结果"><a href="#学会使用maftools可视化annovar的注释结果" class="headerlink" title="学会使用maftools可视化annovar的注释结果"></a>学会使用maftools可视化annovar的注释结果</h1><h4 id="一下所有的教程都是基于这个官方文档写的-其实一个官方文档就已经写的非常漂亮了，参考链接"><a href="#一下所有的教程都是基于这个官方文档写的-其实一个官方文档就已经写的非常漂亮了，参考链接" class="headerlink" title="一下所有的教程都是基于这个官方文档写的,其实一个官方文档就已经写的非常漂亮了，参考链接"></a><a href="https://bioconductor.org/packages/release/bioc/vignettes/maftools/inst/doc/maftools.html" target="_blank" rel="noopener">一下所有的教程都是基于这个官方文档写的,其实一个官方文档就已经写的非常漂亮了，参考链接</a></h4><a id="more"></a>



<h1 id="肿瘤变异数据分析和可视化工具maftools：突变的数据分析"><a href="#肿瘤变异数据分析和可视化工具maftools：突变的数据分析" class="headerlink" title="肿瘤变异数据分析和可视化工具maftools：突变的数据分析"></a>肿瘤变异数据分析和可视化工具maftools：突变的数据分析</h1><h2 id="Maftools系列文章："><a href="#Maftools系列文章：" class="headerlink" title="Maftools系列文章："></a>Maftools系列文章：</h2><blockquote>
<ol>
<li>《<a href="https://byteofbio.com/archives/15.html" target="_blank" rel="noopener">maftools使用方法总结以及常见问题</a>》</li>
<li>《<a href="https://byteofbio.com/archives/4.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：安装和文件格式要求</a>》</li>
<li>《<a href="https://byteofbio.com/archives/9.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：突变数据下载和可视化</a>》</li>
<li>《<a href="https://byteofbio.com/archives/11.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：突变的数据分析</a>》</li>
<li>《<a href="https://byteofbio.com/archives/14.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：CNV的可视化</a>》</li>
</ol>
</blockquote>
<p>上一篇文章《<a href="https://byteofbio.com/archives/9.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：突变数据下载和可视化</a>》主要以TCGA-LUAD为例介绍突变数据和临床数据的下载、处理以及简单的可视化。这篇文章更详细介绍可以利用maftools对肿瘤MAF格式的突变数据做哪些分析。</p>
<h2 id="还和上篇一样，先用maftools把数据读入"><a href="#还和上篇一样，先用maftools把数据读入" class="headerlink" title="还和上篇一样，先用maftools把数据读入"></a>还和上篇一样，先用maftools把数据读入</h2><p>具体的数据下载和处理方法这里就不再赘述了，请移步上篇文章：《<a href="https://byteofbio.com/archives/9.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：突变数据下载和可视化</a>》。这篇文章里，读入的临床数据终于可以派上用场了。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(maftools)</span><br><span class="line">luad &lt;- read.maf(maf=<span class="string">"TCGA.LUAD.maf"</span>, clinicalData=<span class="string">"clinical.tsv"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="突变的互斥性（exclusive）和共现性（Co-occurrence）分析"><a href="#突变的互斥性（exclusive）和共现性（Co-occurrence）分析" class="headerlink" title="突变的互斥性（exclusive）和共现性（Co-occurrence）分析"></a>突变的互斥性（exclusive）和共现性（Co-occurrence）分析</h2><p>使用函数<code>somaticInteractions</code>可通过对所选突变两两之间进行成对的Fisher精确检验分析突变的互斥性和共现性。此外还通过<code>cometExactTest</code>通过<a href="https://link.springer.com/article/10.1186/s13059-015-0700-7" target="_blank" rel="noopener">CoMEt检验</a>寻找包含&gt;2基因的互斥基因集。参数<code>top=30</code>用于设定队列中突变最多的30个基因。也可以用参数<code>genes</code>手动设定想要比较的基因列表。<code>pvalue</code>用来设定图中“点”和“星号”标注显著性所对应的阈值。</p>
<p>由于程序原因，直接运行<code>somaticInteractions</code>不能显示成对互斥性和共现性的结果<code>$pairs</code>，需要用一个变量（如下面的<code>output</code>）捕获该函数的返回值并运行两次才能得到<code>$pairs</code>：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; output &lt;- somaticInteractions(maf=luad, top=<span class="number">50</span>, pvalue=c(<span class="number">0.05</span>, <span class="number">0.01</span>)) <span class="comment"># 使用变量捕获函数输出</span></span><br><span class="line"><span class="comment">## Checking for Gene sets</span></span><br><span class="line"><span class="comment">## ------------------</span></span><br><span class="line"><span class="comment">## genes: 4</span></span><br><span class="line"><span class="comment">## geneset size: 3</span></span><br><span class="line"><span class="comment">## 4 combinations</span></span><br><span class="line"><span class="comment">## Signifcantly altered gene-sets: 1 </span></span><br><span class="line"><span class="comment">## ------------------</span></span><br><span class="line"></span><br><span class="line">&gt; output <span class="comment"># 第一次</span></span><br><span class="line"><span class="comment">## $pairs</span></span><br><span class="line"><span class="comment">## </span></span><br><span class="line"><span class="comment">## $gene_sets</span></span><br><span class="line"><span class="comment">##             gene_set     pvalue</span></span><br><span class="line"><span class="comment">## 1: TP53, KRAS, STK11 0.04708279</span></span><br><span class="line"></span><br><span class="line">&gt; output <span class="comment"># 第二次</span></span><br><span class="line"><span class="comment">## $pairs</span></span><br><span class="line"><span class="comment">##        gene1    gene2       pValue oddsRatio  00  11  01  10        Event</span></span><br><span class="line"><span class="comment">##    1:  XIRP2    ZFHX4 1.968494e-14  4.850686 334  80  90  61 Co_Occurance</span></span><br><span class="line"><span class="comment">##    2:  MUC16      TTN 3.880676e-14  3.817014 229 146 112  78 Co_Occurance</span></span><br><span class="line"><span class="comment">##    3:  LRP1B    MUC16 4.388807e-14  4.074352 272 114 110  69 Co_Occurance</span></span><br><span class="line"><span class="comment">##    4:   RYR2    LRP1B 6.666331e-14  4.068623 284 107  76  98 Co_Occurance</span></span><br><span class="line"><span class="comment">##    5:    TTN     RYR2 9.467845e-14  3.835079 238 136  69 122 Co_Occurance</span></span><br><span class="line"><span class="comment">##   ---                                                                    </span></span><br><span class="line"><span class="comment">## 1039: AHNAK2    RP1L1 4.506738e-02  1.853890 415  19  72  59 Co_Occurance</span></span><br><span class="line"><span class="comment">## 1040: ZNF536    SPTA1 4.702016e-02  1.613526 353  35 102  75 Co_Occurance</span></span><br><span class="line"><span class="comment">## 1041:  LRRC7     FAT4 4.792946e-02  1.807431 414  19  69  63 Co_Occurance</span></span><br><span class="line"><span class="comment">## 1042: ADGRG4 ADAMTS12 4.907451e-02  1.769172 398  23  76  68 Co_Occurance</span></span><br><span class="line"><span class="comment">## 1043:   RELN   ADGRG4 4.978755e-02  1.784468 413  19  72  61 Co_Occurance</span></span><br><span class="line"><span class="comment">## </span></span><br><span class="line"><span class="comment">## $gene_sets</span></span><br><span class="line"><span class="comment">##             gene_set     pvalue</span></span><br><span class="line"><span class="comment">## 1: TP53, KRAS, STK11 0.04708279</span></span><br></pre></td></tr></table></figure>

<p>本例中共获得1042个显著互斥/共现的突变基因对（Fisher精确检验）以及1个互斥的基因集（CoMEt检验）。注意程序输出的“occurance”存在拼写错误，应为“occurrence”。输出详细结果可以使用<code>write.table</code>写入到文件：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">write.table(output$pairs, file=<span class="string">"somaticInteractions.pairwise.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br><span class="line">write.table(output$gene_sets, file=<span class="string">"somaticInteractions.comet.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br></pre></td></tr></table></figure>

<p>生成的图以矩阵的形式展示基因对Fisher精确检验的结果。其中绿色和洋红色分别代表共现和互斥，颜色深浅代表显著性程度-log10(p-value)：</p>
<p><img src="/2019/11/24/maftools/2341581803.png" alt="maftools somaticInteractions exclusive Co-occurrence"></p>
<p>然后可以选择感兴趣的基因，使用<code>oncostrip</code>展示（当然也可以使用<code>oncoplot</code>）：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncostrip(maf=luad, genes=c(<span class="string">"TP53"</span>, <span class="string">"KRAS"</span>, <span class="string">"STK11"</span>), border=<span class="literal">NULL</span>) <span class="comment"># 这里选择了exclusive的基因集</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/466283000.png" alt="maftools oncostrip"></p>
<h2 id="预测癌症驱动基因"><a href="#预测癌症驱动基因" class="headerlink" title="预测癌症驱动基因"></a>预测癌症驱动基因</h2><p>maftools中的函数<code>oncodrive</code>基于“<a href="https://academic.oup.com/bioinformatics/article/29/18/2238/240376" target="_blank" rel="noopener">oncodriveCLUST算法</a>”可直接从MAF文件中鉴定癌症驱动基因。其原理是癌症驱动基因的突变通常富集在特定位点（热点）：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">luad.sig &lt;- oncodrive(maf=luad, minMut=<span class="number">5</span>, AACol=<span class="string">"HGVSp_Short"</span>, pvalMethod=<span class="string">"zscore"</span>)</span><br><span class="line"><span class="comment"># 将统计结果保存到文件</span></span><br><span class="line">write.table(luad.sig, file=<span class="string">"luad.oncodrive.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br><span class="line"><span class="comment"># 使用plotOncodrive函数绘制散点图</span></span><br><span class="line">plotOncodrive(res = laml.sig, fdrCutOff = <span class="number">0.1</span>, useFraction = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>

<p>图中点的大小以及基因名后的数字展示的是基因内突变cluster的数量，X轴为cluster内的突变数量或者占突变总数的比例（根据参数<code>useFraction</code>设定显示方式），Y轴是-log10(fdr)。本例（TCGA-LUAD）中鉴定到的驱动基因candidate为<em>KRAS</em>：</p>
<p><img src="/2019/11/24/maftools/4215678115.png" alt="maftools oncodrive plotOncodrive"></p>
<h2 id="pfam注释和统计"><a href="#pfam注释和统计" class="headerlink" title="pfam注释和统计"></a>pfam注释和统计</h2><p><code>pfamDomains</code>可以用来注释导致氨基酸改变的突变所在pfam结构域以及按照pfam结构域为对象的统计结果（分别储存在<code>luad.pfam$proteinSummary</code>和<code>luad.pfam$domainSummary</code>中），并绘制散点图：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">luad.pfam &lt;- pfamDomains(maf=luad, AACol=<span class="string">"HGVSp_Short"</span>, top=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>圆点代表pfam结构域，对应X轴为该结构域中出现的突变数量，Y轴以及圆点的大小为影响的基因数。参数<code>top</code>用来选择标记突变数最多的pfam domain数量。</p>
<p><img src="/2019/11/24/maftools/3240821803.png" alt="maftools pfamDomains"></p>
<p>统计结果的展示和保存：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; luad.pfam$proteinSummary[,<span class="number">1</span>:<span class="number">7</span>, with=<span class="literal">FALSE</span>]</span><br><span class="line"><span class="comment">##         HGNC AAPos Variant_Classification   N total   fraction DomainLabel</span></span><br><span class="line"><span class="comment">##      1: KRAS    12      Missense_Mutation 136   154 0.88311688     COG1100</span></span><br><span class="line"><span class="comment">##      2: EGFR   858      Missense_Mutation  23    78 0.29487179   PTKc_EGFR</span></span><br><span class="line"><span class="comment">##      3: EGFR   746           In_Frame_Del  17    78 0.21794872   PTKc_EGFR</span></span><br><span class="line"><span class="comment">##      4: TP53   273      Missense_Mutation  10   281 0.03558719         P53</span></span><br><span class="line"><span class="comment">##      5: TP53   249      Missense_Mutation  10   281 0.03558719         P53</span></span><br><span class="line"><span class="comment">##     ---                                                                   </span></span><br><span class="line"><span class="comment">## 138224:   pk   753      Missense_Mutation   1     6 0.16666667        &lt;NA&gt;</span></span><br><span class="line"><span class="comment">## 138225:   pk   543      Missense_Mutation   1     6 0.16666667        &lt;NA&gt;</span></span><br><span class="line"><span class="comment">## 138226:   pk   735      Missense_Mutation   1     6 0.16666667        &lt;NA&gt;</span></span><br><span class="line"><span class="comment">## 138227:   pk   316      Missense_Mutation   1     6 0.16666667        &lt;NA&gt;</span></span><br><span class="line"><span class="comment">## 138228:   pk   313      Missense_Mutation   1     6 0.16666667        &lt;NA&gt;</span></span><br><span class="line"></span><br><span class="line">&gt; luad.pfam$domainSummary[,<span class="number">1</span>:<span class="number">3</span>, with=<span class="literal">FALSE</span>]</span><br><span class="line"><span class="comment">##           DomainLabel nMuts nGenes</span></span><br><span class="line"><span class="comment">##    1:           7tm_1  4740    573</span></span><br><span class="line"><span class="comment">##    2: Cadherin_repeat  1925    109</span></span><br><span class="line"><span class="comment">##    3:         COG5048  1760    408</span></span><br><span class="line"><span class="comment">##    4:             FN3  1290    138</span></span><br><span class="line"><span class="comment">##    5:           I-set   878    115</span></span><br><span class="line"><span class="comment">##   ---                             </span></span><br><span class="line"><span class="comment">## 6734:  zf-Sec23_Sec24     1      1</span></span><br><span class="line"><span class="comment">## 6735:         zf-ZPR1     1      1</span></span><br><span class="line"><span class="comment">## 6736:      zf-piccolo     1      1</span></span><br><span class="line"><span class="comment">## 6737:      zf-primase     1      1</span></span><br><span class="line"><span class="comment">## 6738:         zf-rbx1     1      1</span></span><br><span class="line"></span><br><span class="line">&gt; write.table(luad.pfam$proteinSummary, file=<span class="string">"pfam_protsum.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br><span class="line">&gt; write.table(luad.pfam$domainSummary, file=<span class="string">"pfam_domainsum.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="泛癌的比较分析"><a href="#泛癌的比较分析" class="headerlink" title="泛癌的比较分析"></a>泛癌的比较分析</h2><p><code>pancanComparison</code>函数可以将给定的队列和21个癌症队列中高频突变的基因（<a href="https://www.nature.com/articles/nature12912" target="_blank" rel="noopener">参考文献</a>）进行比较，从而分析给定队列中特异性的突变。做这个分析需要用到MutSigCV的结果。<strong>（略，有时间再补充）</strong></p>
<h2 id="生存分析"><a href="#生存分析" class="headerlink" title="生存分析"></a>生存分析</h2><p>使用函数<code>mafSurvival</code>可以利用突变和临床数据绘制Kaplan-Meier曲线（KM曲线）进行生存分析。临床数据的处理请翻看上篇文章《<a href="https://byteofbio.com/archives/9.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：突变数据下载和可视化</a>》。参数<code>genes</code>用于选定基因，<code>time</code>设定临床数据中保存随访时间的字段，<code>Status</code>设定临床数据中存放生存状态的。</p>
<p>参数<code>isTCGA</code>在这里设定数据是否来自TCGA。如果设定为<code>TRUE</code>，程序会将临床数据中”Tumor_Sample_Barcode”字段前12个字符截取出来和MAF文件进行匹配。因为我在上篇文章中通过一个Python脚本<code>tcga_format.py</code>已经做过这个处理了，所以这里是否设定<code>TRUE</code>都可以（未免麻烦，建议这么做）。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mafSurvival(maf=luad, genes=c(<span class="string">"TP53"</span>, <span class="string">"TTN"</span>, <span class="string">"MUC16"</span>), time=<span class="string">"days_to_last_follow_up"</span>, Status=<span class="string">"days_to_death"</span>, isTCGA=<span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>

<p>输出突变/野生型样本数量、生存时间中位数等信息：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Looking for clinical data in annoatation slot of MAF..</span></span><br><span class="line"><span class="comment">## Number of mutated samples for given genes: </span></span><br><span class="line"><span class="comment">##  TP53   TTN MUC16 </span></span><br><span class="line"><span class="comment">##   270   258   224 </span></span><br><span class="line"><span class="comment">## Median survival..</span></span><br><span class="line"><span class="comment">##     Group medianTime   N</span></span><br><span class="line"><span class="comment">## 1: Mutant        606 414</span></span><br><span class="line"><span class="comment">## 2:     WT        704 153</span></span><br><span class="line"><span class="comment">## Removed 178 samples with NA's</span></span><br></pre></td></tr></table></figure>

<p>KM曲线和logrank test：</p>
<p><img src="/2019/11/24/maftools/2433201063.png" alt="maftools,mafSurvival,survival analysis,logrank test"></p>
<h2 id="比较两个MAF文件（队列）"><a href="#比较两个MAF文件（队列）" class="headerlink" title="比较两个MAF文件（队列）"></a>比较两个MAF文件（队列）</h2><p>函数<code>mafCompare</code>通过对两个队列的MAF文件中所有基因进行Fisher精确检验检测差异突变基因。Maftools官方文档给了一个例子是Acute Promyelocytic Leukemia（APL，急性早幼粒细胞白血病）在不同分期两个队列中的差异突变基因。2016年<a href="https://www.sciencedirect.com/science/article/pii/S1535610816301118" target="_blank" rel="noopener">发表在Cancer Cell上的一篇文章</a>中分析了癌症中的性别差异。其中LUAD也是性别偏好性明显的癌症类别。这里我拿不同性别的TCGA-LUAD进行比较分析：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从临床数据中提取性别对应的"Tumor_Sample_Barcode"</span></span><br><span class="line">clin &lt;- read.table(<span class="string">"clinical.tsv"</span>, header=<span class="literal">T</span>, sep=<span class="string">"\t"</span>)</span><br><span class="line">clin.female &lt;- subset(clin, gender==<span class="string">"female"</span>)$Tumor_Sample_Barcode</span><br><span class="line">clin.male &lt;- subset(clin, gender==<span class="string">"male"</span>)$Tumor_Sample_Barcode</span><br><span class="line"><span class="comment"># 使用subsetMaf构建男性和女性的MAF对象</span></span><br><span class="line">luad.female &lt;- subsetMaf(maf=luad, tsb=clin.female, isTCGA=<span class="literal">TRUE</span>)</span><br><span class="line"><span class="comment"># 使用mafCompare比较差异突变基因</span></span><br><span class="line">fvsm &lt;- mafCompare(m1=luad.female, m2=luad.male, m1Name=<span class="string">"Female"</span>, m2Name=<span class="string">"Male"</span>, minMut=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 结果保存到文件"female_vs_male.tsv"</span></span><br><span class="line">write.table(fvsm$results, file=<span class="string">"female_vs_male.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-绘制森林图"><a href="#1-绘制森林图" class="headerlink" title="1. 绘制森林图"></a>1. 绘制森林图</h3><p>续上一个例子，用forestPlot可以绘制森林图展示分析结果：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">forestPlot(mafCompareRes=fvsm, pVal=<span class="number">0.001</span>, color=c(<span class="string">"maroon"</span>, <span class="string">"royalblue"</span>), geneFontSize=<span class="number">0.8</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/908294149.png" alt="maftools forestPlot"></p>
<h3 id="2-比较两个队列的oncoplot"><a href="#2-比较两个队列的oncoplot" class="headerlink" title="2. 比较两个队列的oncoplot"></a>2. 比较两个队列的oncoplot</h3><p>使用<code>coOncoplot</code>并排绘制两个队列的oncoplot：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">genes &lt;- c(<span class="string">"PCDH11Y"</span>, <span class="string">"HTATSF1"</span>, <span class="string">"WWC3"</span>, <span class="string">"DMD"</span>, <span class="string">"PLXNB3"</span>, <span class="string">"AMER"</span>, <span class="string">"MCF2"</span>, <span class="string">"FLNA"</span>)</span><br><span class="line">coOncoplot(m1=luad.female, m2=luad.male, m1Name=<span class="string">"Female"</span>, m2Name=<span class="string">"male"</span>, genes=genes)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/745670644.png" alt="maftools coOncoplot"></p>
<h3 id="3-比较两个队列的棒棒糖图"><a href="#3-比较两个队列的棒棒糖图" class="headerlink" title="3. 比较两个队列的棒棒糖图"></a>3. 比较两个队列的棒棒糖图</h3><p>使用<code>lollipopPlot2</code>比较两个队列突变位点和类型：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">lollipopPlot2(m1=luad.female, m2=luad.male, m1_name=<span class="string">"Female"</span>, m2_name=<span class="string">"Male"</span>, gene=<span class="string">"IQGAP2"</span>, AACol1 = <span class="string">"HGVSp_Short"</span>, AACol2 = <span class="string">"HGVSp_Short"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/4171903635.png" alt="maftools lollipopPlot2"></p>
<h2 id="临床富集分析"><a href="#临床富集分析" class="headerlink" title="临床富集分析"></a>临床富集分析</h2><p><code>clinicalEnrichment</code>可用于做临床数据的富集分析（突变富集在哪些临床特征上），和上面例子类似，这里对性别进行富集：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">clin_enrich &lt;- clinicalEnrichment(maf=luad, clinicalFeature=<span class="string">"gender"</span>)</span><br></pre></td></tr></table></figure>

<p><code>clinicalEnrichment</code>会进行两两配对（比如female vs male）和分组的Fisher精确检验（female vs rest），结果分别储存于<code>$pairwise_comparision</code>和<code>$groupwise_comparision</code>之中。这里就不贴返回结果了，用writetable保存到文件：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">write.table(clin_enrich$pairwise_comparision, file=<span class="string">"clin_enrich_pair.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br><span class="line">write.table(clin_enrich$groupwise_comparision, file=<span class="string">"clin_enrich_group.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br></pre></td></tr></table></figure>

<p>绘制富集结果，<code>pVal</code>用来控制输出pvalue的阈值，似乎目前还不能按照fdr进行筛选：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">plotEnrichmentResults(enrich_res=clin_enrich, pVal=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/1124839463.png" alt="maftools clinicalEnrichment plotEnrichmentResults"></p>
<p>这里的分析做得比较粗糙，因为没有去掉未报道性别的case，建议先对临床特征进行筛选再使用，否则会影响groupwise的结果。</p>
<h2 id="药物基因互作"><a href="#药物基因互作" class="headerlink" title="药物基因互作"></a>药物基因互作</h2><p><code>drugInteractions</code>函数可以通过查询编译到maftools中的<a href="http://www.dgidb.org/" target="_blank" rel="noopener">Drug Gene Interaction database</a>分析基因的成药性（gene druggability）以及药物和基因间的互作。<strong>注意：本函数用到的数据来源为纯科研用途，不构成医疗建议。</strong></p>
<h3 id="1-基因的成药性"><a href="#1-基因的成药性" class="headerlink" title="1. 基因的成药性"></a>1. 基因的成药性</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">druggability &lt;- drugInteractions(maf=luad)</span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">write.table(druggability, file=<span class="string">"druggability.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/2397203106.png" alt="maftools,drugInteractions,gene druggability"></p>
<p>图中展示潜在的可成药基因分类，每个分类后面中括号里的是前5的基因，少于5个就全部显示。Y轴为可成药基因分类中的基因数量。</p>
<h3 id="2-药物和基因间互作"><a href="#2-药物和基因间互作" class="headerlink" title="2. 药物和基因间互作"></a>2. 药物和基因间互作</h3><p>通过给定基因或基因列表，查询相应互作的药物：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">kras &lt;- drugInteractions(genes=<span class="string">"KRAS"</span>, drugs=<span class="literal">TRUE</span>)</span><br><span class="line"><span class="comment"># 展示其中部分列</span></span><br><span class="line">kras[,.(Gene, interaction_types, drug_name, drug_claim_name)]</span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">write.table(kras, file=<span class="string">"kras_drug.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">##      Gene interaction_types    drug_name drug_claim_name</span></span><br><span class="line"><span class="comment">##   1: KRAS                   LENALIDOMIDE    lenalidomide</span></span><br><span class="line"><span class="comment">##   2: KRAS                    IMGATUZUMAB           GA201</span></span><br><span class="line"><span class="comment">##   3: KRAS                                           3144</span></span><br><span class="line"><span class="comment">##   4: KRAS                    SELUMETINIB     Selumetinib</span></span><br><span class="line"><span class="comment">##   5: KRAS                     BUPARLISIB          BKM120</span></span><br><span class="line"><span class="comment">##  ---                                                    </span></span><br><span class="line"><span class="comment">## 291: KRAS                    GEDATOLISIB     Gedatolisib</span></span><br><span class="line"><span class="comment">## 292: KRAS                                       XMT-1536</span></span><br><span class="line"><span class="comment">## 293: KRAS                    GEMCITABINE     Gemcitabine</span></span><br><span class="line"><span class="comment">## 294: KRAS                     NAVITOCLAX         ABT-263</span></span><br><span class="line"><span class="comment">## 295: KRAS                         PA-799       CH5132799</span></span><br></pre></td></tr></table></figure>

<h2 id="致癌信号通路"><a href="#致癌信号通路" class="headerlink" title="致癌信号通路"></a>致癌信号通路</h2><p><code>OncogenicPathways</code>函数可以分析<a href="https://www.sciencedirect.com/science/article/pii/S0092867418303593" target="_blank" rel="noopener">TCGA中已知的10个致癌信号通路</a>中基因突变的数量和比例。包括cell cycle, Hippo, Myc, Notch, Nrf2, PI-3-Kinase/Akt, RTK-RAS, TGFβ signaling, p53 and β-catenin/Wnt：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">OncogenicPathways(maf=luad)</span><br></pre></td></tr></table></figure>

<p>输出致癌信号通路基因突变统计：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Pathway alteration fractions</span></span><br><span class="line"><span class="comment">##        Pathway  N n_affected_genes fraction_affected</span></span><br><span class="line"><span class="comment">##  1:    RTK-RAS 85               81         0.9529412</span></span><br><span class="line"><span class="comment">##  2:        WNT 68               64         0.9411765</span></span><br><span class="line"><span class="comment">##  3:      NOTCH 71               61         0.8591549</span></span><br><span class="line"><span class="comment">##  4:      Hippo 38               36         0.9473684</span></span><br><span class="line"><span class="comment">##  5:       PI3K 29               28         0.9655172</span></span><br><span class="line"><span class="comment">##  6: Cell_Cycle 15               12         0.8000000</span></span><br><span class="line"><span class="comment">##  7:        MYC 13               11         0.8461538</span></span><br><span class="line"><span class="comment">##  8:   TGF-Beta  7                7         1.0000000</span></span><br><span class="line"><span class="comment">##  9:       TP53  6                6         1.0000000</span></span><br><span class="line"><span class="comment">## 10:       NRF2  3                3         1.0000000</span></span><br></pre></td></tr></table></figure>

<p>绘制的散点图：</p>
<p><img src="/2019/11/24/maftools/3612972268.png" alt="maftools OncogenicPathways"></p>
<p><code>PlotOncogenicPathways</code>函数也可以用瀑布图的形式展示某个pathway所有基因的图片情况，其中红色标注的基因为抑癌基因，蓝色标注的为致癌基因：</p>
<p><img src="/2019/11/24/maftools/3096055403.png" alt="maftools PlotOncogenicPathways"></p>
<h2 id="肿瘤异质性和MATH-score"><a href="#肿瘤异质性和MATH-score" class="headerlink" title="肿瘤异质性和MATH score"></a>肿瘤异质性和MATH score</h2><h3 id="1-肿瘤样品的异质性"><a href="#1-肿瘤样品的异质性" class="headerlink" title="1. 肿瘤样品的异质性"></a>1. 肿瘤样品的异质性</h3><p>肿瘤通常是异质性的，包含多种克隆。通过对<a href="https://byteofbio.com/archives/7.html" target="_blank" rel="noopener">等位基因频率VAF</a>的聚类可以推断肿瘤的异质性。函数<code>inferHeterogeneity</code>可以实现这个功能（需要调用<code>mclust</code>）：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定Tumor_Sample_Barcodes为"TCGA-55-7283"</span></span><br><span class="line">vafclust &lt;- inferHeterogeneity(maf=luad, tsb=<span class="string">"TCGA-55-7283"</span>)</span><br><span class="line"><span class="comment"># 保存结果到文件</span></span><br><span class="line">write.table(vafclust$clusterData, file=<span class="string">"vaf_clustdata.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br><span class="line">write.table(vafclust$clusterMeans, file=<span class="string">"vaf_clustmean.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果中各突变基因VAF的数据储存在<code>$clusterData</code>中，聚类数量和平均VAF储存在<code>$clusterMeans</code>中。用<code>plotClusters</code>函数展示聚类结果：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">plotClusters(clusters=vafclust)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/3762535478.png" alt="maftools inferHeterogeneity plotClusters"></p>
<p>可以看到聚成两类，说明可能存在两种克隆。图上方的箱线图展示聚类中的数据分布。除了聚类的方法，还有一种用来量化肿瘤异质性的方式叫做”<a href="https://www.sciencedirect.com/science/article/abs/pii/S1368837512002977" target="_blank" rel="noopener">MATH score</a>“，用来计算VAF分布的宽度（即离散程度）。通常很高的MATH score与更差的预后相关。</p>
<h3 id="2-排除发生了拷贝数变异的突变基因"><a href="#2-排除发生了拷贝数变异的突变基因" class="headerlink" title="2. 排除发生了拷贝数变异的突变基因"></a>2. 排除发生了拷贝数变异的突变基因</h3><p>因为突变基因的CNV会影响到VAF的计算，因此在做聚类之前最好最好排除这部分基因。我们需要在TCGA上下载样品对应的DNACopy生成的Copy Number Segment文件。并把”GDC_Aliquot”字段替换为”Sample”，该列内容也替换为对应的Tumor_Sample_Barcodes。这里以TCGA-38-4625为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/GDC_Aliquot/Sample/g'</span> LOOBY_p_TCGAb58_SNP_N_GenomeWideSNP_6_E04_680252.nocnv_grch38.seg.v2.txt | sed <span class="string">'s/d0597d1</span></span><br><span class="line"><span class="string">4-df0c-413b-888f-53597d1fb61a/TCGA-38-4625/g'</span> &gt; TCGA-38-4625.seg</span><br></pre></td></tr></table></figure>

<p>重新运行<code>inferHeterogeneity</code>和<code>plotClusters</code></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">vafclust &lt;- inferHeterogeneity(maf=luad, tsb=<span class="string">"TCGA-38-4625"</span>, segFile=<span class="string">"TCGA-38-4625.seg"</span>)</span><br><span class="line">plotClusters(clusters=vafclust, genes=<span class="string">'CN_altered'</span>, showCNvars=<span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>

<p><code>inferHeterogeneity</code>将根据读入的Segment文件去掉没有CNV数据的突变并标记存在CNV的突变。</p>
<p><img src="/2019/11/24/maftools/2634720578.png" alt="maftools inferHeterogeneity plotClusters CNV"></p>
<h2 id="突变特征"><a href="#突变特征" class="headerlink" title="突变特征"></a>突变特征</h2><h3 id="1-构建突变矩阵-amp-计算APOBEC-enrichment-score"><a href="#1-构建突变矩阵-amp-计算APOBEC-enrichment-score" class="headerlink" title="1. 构建突变矩阵 &amp; 计算APOBEC enrichment score"></a>1. 构建突变矩阵 &amp; 计算APOBEC enrichment score</h3><p>分析突变特征需要读入突变位点上下游的序列构建突变矩阵，因此需要使用到全基因组序列。这里因为作为案例的TCGA-LUAD使用的参考基因组是hg38，因此使用”BSgenome.Hsapiens.UCSC.hg38”，如果参考基因组为hg19，则用对应的”BSgenome.Hsapiens.UCSC.hg19”：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">BiocManager::install(<span class="string">"BSgenome.Hsapiens.UCSC.hg38"</span>)</span><br><span class="line"><span class="keyword">library</span>(BSgenome.Hsapiens.UCSC.hg38, quietly=<span class="literal">TRUE</span>)</span><br><span class="line"><span class="comment"># 预测APOBEC enrichment scores &amp; 构建用于突变特征分析的突变矩阵</span></span><br><span class="line">luad.tnm &lt;- trinucleotideMatrix(maf=luad, ref_genome=<span class="string">"BSgenome.Hsapiens.UCSC.hg38"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-APOBEC富集和非富集样品差异"><a href="#2-APOBEC富集和非富集样品差异" class="headerlink" title="2. APOBEC富集和非富集样品差异"></a>2. APOBEC富集和非富集样品差异</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">apobec_enrich &lt;- plotApobecDiff(tnm=luad.tnm, maf=luad)</span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">write.table(apobec_enrich$results, file=<span class="string">"apobec_result.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br><span class="line">write.table(apobec_enrich$SampleSummary, file=<span class="string">"apobec_sum.tsv"</span>, quote=<span class="literal">FALSE</span>, row.names=<span class="literal">FALSE</span>, sep=<span class="string">"\t"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/2729101926.png" alt="maftools plotApobecDiff APOBEC"></p>
<h3 id="3-突变特征分析"><a href="#3-突变特征分析" class="headerlink" title="3. 突变特征分析"></a>3. 突变特征分析</h3><p><code>extractSignatures</code>函数用于从96种替换类型中提取突变特征。这里<code>nTry=6</code>设定尝试n的最大值，程序将调用<code>NMF</code>计算cophenetic correlation coefficient并选取最合适的值。<strong>因为内存消耗太大，后面的例子都没跑通，有时间再补上：</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(<span class="string">"NMF"</span>)</span><br><span class="line">luad.sign &lt;- extractSignatures(mat=luad.tnm, nTry=<span class="number">6</span>, plotBestFitRes=<span class="literal">FALSE</span>)</span><br><span class="line">plotSignatures(luad.sign)</span><br></pre></td></tr></table></figure>

<p>绘制成热图：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(<span class="string">'pheatmap'</span>)</span><br><span class="line">pheatmap::pheatmap(mat=luad.sign$coSineSimMat, cluster_rows=<span class="literal">FALSE</span>, main=<span class="string">"cosine similarity against validated signatures"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-突变特征富集分析"><a href="#4-突变特征富集分析" class="headerlink" title="4. 突变特征富集分析"></a>4. 突变特征富集分析</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">luad.se &lt;- signatureEnrichment(maf=luad, sig_res=luad.sign)</span><br><span class="line">plotEnrichmentResults(enrich_res=luad.se, pVal=<span class="number">0.05</span>)</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://www.bioconductor.org/packages/release/bioc/vignettes/maftools/inst/doc/maftools.html" target="_blank" rel="noopener">https://www.bioconductor.org/packages/release/bioc/vignettes/maftools/inst/doc/maftools.html</a></p>
</blockquote>
<h4 id="oncoplot请参考"><a href="#oncoplot请参考" class="headerlink" title="oncoplot请参考"></a><a href="http://bioconductor.org/packages/devel/bioc/vignettes/maftools/inst/doc/oncoplots.html" target="_blank" rel="noopener">oncoplot请参考</a></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oncoplot(maf, top = 20, genes = NULL, altered = FALSE,</span><br><span class="line">  mutsig = NULL, mutsigQval = 0.1, drawRowBar = TRUE,</span><br><span class="line">  drawColBar = TRUE, includeColBarCN = TRUE, draw_titv = FALSE,</span><br><span class="line">  logColBar = FALSE, clinicalFeatures = NULL, exprsTbl = NULL,</span><br><span class="line">  additionalFeature = NULL, additionalFeaturePch = 20,</span><br><span class="line">  additionalFeatureCol = "white", additionalFeatureCex = 0.9,</span><br><span class="line">  annotationDat = NULL, annotationColor = NULL, genesToIgnore = NULL,</span><br><span class="line">  showTumorSampleBarcodes = FALSE, barcode_mar = 4, gene_mar = 5,</span><br><span class="line">  removeNonMutated = TRUE, fill = TRUE, cohortSize = NULL,</span><br><span class="line">  colors = NULL, sortByMutation = FALSE, sortByAnnotation = FALSE,</span><br><span class="line">  numericAnnoCol = NULL, groupAnnotationBySize = TRUE,</span><br><span class="line">  annotationOrder = NULL, keepGeneOrder = FALSE,</span><br><span class="line">  GeneOrderSort = TRUE, sampleOrder = NULL, writeMatrix = FALSE,</span><br><span class="line">  sepwd_genes = 0.5, sepwd_samples = 0.25, fontSize = 0.8,</span><br><span class="line">  SampleNamefontSize = 1, showTitle = TRUE, titleFontSize = 1.5,</span><br><span class="line">  legendFontSize = 1.2, annotationFontSize = 1.2, bgCol = "#CCCCCC",</span><br><span class="line">  borderCol = "white", colbar_pathway = FALSE)</span><br></pre></td></tr></table></figure>



<h2 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h2><table>
<thead>
<tr>
<th><code>maf</code></th>
<th>an <code>MAF</code> object generated by <code>read.maf</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>top</code></td>
<td>how many top genes to be drawn. defaults to 20.</td>
</tr>
<tr>
<td><code>genes</code></td>
<td>Just draw oncoplot for these genes. Default NULL.</td>
</tr>
<tr>
<td><code>altered</code></td>
<td>Default FALSE. Chooses top genes based on muatation status. If <code>TRUE</code> chooses top genes based alterations (CNV or mutation).</td>
</tr>
<tr>
<td><code>mutsig</code></td>
<td>Mutsig resuts if availbale. Usually file named sig_genes.txt If provided plots significant genes and correpsonding Q-values as side row-bar. Default NULL.</td>
</tr>
<tr>
<td><code>mutsigQval</code></td>
<td>Q-value to choose significant genes from mutsig results. Default 0.1</td>
</tr>
<tr>
<td><code>drawRowBar</code></td>
<td>logical plots barplot for each gene. Default <code>TRUE</code>.</td>
</tr>
<tr>
<td><code>drawColBar</code></td>
<td>logical plots barplot for each sample. Default <code>TRUE</code>.</td>
</tr>
<tr>
<td><code>includeColBarCN</code></td>
<td>Whether to include CN in column bar plot. Default TRUE</td>
</tr>
<tr>
<td><code>draw_titv</code></td>
<td>logical Includes TiTv plot. <code>FALSE</code></td>
</tr>
<tr>
<td><code>logColBar</code></td>
<td>Plot top bar plot on log10 scale. Default <code>FALSE</code>.</td>
</tr>
<tr>
<td><code>clinicalFeatures</code></td>
<td>columns names from ‘clinical.data’ slot of <code>MAF</code> to be drawn in the plot. Dafault NULL.</td>
</tr>
<tr>
<td><code>exprsTbl</code></td>
<td>Expression values if availble. Must be a data.frame with two columns containing to gene names and expression values.</td>
</tr>
<tr>
<td><code>additionalFeature</code></td>
<td>a vector of length two indicating column name in the MAF and the factor level to be highlighted.</td>
</tr>
<tr>
<td><code>additionalFeaturePch</code></td>
<td>Default 20</td>
</tr>
<tr>
<td><code>additionalFeatureCol</code></td>
<td>Default “white”</td>
</tr>
<tr>
<td><code>additionalFeatureCex</code></td>
<td>Default 0.9</td>
</tr>
<tr>
<td><code>annotationDat</code></td>
<td>If MAF file was read without clinical data, provide a custom <code>data.frame</code> with a column <code>Tumor_Sample_Barcode</code> containing sample names along with rest of columns with annotations. You can specify which columns to be drawn using ‘clinicalFeatures’ argument.</td>
</tr>
<tr>
<td><code>annotationColor</code></td>
<td>Custom colors to use for ‘clinicalFeatures’. Must be a named list containing a named vector of colors. Default NULL. See example for more info.</td>
</tr>
<tr>
<td><code>genesToIgnore</code></td>
<td>do not show these genes in Oncoplot. Default NULL.</td>
</tr>
<tr>
<td><code>showTumorSampleBarcodes</code></td>
<td>logical to include sample names.</td>
</tr>
<tr>
<td><code>barcode_mar</code></td>
<td>Default 4</td>
</tr>
<tr>
<td><code>gene_mar</code></td>
<td>Default 5</td>
</tr>
<tr>
<td><code>removeNonMutated</code></td>
<td>Logical. If <code>TRUE</code> removes samples with no mutations in the oncoplot for better visualization. Default <code>TRUE</code>.</td>
</tr>
<tr>
<td><code>fill</code></td>
<td>Logical. If <code>TRUE</code> draws genes and samples as blank grids even when they are not altered.</td>
</tr>
<tr>
<td><code>cohortSize</code></td>
<td>Number of sequenced samples in the cohort. Default all samples from Cohort. You can manually specify the cohort size. Default <code>NULL</code></td>
</tr>
<tr>
<td><code>colors</code></td>
<td>named vector of colors for each Variant_Classification.</td>
</tr>
<tr>
<td><code>sortByMutation</code></td>
<td>Force sort matrix according mutations. Helpful in case of MAF was read along with copy number data. Default FALSE.</td>
</tr>
<tr>
<td><code>sortByAnnotation</code></td>
<td>logical sort oncomatrix (samples) by provided ‘clinicalFeatures’. Sorts based on first ‘clinicalFeatures’. Defaults to FALSE. column-sort</td>
</tr>
<tr>
<td><code>numericAnnoCol</code></td>
<td>color palette used for numeric annotations. Default ‘YlOrBr’ from RColorBrewer</td>
</tr>
<tr>
<td><code>groupAnnotationBySize</code></td>
<td>Further group ‘sortByAnnotation’ orders by their size. Defaults to TRUE. Largest groups comes first.</td>
</tr>
<tr>
<td><code>annotationOrder</code></td>
<td>Manually specify order for annotations. Works only for first ‘clinicalFeatures’. Default NULL.</td>
</tr>
<tr>
<td><code>keepGeneOrder</code></td>
<td>logical whether to keep order of given genes. Default FALSE, order according to mutation frequency</td>
</tr>
<tr>
<td><code>GeneOrderSort</code></td>
<td>logical this is applicable when ‘keepGeneOrder’ is TRUE. Default TRUE</td>
</tr>
<tr>
<td><code>sampleOrder</code></td>
<td>Manually speify sample names for oncolplot ordering. Default NULL.</td>
</tr>
<tr>
<td><code>writeMatrix</code></td>
<td>writes character coded matrix used to generate the plot to an output file.</td>
</tr>
<tr>
<td><code>sepwd_genes</code></td>
<td>Default 0.5</td>
</tr>
<tr>
<td><code>sepwd_samples</code></td>
<td>Default 0.25</td>
</tr>
<tr>
<td><code>fontSize</code></td>
<td>font size for gene names. Default 0.8.</td>
</tr>
<tr>
<td><code>SampleNamefontSize</code></td>
<td>font size for sample names. Default 1</td>
</tr>
<tr>
<td><code>showTitle</code></td>
<td>Default TRUE</td>
</tr>
<tr>
<td><code>titleFontSize</code></td>
<td>font size for title. Default 1.5</td>
</tr>
<tr>
<td><code>legendFontSize</code></td>
<td>font size for legend. Default 1.2</td>
</tr>
<tr>
<td><code>annotationFontSize</code></td>
<td>font size for annotations. Default 1.2</td>
</tr>
<tr>
<td><code>bgCol</code></td>
<td>Background grid color for wild-type (not-mutated) samples. Default gray - “#CCCCCC”</td>
</tr>
<tr>
<td><code>borderCol</code></td>
<td>border grid color (not-mutated) samples. Default ‘white’.</td>
</tr>
<tr>
<td><code>colbar_pathway</code></td>
<td>Draw top column bar with respect to diplayed pathway. Default FALSE.</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">laml.maf &lt;- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")</span><br><span class="line">laml.clin = system.file('extdata', 'tcga_laml_annot.tsv', package = 'maftools')</span><br><span class="line">laml &lt;- read.maf(maf = laml.maf, clinicalData = laml.clin)</span><br><span class="line"><span class="meta">#</span><span class="bash">Basic onocplot</span></span><br><span class="line">oncoplot(maf = laml, top = 3)</span><br><span class="line"><span class="meta">#</span><span class="bash">Changing colors <span class="keyword">for</span> variant classifications (You can use any colors, here <span class="keyword">in</span> this example we will use a color palette from RColorBrewer)</span></span><br><span class="line">col = RColorBrewer::brewer.pal(n = 8, name = 'Paired')</span><br><span class="line">names(col) = c('Frame_Shift_Del','Missense_Mutation', 'Nonsense_Mutation', 'Multi_Hit', 'Frame_Shift_Ins',</span><br><span class="line">               'In_Frame_Ins', 'Splice_Site', 'In_Frame_Del')</span><br><span class="line"><span class="meta">#</span><span class="bash">Color coding <span class="keyword">for</span> FAB classification; try getAnnotations(x = laml) to see available annotations.</span></span><br><span class="line">fabcolors = RColorBrewer::brewer.pal(n = 8,name = 'Spectral')</span><br><span class="line">names(fabcolors) = c("M0", "M1", "M2", "M3", "M4", "M5", "M6", "M7")</span><br><span class="line">fabcolors = list(FAB_classification = fabcolors)</span><br><span class="line">oncoplot(maf = laml, colors = col, clinicalFeatures = 'FAB_classification', sortByAnnotation = TRUE, annotationColor = fabcolors)</span><br></pre></td></tr></table></figure>



<p>所有的变换都可以用这个官方文档来实现</p>
<h2 id><a href="#" class="headerlink" title></a></h2><h1 id="maftools-从头开始绘制发表级oncoplot（瀑布图）"><a href="#maftools-从头开始绘制发表级oncoplot（瀑布图）" class="headerlink" title="maftools | 从头开始绘制发表级oncoplot（瀑布图）"></a>maftools | 从头开始绘制发表级oncoplot（瀑布图）</h1><p>原文链接：<a href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/G-0PtaoO6bYuhx_D_Rlrlw">https://mp.weixin.qq.com/s/G-0PtaoO6bYuhx_D_Rlrlw</a></p>
<h3 id="对于组学数据的分析和展示来说，maftools算是一个宝藏“R包”，可用于MAF格式的组学数据的汇总，分析和可视化展示。"><a href="#对于组学数据的分析和展示来说，maftools算是一个宝藏“R包”，可用于MAF格式的组学数据的汇总，分析和可视化展示。" class="headerlink" title="对于组学数据的分析和展示来说，maftools算是一个宝藏“R包”，可用于MAF格式的组学数据的汇总，分析和可视化展示。"></a><strong>对于组学数据的分析和展示来说，maftools算是一个宝藏“R包”，可用于MAF格式的组学数据的汇总，分析和可视化展示。</strong></h3><p>随着癌症基因组学的进步, <a href="https://link.zhihu.com/?target=https%3A//wiki.nci.nih.gov/display/TCGA/Mutation%2BAnnotation%2BFormat%2B(MAF)%2BSpecification">突变注释格式</a> (MAF) 被广泛用于存储检测到的somatic variants。<a href="https://link.zhihu.com/?target=http%3A//cancergenome.nih.gov/">The Cancer Genome Atlas</a> 项目对30多种不同的癌症进行了测序，每种癌症类型的样本量超过200种。maftools-R包能够有效的汇总，分析和可视化MAF格式的文件。</p>
<p>maftools函数主要分为可视化和分析两个模块，其主要功能及简短的描述如下所示，使用时只需读取MAF文件然后降MAF对象传递给所需要的绘图或分析功能即可。</p>
<p><img src="/2019/11/24/maftools/v2-a6385218e1c2561f087986d953ce15e5_hd.jpg" alt="img"></p>
<p>本次主要使用R-maftools包绘制组学突变结果（MAF）的oncoplot或者叫“瀑布图”。</p>
<h2 id="一、-载入R包，数据"><a href="#一、-载入R包，数据" class="headerlink" title="一、 载入R包，数据"></a><strong>一、 载入R包，数据</strong></h2><h3 id="1）-载入maftools包"><a href="#1）-载入maftools包" class="headerlink" title="1） 载入maftools包"></a><strong>1） 载入maftools包</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!require(&quot;BiocManager&quot;))</span><br><span class="line">    install.packages(&quot;BiocManager&quot;)</span><br><span class="line">BiocManager::install(&quot;maftools&quot;)</span><br></pre></td></tr></table></figure>



<h3 id="2）-载入数据"><a href="#2）-载入数据" class="headerlink" title="2） 载入数据"></a><strong>2） 载入数据</strong></h3><p>通过<code>read.maf</code>函数读入MAF文件，将各种数据（组学基因突变，拷贝数变异，临床数据，表达数据等）汇总并将其存储为MAF对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#TCGA-LAML MAF file (gz) </span><br><span class="line">laml.maf &#x3D; system.file(&#39;extdata&#39;, &#39;tcga_laml.maf.gz&#39;, package &#x3D; &#39;maftools&#39;) </span><br><span class="line">#clinical information (optional)</span><br><span class="line">laml.clin &#x3D; system.file(&#39;extdata&#39;, &#39;tcga_laml_annot.tsv&#39;, package &#x3D; &#39;maftools&#39;) </span><br><span class="line"></span><br><span class="line">laml &#x3D; read.maf(maf &#x3D; laml.maf, clinicalData &#x3D; laml.clin)</span><br></pre></td></tr></table></figure>

<p>MAF对象中除了上面基因突变数据和对应的临床数据外，还可以加入拷贝数变异，表达数据等其他数据类型，后面需要的时候会添加。</p>
<h2 id="二、-MAF对象汇总"><a href="#二、-MAF对象汇总" class="headerlink" title="二、 MAF对象汇总"></a><strong>二、 MAF对象汇总</strong></h2><h3 id="1）-展示MAF重点变量的summary信息"><a href="#1）-展示MAF重点变量的summary信息" class="headerlink" title="1） 展示MAF重点变量的summary信息"></a><strong>1） 展示MAF重点变量的summary信息</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Shows sample summry.</span><br><span class="line">getSampleSummary(laml)</span><br><span class="line">#Shows gene summary.</span><br><span class="line">getGeneSummary(laml)</span><br><span class="line">#Shows all fields in MAF</span><br><span class="line">getFields(laml)</span><br><span class="line">#shows clinical data associated with samples</span><br><span class="line">getClinicalData(laml)</span><br><span class="line">#Writes maf summary to an output file with basename laml.</span><br><span class="line">write.mafSummary(maf &#x3D; laml, basename &#x3D; &#39;laml&#39;)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/maftools/v2-b9dec0ee0c7c0fedf038e47d0f8e21b3_hd.jpg" alt="img"></p>
<p>上图为临床数据（getClinicalData）的summary结果，其余可自行输入查看结果。</p>
<h3 id="2）-绘制MAF-summary图"><a href="#2）-绘制MAF-summary图" class="headerlink" title="2） 绘制MAF-summary图"></a><strong>2） 绘制MAF-summary图</strong></h3><p>使用 plotmafSummary 绘制 maf 文件的summary信息，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#plotmafSummary </span><br><span class="line">plotmafSummary(maf &#x3D; laml, rmOutlier &#x3D; TRUE, addStat &#x3D; &#39;median&#39;, dashboard &#x3D; TRUE, titvRaw &#x3D; FALSE)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/maftools/v2-0206400f9b3aa778915103abe05e50fd_hd.jpg" alt="img"></p>
<p>堆叠的 barplot展示maf 文件中每个样本中的变异数量，并添加中位线，以显示队列间的中位数变异数量。箱线图展示variant_Classification的变异类型。</p>
<h2 id="三、-绘制oncoplot（瀑布）图"><a href="#三、-绘制oncoplot（瀑布）图" class="headerlink" title="三、 绘制oncoplot（瀑布）图"></a><strong>三、 绘制oncoplot（瀑布）图</strong></h2><h3 id="1-绘制基础oncoplots（瀑布图）"><a href="#1-绘制基础oncoplots（瀑布图）" class="headerlink" title="1 绘制基础oncoplots（瀑布图）"></a><strong>1 绘制基础oncoplots（瀑布图）</strong></h3><p>oncoplots或者瀑布图可以很好的展示maf文件中的变异信息，侧面条形图和顶部条形图可分别由<code>drawRowBar</code>和<code>drawColBar</code>参数控制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#展示top20的变异genes.</span><br><span class="line">oncoplot(maf &#x3D; laml, top &#x3D; 20)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/maftools/v2-4f32e44adeefbcce259c5896da1a96b8_hd.jpg" alt="img"></p>
<p>注：变异注释为<code>Multi_Hit</code>表示同一样本中突变多次的基因。</p>
<h3 id="2-更改变异类型的颜色"><a href="#2-更改变异类型的颜色" class="headerlink" title="2 更改变异类型的颜色"></a><strong>2 更改变异类型的颜色</strong></h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#此处使用RColorBrewer的颜色，当然也可以使用任意颜色</span></span><br><span class="line">vc_cols = RColorBrewer::brewer.pal(n = <span class="number">8</span>, name = <span class="string">'Paired'</span>)</span><br><span class="line">names(vc_cols) = c(</span><br><span class="line">  <span class="string">'Frame_Shift_Del'</span>,</span><br><span class="line">  <span class="string">'Missense_Mutation'</span>,</span><br><span class="line">  <span class="string">'Nonsense_Mutation'</span>,</span><br><span class="line">  <span class="string">'Multi_Hit'</span>,</span><br><span class="line">  <span class="string">'Frame_Shift_Ins'</span>,</span><br><span class="line">  <span class="string">'In_Frame_Ins'</span>,</span><br><span class="line">  <span class="string">'Splice_Site'</span>,</span><br><span class="line">  <span class="string">'In_Frame_Del'</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">#查看变异类型对应的颜色</span></span><br><span class="line">print(vc_cols)</span><br><span class="line"><span class="comment">#&gt;   Frame_Shift_Del Missense_Mutation Nonsense_Mutation         Multi_Hit </span></span><br><span class="line"><span class="comment">#&gt;         "#A6CEE3"         "#1F78B4"         "#B2DF8A"         "#33A02C" </span></span><br><span class="line"><span class="comment">#&gt;   Frame_Shift_Ins      In_Frame_Ins       Splice_Site      In_Frame_Del </span></span><br><span class="line"><span class="comment">#&gt;         "#FB9A99"         "#E31A1C"         "#FDBF6F"         "#FF7F00"</span></span><br><span class="line"></span><br><span class="line">oncoplot(maf = laml, colors = vc_cols, top = <span class="number">20</span>)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/maftools/v2-0bd10e76096b0186345817dba73c6131_hd.jpg" alt="img"></p>
<h3 id="3-添加copy-number-信息"><a href="#3-添加copy-number-信息" class="headerlink" title="3 添加copy number 信息"></a><strong>3 添加copy number 信息</strong></h3><p>可以使用两种方式向maf文件中添加SCNA信息</p>
<ul>
<li>GISTIC result</li>
<li>Custom copy number table</li>
</ul>
<h3 id="3-1-GISTIC-results"><a href="#3-1-GISTIC-results" class="headerlink" title="3.1 GISTIC results"></a><strong>3.1 GISTIC results</strong></h3><p>GISTIC会得到很多结果，此处只需要四个文件即可： <code>all_lesions.conf_XX.txt</code>, <code>amp_genes.conf_XX.txt</code>, <code>del_genes.conf_XX.txt</code>, <code>scores.gistic</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#GISTIC results </span><br><span class="line">all.lesions &#x3D;</span><br><span class="line">  system.file(&quot;extdata&quot;, &quot;all_lesions.conf_99.txt&quot;, package &#x3D; &quot;maftools&quot;)</span><br><span class="line">amp.genes &#x3D;</span><br><span class="line">  system.file(&quot;extdata&quot;, &quot;amp_genes.conf_99.txt&quot;, package &#x3D; &quot;maftools&quot;)</span><br><span class="line">del.genes &#x3D;</span><br><span class="line">  system.file(&quot;extdata&quot;, &quot;del_genes.conf_99.txt&quot;, package &#x3D; &quot;maftools&quot;)</span><br><span class="line">scores.gis &#x3D;</span><br><span class="line">  system.file(&quot;extdata&quot;, &quot;scores.gistic&quot;, package &#x3D; &quot;maftools&quot;)</span><br><span class="line"></span><br><span class="line">#Read GISTIC results along with MAF</span><br><span class="line">laml.plus.gistic &#x3D; read.maf(</span><br><span class="line">  maf &#x3D; laml.maf,</span><br><span class="line">  gisticAllLesionsFile &#x3D; all.lesions,</span><br><span class="line">  gisticAmpGenesFile &#x3D; amp.genes,</span><br><span class="line">  gisticDelGenesFile &#x3D; del.genes,</span><br><span class="line">  gisticScoresFile &#x3D; scores.gis,</span><br><span class="line">  isTCGA &#x3D; TRUE,</span><br><span class="line">  verbose &#x3D; FALSE, </span><br><span class="line">  clinicalData &#x3D; laml.clin</span><br><span class="line">)</span><br><span class="line">#绘制含有SCNA信息的oncolpot</span><br><span class="line">oncoplot(maf &#x3D; laml.plus.gistic, top &#x3D; 20)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/maftools/v2-7ecf49e8fa84ccbfe941ef0723455d1f_hd.jpg" alt="img"></p>
<h3 id="3-2-Custom-copy-number-table"><a href="#3-2-Custom-copy-number-table" class="headerlink" title="3.2 Custom copy-number table"></a><strong>3.2 Custom copy-number table</strong></h3><p>可以自定义一个copy-number结果，例如，让我们在随机的 20 个样本中创建 DNMT3A 的假 SCNA变异。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">set.seed(seed = <span class="number">1234</span>)</span><br><span class="line">barcodes = as.character(getSampleSummary(x = laml)[,Tumor_Sample_Barcode])</span><br><span class="line"><span class="comment">#Random 20 samples</span></span><br><span class="line">dummy.samples = sample(x = barcodes,</span><br><span class="line">                       size = <span class="number">20</span>,</span><br><span class="line">                       replace = <span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Genarate random CN status for above samples</span></span><br><span class="line">cn.status = sample(</span><br><span class="line">  x = c(<span class="string">'Amp'</span>, <span class="string">'Del'</span>),</span><br><span class="line">  size = length(dummy.samples),</span><br><span class="line">  replace = <span class="literal">TRUE</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">custom.cn.data = data.frame(</span><br><span class="line">  Gene = <span class="string">"DNMT3A"</span>,</span><br><span class="line">  Sample_name = dummy.samples,</span><br><span class="line">  CN = cn.status,</span><br><span class="line">  stringsAsFactors = <span class="literal">FALSE</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">head(custom.cn.data)</span><br><span class="line"><span class="comment">#&gt;     Gene  Sample_name  CN</span></span><br><span class="line"><span class="comment">#&gt; 1 DNMT3A TCGA-AB-2898 Amp</span></span><br><span class="line"><span class="comment">#&gt; 2 DNMT3A TCGA-AB-2879 Amp</span></span><br><span class="line"><span class="comment">#&gt; 3 DNMT3A TCGA-AB-2920 Del</span></span><br><span class="line"><span class="comment">#&gt; 4 DNMT3A TCGA-AB-2866 Amp</span></span><br><span class="line"><span class="comment">#&gt; 5 DNMT3A TCGA-AB-2892 Amp</span></span><br><span class="line"><span class="comment">#&gt; 6 DNMT3A TCGA-AB-2863 Amp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加SCNA信息</span></span><br><span class="line">laml.plus.cn = read.maf(maf = laml.maf,</span><br><span class="line">                        cnTable = custom.cn.data,</span><br><span class="line">                        verbose = <span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line">oncoplot(maf = laml.plus.cn, top = <span class="number">10</span>)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/maftools/v2-1b861780df5682eee2d8710c7a6851d0_hd.jpg" alt="img"></p>
<h3 id="4-添加-significance-values"><a href="#4-添加-significance-values" class="headerlink" title="4 添加 significance values"></a><strong>4 添加 significance values</strong></h3><p>输入data.frame格式的数据，包括<code>gene</code> and <code>q值</code>两列即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#MutSig results</span><br><span class="line">laml.mutsig &#x3D; system.file(&quot;extdata&quot;, &quot;LAML_sig_genes.txt.gz&quot;, package &#x3D; &quot;maftools&quot;)</span><br><span class="line"></span><br><span class="line">oncoplot(</span><br><span class="line">  maf &#x3D; laml,</span><br><span class="line">  mutsig &#x3D; laml.mutsig,</span><br><span class="line">  mutsigQval &#x3D; 0.01,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/maftools/v2-ae8f40586656931e340663c0d38ceea1_hd.jpg" alt="img"></p>
<h3 id="5-临床信息-annotations"><a href="#5-临床信息-annotations" class="headerlink" title="5 临床信息 annotations"></a><strong>5 临床信息 annotations</strong></h3><p>1）使用存储在 <code>clinical.data</code> 中的变量进行注释</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用FAB_classification注释</span></span><br><span class="line">oncoplot(maf = laml, clinicalFeatures = <span class="string">'FAB_classification'</span>)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/maftools/v2-0e53012d9d0ca080f86af02946f5d56b_hd.jpg" alt="img"></p>
<p>2）临床信息注释的变量同样可以自定义颜色：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更改FAB classification的颜色设置</span></span><br><span class="line">fabcolors = RColorBrewer::brewer.pal(n = <span class="number">8</span>,name = <span class="string">'Spectral'</span>)</span><br><span class="line"><span class="comment">#颜色和变量的种类要一样多</span></span><br><span class="line">names(fabcolors) = c(<span class="string">"M0"</span>, <span class="string">"M1"</span>, <span class="string">"M2"</span>, <span class="string">"M3"</span>, <span class="string">"M4"</span>, <span class="string">"M5"</span>, <span class="string">"M6"</span>, <span class="string">"M7"</span>)</span><br><span class="line">fabcolors = list(FAB_classification = fabcolors)</span><br><span class="line"></span><br><span class="line">oncoplot(</span><br><span class="line">  maf = laml,</span><br><span class="line">  clinicalFeatures = <span class="string">'FAB_classification'</span>,</span><br><span class="line">  sortByAnnotation = <span class="literal">TRUE</span>,</span><br><span class="line">  annotationColor = fabcolors</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/maftools/v2-2149d608adc9cc0546225aa0178178c9_hd.jpg" alt="img"></p>
<p>3）注释多个临床数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">oncoplot(</span><br><span class="line">    maf &#x3D; laml, </span><br><span class="line">    clinicalFeatures &#x3D; c(&#39;FAB_classification&#39;,&#39;SEX&#39;,&#39;Overall_Survival_Status&#39;),</span><br><span class="line">    annotationColor &#x3D; fabcolors)</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/maftools/v2-7a3940ed78e1089abc7b7859555b84b1_hd.jpg" alt="img"></p>
<p>以上就是如何使用R-maftools包完成瀑布图绘制的简单介绍，然后基本上也就完成了文献的Fig1 🤭。</p>
<p>开篇就说了maftools对于组学数据的分析和展示来说，算是一个宝藏“R包”，因此后续还会介绍其他的汇总，分析和可视化功能。</p>
<h2 id="利用maftools分析annovar的注释结果"><a href="#利用maftools分析annovar的注释结果" class="headerlink" title="利用maftools分析annovar的注释结果"></a>利用maftools分析annovar的注释结果</h2><p>第一步：</p>
<p>将annovar注释后的txt文件合并，并在后面添加一列样本名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in *.hg19_multianno.txt</span><br><span class="line">do</span><br><span class="line">    sample=`echo $i|awk -F '.' '&#123;print $1&#125;'`</span><br><span class="line">    cut -f '1-10' $i|sed '1d'|sed "s/$/\t$&#123;sample&#125;/"&gt;&gt;all_sample.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">sed -i '1s/^/Chr\tStart\tEnd\tRef\tAlt\tFunc.refGene\tGene.refGene\tGeneDetail.refGene\tExonicFunc.refGene\tAAChange.refGene\tTumor_Sample_Barcode\n/' all_sample.txt</span><br></pre></td></tr></table></figure>

<p>结果应具有一下几列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Chr     Start   End     Ref     Alt     Func.refGene    Gene.refGene    GeneDetail.refGene      ExonicFunc.refGene      AAChange.refGene      Tumor_Sample_Barcode</span><br></pre></td></tr></table></figure>

<p>第二步：</p>
<p>将文件转为maf格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(maftools)</span><br><span class="line">var.annovar.maf &#x3D; annovarToMaf(annovar &#x3D; &quot;all_sample.txt&quot;, </span><br><span class="line">                            Center &#x3D; &#39;NA&#39;, </span><br><span class="line">                            refBuild &#x3D; &#39;hg38&#39;, </span><br><span class="line">                            tsbCol &#x3D; &#39;Tumor_Sample_Barcode&#39;, </span><br><span class="line">                            table &#x3D; &#39;refGene&#39;,</span><br><span class="line">                            sep &#x3D; &quot;\t&quot;)</span><br><span class="line">write.table(var.annovar.maf,file&#x3D;&quot;var_annovar.maf&quot;,quote&#x3D; F,sep&#x3D;&quot;\t&quot;,row.names&#x3D;F)</span><br><span class="line">var_maf &#x3D; read.maf(maf &#x3D;&quot;var_annovar.maf&quot;)</span><br><span class="line">plotmafSummary(maf &#x3D; var_maf, rmOutlier &#x3D; TRUE, addStat &#x3D; &#39;median&#39;)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/v2-554ae7c18edaac896946ce184ef8b733_hd.jpg" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">oncoplot(maf &#x3D; var_maf, top &#x3D; 30, fontSize &#x3D; 12 ,showTumorSampleBarcodes &#x3D; F )</span><br></pre></td></tr></table></figure>



<p>然后画瀑布图</p>
<p><img src="/2019/11/24/maftools/v2-77e5c7f526a83e6a35510c16cd3c0759_hd.jpg" alt="img"></p>
<p>箱线图，显示六种不同转换的总体分布</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">laml.titv &#x3D; titv(maf &#x3D; var_maf, plot &#x3D; FALSE, useSyn &#x3D; TRUE)</span><br><span class="line">plotTiTv(res &#x3D; laml.titv)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/v2-6e79c29fa423529110c5331ebfda3cdc_hd.jpg" alt="img"></p>
<p>分析相互关系图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">somaticInteractions(maf &#x3D; var_maf, top &#x3D; 25, pvalue &#x3D; c(0.05, 0.1))</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/v2-39884310463c6ebde953b41855cbbdf6_hd.jpg" alt="img"></p>
<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>随着癌症基因组学的进步，突变注释格式（MAF）被广泛接受并用于存储检测到的体细胞变体。 癌症基因组图谱项目对30多种不同的癌症进行了测序，每种癌症类型的样本量超过200种。由体细胞变体组成的结果数据以MAF格式形式存储。 只要数据采用MAF格式，该软件包就会尝试从TCGA源或任何内部研究中有效地汇总，分析，注释和可视化MAF文件.</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>使用前要先将文件转换为maf格式,对于VCF格式文件，可以使用<a href="https://github.com/mskcc/vcf2maf" target="_blank" rel="noopener">vcf2maf</a>进行格式转换.</p>
<p>maf文件包含的内容：</p>
<ul>
<li>Mandatory fields(必填项): <strong>Hugo_Symbol, Chromosome, Start_Position, End_Position, Reference_Allele, Tumor_Seq_Allele2, Variant_Classification, Variant_Type and Tumor_Sample_Barcode</strong>.</li>
<li>Recommended optional fields（选填项）: non MAF specific fields containing VAF (Variant Allele Frequecy) and amino acid change information.</li>
</ul>
<h1 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将突变结果进行注释，得到txt文件</span></span><br><span class="line">for i in *.somatic.anno; do perl ~/software/Desktop/annovar/table_annovar.pl $sra_file /home/yang.zou/database/humandb_new/ -buildver hg19 -out variants --otherinfo -remove -protocol ensGene -operation g -nastring NA -outfile;done</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">然后将所有.hg19_multianno.txt文件添加一列填入文件名前缀并将所有txt文件拼接成一个文件，提取出含有外显子的信息</span></span><br><span class="line">for i in *.hg19_multianno.txt;do sed '1d' $i | sed "s/$/$&#123;i%%.*&#125;/" &gt;&gt; all_annovar;done </span><br><span class="line">grep -P "\texonic\t" all_annovar &gt; all_annovar2</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">格式转换</span></span><br><span class="line">perl to-maftools.pl all_annovar2         #将文件转换为maf格式 </span><br><span class="line"><span class="meta">  #</span><span class="bash">to-maftools.pl</span></span><br><span class="line">    use strict;</span><br><span class="line">    use warnings;</span><br><span class="line">     </span><br><span class="line">    open (FA,"all_annovar2");</span><br><span class="line">    open (FB,"&gt;all_annovar3");</span><br><span class="line">     </span><br><span class="line">    print FB "Chr\tStart\tEnd\tRef\tAlt\tFunc.ensGene\tGene.ensGene\tGeneDetail.ensGene\tExonicFunc.ensGene\tAAChange.ensGene\tTumor_Sample_Barcode\n";</span><br><span class="line">    while (&lt;FA&gt;)&#123;</span><br><span class="line">            chomp;</span><br><span class="line">            my @l=split /\t/,$_;</span><br><span class="line">            print FB $l[0],"\t",$l[1],"\t",$l[2],"\t",$l[3],"\t",$l[4],"\t",$l[5],"\t",$l[6],"\t",$l[7],"\t",$l[8],"\t",$l[9],"\t",$l[10],"\n";</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="总体分析框架"><a href="#总体分析框架" class="headerlink" title="总体分析框架"></a>总体分析框架</h1><p><img src="/2019/11/24/maftools/1574575257290.png" alt="1574575257290"></p>
<p>总体框架</p>
<h1 id="maftools安装"><a href="#maftools安装" class="headerlink" title="maftools安装"></a>maftools安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source(&quot;http:&#x2F;&#x2F;bioconductor.org&#x2F;biocLite.R&quot;)</span><br><span class="line">biocLite(&quot;maftools&quot;)</span><br><span class="line"> </span><br><span class="line">library(maftools)</span><br></pre></td></tr></table></figure>

<p>注：<strong>安装过程特别麻烦，按了好几天，R版本要求3.3以上，也不要使用最新版本，可能有的包新版本还没同步</strong>。我使用的是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version.string R version 3.4.1 (2017-06-30)</span><br></pre></td></tr></table></figure>

<h1 id="正式处理"><a href="#正式处理" class="headerlink" title="正式处理"></a>正式处理</h1><h2 id="读入annovar文件转换为maf——annovarToMaf"><a href="#读入annovar文件转换为maf——annovarToMaf" class="headerlink" title="读入annovar文件转换为maf——annovarToMaf"></a>读入annovar文件转换为maf——annovarToMaf</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#read maf</span><br><span class="line">var.annovar.maf &#x3D; annovarToMaf(annovar &#x3D; &quot;all_annovar3&quot;, Center &#x3D; &#39;NA&#39;, refBuild &#x3D; &#39;hg19&#39;, tsbCol &#x3D; &#39;Tumor_Sample_Barcode&#39;, table &#x3D; &#39;ensGene&#39;,sep &#x3D; &quot;\t&quot;)</span><br><span class="line">write.table(x&#x3D;var.annovar.maf,file&#x3D;&quot;var_annovar_maf&quot;,quote&#x3D; F,sep&#x3D;&quot;\t&quot;,row.names&#x3D;F)</span><br></pre></td></tr></table></figure>

<p>annovarToMaf函数说明</p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Converts variant annotations from Annovar into a basic MAF.将annovar格式转换为maf格式</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">annovarToMaf(annovar, Center &#x3D; NULL, refBuild &#x3D; &quot;hg19&quot;, tsbCol &#x3D; NULL,</span><br><span class="line">  table &#x3D; &quot;refGene&quot;, basename &#x3D; NULL, sep &#x3D; &quot;\t&quot;, MAFobj &#x3D; FALSE,</span><br><span class="line">  sampleAnno &#x3D; NULL)</span><br></pre></td></tr></table></figure>

<h3 id="Arguments-1"><a href="#Arguments-1" class="headerlink" title="Arguments"></a>Arguments</h3><p>| <code>参数</code> |详细解释 |<br> | <code>annovar</code>| input annovar annotation file.|<br> | <code>Center</code> | Center field in MAF file will be filled with this value. Default NA.（MAF文件中的中心字段将填充此值。 默认NA）|<br> | <code>refBuild</code> | NCBI_Build field in MAF file will be filled with this value. Default hg19.（MAF文件中的NCBI_Build字段将填充此值。 默认hg19）|<br> | <code>tsbCol</code> | column name containing Tumor_Sample_Barcode or sample names in input file.（列名包含Tumor_Sample_Barcode或输入文件中的示例名称） |<br> | <code>table</code> | reference table used for gene-based annotations. Can be ‘ensGene’ or ‘refGene’. Default ‘refGene’（用于基于基因的注释的参考表。 可以是’ensGene’或’refGene’。 默认’refGene)|<br> | <code>basename</code> | If provided writes resulting MAF file to an output file. （将结果MAF文件写入输出文件）|<br> | <code>sep</code> | field seperator for input file. Default tab seperated.|<br> | <code>MAFobj</code> | If TRUE, returns results as an <code>[MAF](http://127.0.0.1:37698/help/library/maftools/help/MAF</code> object.|<br> | <code>sampleAnno</code> | annotations associated with each sample/Tumor_Sample_Barcode in input annovar file. If provided it will be included in MAF object. Could be a text file or a data.frame. Ideally annotation would contain clinical data, survival information and other necessary features associated with samples. Default NULL.（与输入annovar文件中的每个样本/ Tumor_Sample_Barcode相关联的注释。 如果提供，它将包含在MAF对象中。 可以是文本文件或data.frame。 理想情况下，注释将包含临床数据，生存信息和与样本相关的其他必要特征。 默认为NULL）|</p>
<p>然后用linux处理掉那些无义突变，也可以在后续设置参数去掉无义突变</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed 's/^NA/unknown/' var_annovar_maf &gt; var_annovar_maf2</span><br><span class="line">grep -v "^NA" var_annovar_maf | grep -v -P "\tUNKNOWN\t"&gt; var_annovar_maf2</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="读入maf文件——read-maf"><a href="#读入maf文件——read-maf" class="headerlink" title="读入maf文件——read.maf"></a>读入maf文件——read.maf</h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">var_maf = read.maf(maf =<span class="string">"var_annovar_maf2"</span>)</span><br><span class="line">plotmafSummary(maf = var_maf, rmOutlier = <span class="literal">TRUE</span>, addStat = <span class="string">'median'</span>)</span><br><span class="line">oncoplot(maf = var_maf, top = <span class="number">400</span>, writeMatrix=<span class="literal">T</span>,removeNonMutated = <span class="literal">F</span>,showTumorSampleBarcodes=<span class="literal">T</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>Takes tab delimited MAF (can be plain text or gz compressed) file as an input and summarizes it in various ways. Also creates oncomatrix - helpful for visualization.</p>
<h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">read.maf(maf, clinicalData &#x3D; NULL, removeDuplicatedVariants &#x3D; TRUE,</span><br><span class="line">  useAll &#x3D; TRUE, gisticAllLesionsFile &#x3D; NULL, gisticAmpGenesFile &#x3D; NULL,</span><br><span class="line">  gisticDelGenesFile &#x3D; NULL, gisticScoresFile &#x3D; NULL, cnLevel &#x3D; &quot;all&quot;,</span><br><span class="line">  cnTable &#x3D; NULL, isTCGA &#x3D; FALSE, vc_nonSyn &#x3D; NULL, verbose &#x3D; TRUE)</span><br></pre></td></tr></table></figure>

<h3 id="Arguments-2"><a href="#Arguments-2" class="headerlink" title="Arguments"></a>Arguments</h3><ul>
<li><p><code>maf</code><br>tab delimited MAF file. File can also be gz compressed. Required. Alternatively, you can also provide already read MAF file as a dataframe.(制表符分隔的MAF文件。 文件也可以是gz压缩的。 也可以将已读取的MAF文件作为数据框提供</p>
</li>
<li><p><code>clinicalData</code><br> Clinical data associated with each sample/Tumor_Sample_Barcode in MAF. Could be a text file or a data.frame. Default NULL.(与MAF中每个样本/ Tumor_Sample_Barcode相关的临床数据。 可以是文本文件或data.frame。 默认为NULL)</p>
</li>
<li><p><code>removeDuplicatedVariants</code><br> removes repeated variants in a particuar sample, mapped to multiple transcripts of same Gene. See Description. Default TRUE.(去除特定样本中的重复变体，映射到同一基因的多个转录本。 见说明。 默认值为TRUE)</p>
</li>
<li><p><code>useAll</code><br> logical. Whether to use all variants irrespective of values in Mutation_Status. Defaults to TRUE. If FALSE, only uses with values Somatic.(逻辑。 是否使用所有变体而不管Mutation_Status中的值。 默认为TRUE。 如果为FALSE，则仅使用值Somatic)</p>
</li>
<li><p><code>gisticAllLesionsFile</code><br> All Lesions file generated by gistic. e.g; all_lesions.conf_XX.txt, where XX is the confidence level. Default NULL.</p>
</li>
<li><p><code>gisticAmpGenesFile</code><br> Amplification Genes file generated by gistic. e.g; amp_genes.conf_XX.txt, where XX is the confidence level. Default NULL.(扩增由gistic生成的基因文件。 例如; amp_genes.conf_XX.txt)</p>
</li>
<li><p><code>gisticDelGenesFile</code><br> Deletion Genes file generated by gistic. e.g; del_genes.conf_XX.txt, where XX is the confidence level. Default NULL.(删除由gistic生成的Genes文件。 例如; del_genes.conf_XX.txt)</p>
</li>
<li><p><code>gisticScoresFile</code><br> scores.gistic file generated by gistic. Default NULL(由gistic生成的scores.gistic文件)</p>
</li>
<li><p><code>cnLevel</code><br> level of CN changes to use. Can be ‘all’, ‘deep’ or ‘shallow’. Default uses all i.e, genes with both ‘shallow’ or ‘deep’ CN changes(CN级别改变使用。 可以是“全部”，“深层”或“浅层”。 默认使用所有，即具有“浅”或“深”CN变化的基因)</p>
</li>
<li><p><code>cnTable</code><br> Custom copynumber data if gistic results are not available. Input file or a data.frame should contain three columns with gene name, Sample name and copy number status (either ‘Amp’ or ‘Del’). Default NULL.(如果gistic结果不可用，则自定义copynumber数据。 输入文件或data.frame应包含三列，其中包含基因名称，样品名称和拷贝编号状态（’Amp’或’Del’）。 默认为NULL)</p>
</li>
<li><p><code>isTCGA</code><br> Is input MAF file from TCGA source. If TRUE uses only first 12 characters from Tumor_Sample_Barcode.(是来自TCGA源的输入MAF文件。 如果TRUE仅使用Tumor_Sample_Barcode中的前12个字符。)</p>
</li>
<li><p><code>vc_nonSyn</code><br> NULL. Provide manual list of variant classifications to be considered as non-synonymous. Rest will be considered as silent variants. Default uses Variant Classifications with High/Moderate variant consequences. <a href="http://asia.ensembl.org/Help/Glossary?id=535" target="_blank" rel="noopener">http://asia.ensembl.org/Help/Glossary?id=535</a>: “Frame_Shift_Del”, “Frame_Shift_Ins”, “Splice_Site”, “Translation_Start_Site”,”Nonsense_Mutation”, “Nonstop_Mutation”, “In_Frame_Del”,”In_Frame_Ins”, “Missense_Mutation”</p>
</li>
<li><p><code>verbose</code><br> TRUE logical. Default to be talkative and prints summary.</p>
</li>
</ul>
<hr>
<h2 id="绘制maf文件的摘要——plotmafSummary"><a href="#绘制maf文件的摘要——plotmafSummary" class="headerlink" title="绘制maf文件的摘要——plotmafSummary"></a>绘制maf文件的摘要——plotmafSummary</h2><p>该文件将每个样本中的变体数显示为堆积条形图，将变体类型显示为Variant_Classification汇总的箱形图。 我们可以在堆积的条形图中添加平均线或中线，以显示整个群组中变体的平均值/中值数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plotmafSummary(maf &#x3D; laml, rmOutlier &#x3D; TRUE, addStat &#x3D; &#39;median&#39;, dashboard &#x3D; TRUE, titvRaw &#x3D; FALSE)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/1574575271692.png" alt="1574575271692"></p>
<h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>Plots maf summary.</p>
<h3 id="Usage-2"><a href="#Usage-2" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plotmafSummary(maf, file &#x3D; NULL, rmOutlier &#x3D; TRUE, dashboard &#x3D; TRUE,</span><br><span class="line">  titvRaw &#x3D; TRUE, width &#x3D; 10, height &#x3D; 7, addStat &#x3D; NULL,</span><br><span class="line">  showBarcodes &#x3D; FALSE, fs &#x3D; 10, textSize &#x3D; 2, color &#x3D; NULL,</span><br><span class="line">  statFontSize &#x3D; 3, titleSize &#x3D; c(10, 8), titvColor &#x3D; NULL, top &#x3D; 10)</span><br></pre></td></tr></table></figure>

<h3 id="Arguments-3"><a href="#Arguments-3" class="headerlink" title="Arguments"></a>Arguments</h3><ul>
<li><code>maf</code><br> an <a href="http://127.0.0.1:27693/help/library/maftools/help/MAF" target="_blank" rel="noopener">MAF</a> object generated by <a href="http://127.0.0.1:27693/help/library/maftools/help/read.maf" target="_blank" rel="noopener">read.maf</a></li>
<li><code>file</code><br> If given pdf file will be generated.</li>
<li><code>rmOutlier</code><br> If TRUE removes outlier from boxplot.</li>
<li><code>dashboard</code><br> If FALSE plots simple summary instead of dashboard style.</li>
<li><code>titvRaw</code><br> TRUE. If false instead of raw counts, plots fraction.</li>
<li><code>width</code><br> plot parameter for output file.</li>
<li><code>height</code><br> plot parameter for output file.</li>
<li><code>addStat</code><br> Can be either mean or median. Default NULL.</li>
<li><code>showBarcodes</code><br> include sample names in the top bar plot.</li>
<li><code>fs</code><br> base size for text. Default 10.</li>
<li><code>color</code><br> named vector of colors for each Variant_Classification.</li>
<li><code>titvColor</code><br> colors for SNV classifications.</li>
<li><code>top</code><br> include top n genes dashboard plot. Default 10.</li>
</ul>
<hr>
<h2 id="绘制瀑布图——oncoplots"><a href="#绘制瀑布图——oncoplots" class="headerlink" title="绘制瀑布图——oncoplots"></a>绘制瀑布图——oncoplots</h2><p>Oncoplot函数使用“ComplexHeatmap”来绘制oncoplots2。 具体来说，oncoplot是ComplexHeatmap的OncoPrint功能的包装器，几乎没有任何修改和自动化，使绘图更容易。 侧面条形图和顶部条形图可分别由drawRowBar和drawColBar参数控制。</p>
<p><strong>top的值需要视情况而定</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">oncoplot(maf &#x3D; var_maf, top &#x3D; 400, writeMatrix&#x3D;T,removeNonMutated &#x3D; F,showTumorSampleBarcodes&#x3D;T)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/1574575282983.png" alt="1574575282983"></p>
<p>takes output generated by read.maf and draws an oncoplot</p>
<h3 id="Usage-3"><a href="#Usage-3" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoplot(maf, top = <span class="number">20</span>, genes = <span class="literal">NULL</span>, mutsig = <span class="literal">NULL</span>, mutsigQval = <span class="number">0.1</span>,</span><br><span class="line">  drawRowBar = <span class="literal">TRUE</span>, drawColBar = <span class="literal">TRUE</span>, clinicalFeatures = <span class="literal">NULL</span>,</span><br><span class="line">  annotationDat = <span class="literal">NULL</span>, annotationColor = <span class="literal">NULL</span>, genesToIgnore = <span class="literal">NULL</span>,</span><br><span class="line">  showTumorSampleBarcodes = <span class="literal">FALSE</span>, removeNonMutated = <span class="literal">TRUE</span>, colors = <span class="literal">NULL</span>,</span><br><span class="line">  sortByMutation = <span class="literal">FALSE</span>, sortByAnnotation = <span class="literal">FALSE</span>,</span><br><span class="line">  annotationOrder = <span class="literal">NULL</span>, keepGeneOrder = <span class="literal">FALSE</span>, GeneOrderSort = <span class="literal">TRUE</span>,</span><br><span class="line">  sampleOrder = <span class="literal">NULL</span>, writeMatrix = <span class="literal">FALSE</span>, fontSize = <span class="number">10</span>,</span><br><span class="line">  SampleNamefontSize = <span class="number">10</span>, titleFontSize = <span class="number">15</span>, legendFontSize = <span class="number">12</span>,</span><br><span class="line">  annotationFontSize = <span class="number">12</span>, annotationTitleFontSize = <span class="number">12</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Arguments-4"><a href="#Arguments-4" class="headerlink" title="Arguments"></a>Arguments</h3><ul>
<li>maf<br> an <a href="http://127.0.0.1:29367/help/library/maftools/help/MAF" target="_blank" rel="noopener">MAF</a> object generated by <a href="http://127.0.0.1:29367/help/library/maftools/help/read.maf" target="_blank" rel="noopener">read.maf</a>|</li>
<li>top<br> how many top genes to be drawn. defaults to 20.（显示多少基因）|</li>
<li>genes<br> Just draw oncoplot for these genes. Default NULL.（显示特定基因）|</li>
<li>mutsig<br> Mutsig resuts if availbale. Usually file named sig_genes.txt If provided plots significant genes and correpsonding Q-values as side row-bar. Default NULL.（如果可以的话，Mutsig会重新开始。 通常名为sig_genes.txt的文件如果提供，则绘制重要基因并将Q值作为侧行条对应。 默认为NULL） |</li>
<li>mutsigQval<br> Q-value to choose significant genes from mutsig results. Default 0.1（从mutsig结果中选择重要基因的Q值。 默认值为0.1）|</li>
<li>genesToIgnore<br> do not show these genes in Oncoplot. Default NULL.</li>
<li>showTumorSampleBarcodes<br> logical to include sample names.（逻辑包含样本名称）</li>
<li><strong>removeNonMutated</strong><br>Logical. If <code>TRUE</code> removes samples with no mutations in the oncoplot for better visualization. Default <code>TRUE</code>.（消除无义突变）</li>
<li>sortByMutation<br> Force sort matrix according mutations. Helpful in case of MAF was read along with copy number data. Default FALSE.（根据突变强制排序矩阵。 在阅读MAF的情况下有用以及拷贝数数据。 默认为FALSE）|</li>
<li>sortByAnnotation<br> logical sort oncomatrix (samples) by provided ‘clinicalFeatures’. Sorts based on first ‘clinicalFeatures’. Defaults to FALSE. column-sort|</li>
<li>annotationOrder<br> Manually specify order for annotations. Works only for first ‘clinicalFeatures’. Default NULL. |</li>
<li>keepGeneOrder<br> logical whether to keep order of given genes. Default FALSE, order according to mutation frequency|</li>
<li>GeneOrderSort<br> logical this is applicable when ‘keepGeneOrder’ is TRUE. Default TRUE|</li>
<li>sampleOrder<br> Manually speify sample names for oncolplot ordering. Default NULL.|</li>
<li>writeMatrix<br> writes character coded matrix used to generate the plot to an output file. This can be used as an input for ComplexHeatmap <a href="http://127.0.0.1:29367/help/library/ComplexHeatmap/html/oncoPrint.html" target="_blank" rel="noopener">oncoPrint</a> function if you wish to customize the plot.（将用于生成绘图的字符编码矩阵写入输出文件。 如果您想自定义绘图，则可以将其用作ComplexHeatmap oncoPrint函数的输入）</li>
</ul>
<p>通过包括与样本相关的注释（临床特征），改变变体分类的颜色并包括显着性的q值（从MutSig或类似程序生成），可以进一步改善Oncoplots。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">col = RColorBrewer::brewer.pal(n = <span class="number">8</span>, name = <span class="string">'Paired'</span>)</span><br><span class="line">names(col) = c(<span class="string">'Frame_Shift_Del'</span>,<span class="string">'Missense_Mutation'</span>, <span class="string">'Nonsense_Mutation'</span>, <span class="string">'Multi_Hit'</span>, <span class="string">'Frame_Shift_Ins'</span>,<span class="string">'In_Frame_Ins'</span>, <span class="string">'Splice_Site'</span>, <span class="string">'In_Frame_Del'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Color coding for FAB classification; try getAnnotations(x = laml) to see available annotations.</span></span><br><span class="line">fabcolors = RColorBrewer::brewer.pal(n = <span class="number">8</span>,name = <span class="string">'Spectral'</span>)</span><br><span class="line">names(fabcolors) = c(<span class="string">"M0"</span>, <span class="string">"M1"</span>, <span class="string">"M2"</span>, <span class="string">"M3"</span>, <span class="string">"M4"</span>, <span class="string">"M5"</span>, <span class="string">"M6"</span>, <span class="string">"M7"</span>)</span><br><span class="line">fabcolors = list(FAB_classification = fabcolors)</span><br><span class="line"></span><br><span class="line"><span class="comment">#MutSig reusults</span></span><br><span class="line">laml.mutsig &lt;- system.file(<span class="string">"extdata"</span>, <span class="string">"LAML_sig_genes.txt.gz"</span>, package = <span class="string">"maftools"</span>)</span><br><span class="line"></span><br><span class="line">oncoplot(maf = laml, colors = col, mutsig = laml.mutsig, mutsigQval = <span class="number">0.01</span>, clinicalFeatures = <span class="string">'FAB_classification'</span>, sortByAnnotation = <span class="literal">TRUE</span>, annotationColor = fabcolors)</span><br></pre></td></tr></table></figure>

<p>[图片上传失败…(image-fc6334-1536734778754)]</p>
<p>使用oncostrip函数可视化任何一组基因，它们在每个样本中绘制类似于cBioPortal上的OncoPrinter工具的突变。 oncostrip可用于使用top或gene参数绘制任意数量的基因</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#显示特定基因</span><br><span class="line">oncostrip(maf &#x3D; laml, genes &#x3D; c(&#39;DNMT3A&#39;,&#39;NPM1&#39;, &#39;RUNX1&#39;))</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/24/maftools/1574575295832.png" alt="1574575295832"></p>
<hr>
<h2 id="绘制箱线图——-titv"><a href="#绘制箱线图——-titv" class="headerlink" title="绘制箱线图—— titv"></a>绘制箱线图—— titv</h2><p>titv函数将SNP分类为<a href="http://www.mun.ca/biology/scarr/Transitions_vs_Transversions.html" target="_blank" rel="noopener">Transitions_vs_Transversions</a>，并以各种方式返回汇总表的列表。 汇总数据也可以显示为一个箱线图，显示六种不同转换的总体分布，并作为堆积条形图显示每个样本中的转换比例。</p>
<p><img src="/2019/11/24/maftools/1574575314555.png" alt="1574575314555"></p>
<h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>takes output generated by read.maf and classifies Single Nucleotide Variants into Transitions and Transversions.</p>
<h3 id="Usage-4"><a href="#Usage-4" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">titv(maf, useSyn &#x3D; FALSE, plot &#x3D; TRUE, file &#x3D; NULL)</span><br></pre></td></tr></table></figure>

<h3 id="Arguments-5"><a href="#Arguments-5" class="headerlink" title="Arguments"></a>Arguments</h3><ul>
<li><p><code>maf</code><br> an <a href="http://127.0.0.1:27693/help/library/maftools/help/MAF" target="_blank" rel="noopener">MAF</a> object generated by <a href="http://127.0.0.1:27693/help/library/maftools/help/read.maf" target="_blank" rel="noopener">read.maf</a></p>
</li>
<li><p><code>useSyn</code><br> Logical. Whether to include synonymous variants in analysis. Defaults to FALSE.</p>
</li>
<li><p><code>plot</code><br>plots a titv fractions. default TRUE.</p>
</li>
<li><p><code>file</code><br>basename for output file name. If given writes summaries to output file. Default NULL.</p>
</li>
</ul>
<hr>
<h2 id="绘制棒棒图——lollipopPlot"><a href="#绘制棒棒图——lollipopPlot" class="headerlink" title="#绘制棒棒图——lollipopPlot"></a>#绘制棒棒图——lollipopPlot</h2><p>棒棒糖图是简单且最有效的方式，显示蛋白质结构上的突变点。许多致癌基因具有比任何其他基因座更频繁突变的优先位点。这些斑点被认为是突变热点，棒棒糖图可以用于显示它们以及其他突变。我们可以使用函数lollipopPlot绘制这样的图。这个功能要求我们在maf文件中有氨基酸改变信息。然而，MAF文件没有关于命名氨基酸变化字段的明确指南，不同的研究具有不同的氨基酸变化的字段（或列）名称。默认情况下，lollipopPlot查找列AAChange，如果在MAF文件中找不到它，则会打印所有可用字段并显示警告消息。对于以下示例，MAF文件包含字段/列名称“Protein_Change”下的氨基酸变化。我们将使用参数AACol手动指定它。此函数还将绘图作为ggplot对象返回，如果需要，用户稍后可以修改该对象。</p>
<p><img src="/2019/11/24/maftools/1574575327947.png" alt="1574575327947"></p>
<p>maftools还可以制作很多图，比如</p>
<p><img src="/2019/11/24/maftools/1574575384816.png" alt="1574575384816"></p>
<p><img src="/2019/11/24/maftools/1574575343947.png" alt="1574575343947"></p>
<p><img src="/2019/11/24/maftools/1574575358469.png" alt="1574575358469"></p>
<p><img src="/2019/11/24/maftools/1574575368856.png" alt="1574575368856"></p>
<p><img src="/2019/11/24/maftools/1574575398809.png" alt="1574575398809"></p>
<p><img src="/2019/11/24/maftools/1574575409968.png" alt="1574575409968"></p>
<p>还可以用函数geneCloud绘制突变基因的词云图。 每个基因的大小与其突变/改变的样品总数成比例。</p>
<p><img src="/2019/11/24/maftools/1574575418379.png" alt="1574575418379"></p>
<p>癌症中的许多引起疾病的基因共同发生或在其突变模式中显示出强烈的排他性。 可以使用somaticInteractions函数检测这种相互排斥或共同发生的基因组，其执行成对的Fisher’s Exact检验以检测这种显着的基因对。 somaticInteractions函数还使用cometExactTest来识别涉及&gt; 2个基因的潜在改变的基因集</p>
<p><img src="/2019/11/24/maftools/1574575428779.png" alt="1574575428779"></p>
<p>maftools包 功能很强大，具体可参考：</p>
<p><a href="http://bioconductor.org/packages/release/bioc/vignettes/maftools/inst/doc/maftools.html" target="_blank" rel="noopener">http://bioconductor.org/packages/release/bioc/vignettes/maftools/inst/doc/maftools.html</a></p>
<h1 id="肿瘤变异数据分析和可视化工具maftools：突变数据下载和可视化"><a href="#肿瘤变异数据分析和可视化工具maftools：突变数据下载和可视化" class="headerlink" title="肿瘤变异数据分析和可视化工具maftools：突变数据下载和可视化"></a>肿瘤变异数据分析和可视化工具maftools：突变数据下载和可视化</h1><p>链接地址：<a href="https://byteofbio.com/archives/9.html" target="_blank" rel="noopener">https://byteofbio.com/archives/9.html</a></p>
<h2 id="Maftools系列文章：-1"><a href="#Maftools系列文章：-1" class="headerlink" title="Maftools系列文章："></a>Maftools系列文章：</h2><blockquote>
<ol>
<li>《<a href="https://byteofbio.com/archives/15.html" target="_blank" rel="noopener">maftools使用方法总结以及常见问题</a>》</li>
<li>《<a href="https://byteofbio.com/archives/4.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：安装和文件格式要求</a>》</li>
<li>《<a href="https://byteofbio.com/archives/9.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：突变数据下载和可视化</a>》</li>
<li>《<a href="https://byteofbio.com/archives/11.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：突变的数据分析</a>》</li>
<li>《<a href="https://byteofbio.com/archives/14.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：CNV的可视化</a>》</li>
</ol>
</blockquote>
<p>本文接上次的内容：《<a href="https://byteofbio.com/archives/4.html" target="_blank" rel="noopener">肿瘤变异数据分析和可视化工具maftools：安装和文件格式要求</a>》，本文以TCGA肺腺癌（LUAD）的数据为例介绍突变数据下载和可视化。</p>
<h2 id="数据下载和处理"><a href="#数据下载和处理" class="headerlink" title="数据下载和处理"></a>数据下载和处理</h2><p>在TCGA官网下载TCGA-LUAD项目中mutect2输出的MAF格式的突变以及临床信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -lhrt</span><br><span class="line">total 50M</span><br><span class="line">-rw-r--r-- 1 xiaofei xiaofei  50M May 14 22:44 TCGA.LUAD.maf.gz</span><br><span class="line">-rw-r--r-- 1 xiaofei xiaofei 157K May 15 00:12 clinical.tsv</span><br></pre></td></tr></table></figure>

<p>因为要通过”Tumor_Sample_Barcode”列将两个文件进行关联，这里做两步处理：</p>
<ul>
<li>将临床信息文件<code>clinical.tsv</code>中存放样品ID的”submitter_id”修改为”Tumor_Sample_Barcode”。</li>
<li>把<code>TCGA.LUAD.maf.gz</code>中的”Tumor_Sample_Barcode”列按照<code>clinical.tsv</code>中的修改成一致。具体在此例中就是只保留”Project-TSS-Participant”部分。这里我使用自己写的Python脚本进行修改：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python tcga_format.py TCGA.LUAD.maf.gz &gt; TCGA.LUAD.maf</span><br></pre></td></tr></table></figure>

<p>注：虽然在本篇文章中还没用到临床信息，不过姑且先了解一下数据读入前应该如何处理。</p>
<h2 id="使用maftools读取MAF文件并统计"><a href="#使用maftools读取MAF文件并统计" class="headerlink" title="使用maftools读取MAF文件并统计"></a>使用maftools读取MAF文件并统计</h2><h3 id="1-MAF文件读取"><a href="#1-MAF文件读取" class="headerlink" title="1. MAF文件读取"></a>1. MAF文件读取</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(maftools)</span><br><span class="line">luad &lt;- read.maf(maf=<span class="string">"TCGA.LUAD.maf"</span>, clinicalData=<span class="string">"clinical.tsv"</span>)</span><br></pre></td></tr></table></figure>

<p>文件读入时的输出（不同版本的maftools输出结果会有所不同）：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">## -Reading</span></span><br><span class="line"><span class="comment">## |--------------------------------------------------|</span></span><br><span class="line"><span class="comment">## |==================================================|</span></span><br><span class="line"><span class="comment">## |--------------------------------------------------|</span></span><br><span class="line"><span class="comment">## |==================================================|</span></span><br><span class="line"><span class="comment">## -Validating</span></span><br><span class="line"><span class="comment">## -Silent variants: 66099 </span></span><br><span class="line"><span class="comment">## -Summarizing</span></span><br><span class="line"><span class="comment">## --Possible FLAGS among top ten genes:</span></span><br><span class="line"><span class="comment">##   TTN</span></span><br><span class="line"><span class="comment">##   MUC16</span></span><br><span class="line"><span class="comment">##   USH2A</span></span><br><span class="line"><span class="comment">## -Processing clinical data</span></span><br><span class="line"><span class="comment">## -Finished in 15.2s elapsed (16.3s cpu)</span></span><br></pre></td></tr></table></figure>

<h3 id="2-MAF文件统计"><a href="#2-MAF文件统计" class="headerlink" title="2. MAF文件统计"></a>2. MAF文件统计</h3><p>使用如下代码可以对读入的MAF文件进行汇总统计：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">luad <span class="comment"># 直接输入MAF对象可以查看MAF文件的基本信息</span></span><br><span class="line">getSampleSummary(luad) <span class="comment"># 显示样品的统计</span></span><br><span class="line">getGeneSummary(luad) <span class="comment"># 显示基因的统计</span></span><br><span class="line">getClinicalData(luad) <span class="comment"># 显示样品关联的临床数据</span></span><br><span class="line">getFields(luad) <span class="comment"># 显示MAF文件中的所有字段</span></span><br><span class="line">write.mafSummary(maf=luad, basename=<span class="string">"luad"</span>) <span class="comment"># 将详细统计结果输出到文件</span></span><br></pre></td></tr></table></figure>

<p>具体输出结果这里就不展示了，可以自行尝试。</p>
<h2 id="突变的可视化"><a href="#突变的可视化" class="headerlink" title="突变的可视化"></a>突变的可视化</h2><h3 id="1-MAF文件汇总统计图"><a href="#1-MAF文件汇总统计图" class="headerlink" title="1. MAF文件汇总统计图"></a>1. MAF文件汇总统计图</h3><p>使用如下代码即可绘制MAF文件的汇总统计图。dashboard style中包括”Variant Classification”、”Variant Type”、”SNV Class”、”Variants per sample”、”Variant Classification summary”、”Top 10 mutated genes”的统计：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">plotmafSummary(maf=luad, rmOutlier=<span class="literal">TRUE</span>, addStat=<span class="string">"median"</span>, dashboard=<span class="literal">TRUE</span>, titvRaw = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/3626470955.png" alt="maftools plotmafSummary"></p>
<h3 id="2-Oncoplots"><a href="#2-Oncoplots" class="headerlink" title="2. Oncoplots"></a>2. Oncoplots</h3><p>Oncoplot也就是cBioPortal中的OncoPrint或者叫做瀑布图。简单使用方法如下，通过<code>top=10</code>设定要展示的频率前10的突变：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">oncoplot(maf=luad, top=<span class="number">10</span>, borderCol=<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/354321420.png" alt="maftools oncoplot"></p>
<p>因为sample数比较多，图缩小之后不是很好看，甚至显示错误。这里可以设置参数<code>borderCol=NULL</code>让样本之间不显示边界，推荐大样本量的时候使用（cBioPortal显示类似，会自适应进行调整）。</p>
<p>此外，Oncoplot的定制化可通过调整参数和输入的MAF对象实现：</p>
<ul>
<li>通过参数<code>genes</code>只展示某几个感兴趣的基因的突变情况</li>
<li><code>draw_titv=TRUE</code>: 在oncoplot中增加转换和颠换的统计</li>
<li><code>colors</code>: 更改配色</li>
<li>如果读入MAF文件时也输入了GISTIC的CNV文件，或者有其他格式的CNV文件，可以在oncoplot中展示</li>
<li>可以在oncoplot中加入显著性概率（比如MutSig的结果）、表达量、或者任何其他数值</li>
<li>可以通过<code>clinicalFeatures</code>参数加入临床数据的注释/分类信息并以<code>sortByAnnotation</code>进行排序</li>
<li>更多方法详见：<a href="http://bioconductor.org/packages/devel/bioc/vignettes/maftools/inst/doc/oncoplots.html" target="_blank" rel="noopener">http://bioconductor.org/packages/devel/bioc/vignettes/maftools/inst/doc/oncoplots.html</a></li>
</ul>
<h3 id="3-Oncostrip"><a href="#3-Oncostrip" class="headerlink" title="3. Oncostrip"></a>3. Oncostrip</h3><p><code>oncostrip</code>本质上和<code>oncoplot</code>没什么区别，代码实现也就是<code>oncoplot</code>的封装，只是<code>drawRowBar</code>和<code>drawColBar</code>设置成了<code>FALSE</code>。这里就不做展示了。</p>
<h3 id="4-转换（transition）和颠换（transversion）的统计和可视化"><a href="#4-转换（transition）和颠换（transversion）的统计和可视化" class="headerlink" title="4. 转换（transition）和颠换（transversion）的统计和可视化"></a>4. 转换（transition）和颠换（transversion）的统计和可视化</h3><p>使用<code>titv</code>函数对SNP进行转换和颠换的分类，然后使用<code>plotTiTv</code>进行可视化：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">luad.titv &lt;- titv(maf=luad, plot=<span class="literal">FALSE</span>, useSyn=<span class="literal">TRUE</span>)</span><br><span class="line">plotTiTv(res=luad.titv)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/744553740.png" alt="maftools plotTiTv"></p>
<h3 id="5-Lollipop图（棒棒糖图）"><a href="#5-Lollipop图（棒棒糖图）" class="headerlink" title="5. Lollipop图（棒棒糖图）"></a>5. Lollipop图（棒棒糖图）</h3><p>使用<code>lollipopPlot</code>函数可以绘制棒棒糖图，用于显示蛋白的结构域以及氨基酸突变的位点和类型。这个功能需要MAF文件中有体现氨基酸变化的字段，并通过<code>AACol</code>参数进行设定（这个字段通常没有固定的名称）。本例中手动指定该字段为<code>HGVSp_Short</code>：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">lollipopPlot(maf=luad, gene=<span class="string">"TP53"</span>, AACol=<span class="string">"HGVSp_Short"</span>, showMutationRate=<span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/4273252394.png" alt="maftools lollipopPlot"></p>
<p>此外可以使用<code>labelPos</code>参数标记突变。</p>
<h3 id="6-Rainfall-plots"><a href="#6-Rainfall-plots" class="headerlink" title="6. Rainfall plots"></a>6. Rainfall plots</h3><p><code>rainfallPlot</code>可以通过绘制染色体尺度的突变间距的展示hyper mutated genomic region。因为使用TCGA-LUAD的数据没有找到”Kataegis”，这里用程序自带的乳腺癌数据<code>brca</code>进行展示（Kataegis在乳腺癌中很常见）。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">brca &lt;- system.file(<span class="string">"extdata"</span>, <span class="string">"brca.maf.gz"</span>, package=<span class="string">"maftools"</span>)</span><br><span class="line">brca &lt;- read.maf(maf=brca, verbose=<span class="literal">FALSE</span>)</span><br><span class="line">rainfallPlot(maf=brca, detectChangePoints=<span class="literal">TRUE</span>, pointSize=<span class="number">0.6</span>)</span><br></pre></td></tr></table></figure>

<p>运行后会输出Kataegis的具体信息，并在图中用黑色箭头进行标记。”Kataegis”定义为包含≥6个连续突变的基因组区段，并且平均突变间距离≤100bp。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Kataegis detected at:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##    Chromosome Start_Position End_Position nMuts Avg_intermutation_dist</span></span><br><span class="line"><span class="comment">## 1:          8       98129391     98133560     6               833.8000</span></span><br><span class="line"><span class="comment">## 2:          8       98398603     98403536     8               704.7143</span></span><br><span class="line"><span class="comment">## 3:          8       98453111     98456466     8               479.2857</span></span><br><span class="line"><span class="comment">## 4:          8      124090506    124096810    21               315.2000</span></span><br><span class="line"><span class="comment">## 5:         12       97437934     97439705     6               354.2000</span></span><br><span class="line"><span class="comment">## 6:         17       29332130     29336153     7               670.5000</span></span><br><span class="line"><span class="comment">##    Size Tumor_Sample_Barcode C&gt;G C&gt;T</span></span><br><span class="line"><span class="comment">## 1: 4169         TCGA-A8-A08B   4   2</span></span><br><span class="line"><span class="comment">## 2: 4933         TCGA-A8-A08B   1   7</span></span><br><span class="line"><span class="comment">## 3: 3355         TCGA-A8-A08B  NA   8</span></span><br><span class="line"><span class="comment">## 4: 6304         TCGA-A8-A08B   1  20</span></span><br><span class="line"><span class="comment">## 5: 1771         TCGA-A8-A08B   3   3</span></span><br><span class="line"><span class="comment">## 6: 4023         TCGA-A8-A08B   4   3</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/1237896571.png" alt="maftools rainfallPlot"></p>
<h3 id="7-肿瘤突变负荷（TMB）统计以及TCGA-cohorts的比较"><a href="#7-肿瘤突变负荷（TMB）统计以及TCGA-cohorts的比较" class="headerlink" title="7. 肿瘤突变负荷（TMB）统计以及TCGA cohorts的比较"></a>7. 肿瘤突变负荷（TMB）统计以及TCGA cohorts的比较</h3><p>TMB在很多癌症中与免疫治疗效果以及预后相关，因此也成为这几年的研究热点。Maftools可以使用<code>tcgaComapare</code>函数统计MAF文件的TMB，并和内置的33个TCGA的cohorts进行比较：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">luad.mutload &lt;- tcgaCompare(maf=luad, cohortName=<span class="string">"Download_LUAD"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/167632340.png" alt="maftools tcgaCompare"></p>
<p>可以看到通过TCGA官网下载的LUAD和这里内置的TCGA-LUAD结果基本上一致（两者Cohort Size有所不同）。</p>
<h3 id="8-Variant-Allele-Frequency（VAF）可视化"><a href="#8-Variant-Allele-Frequency（VAF）可视化" class="headerlink" title="8. Variant Allele Frequency（VAF）可视化"></a>8. Variant Allele Frequency（VAF）可视化</h3><p>之前已经介绍过<a href="https://byteofbio.com/archives/7.html" target="_blank" rel="noopener">VAF的概念</a>了。<code>plotVaf</code>函数可以将VAF最高的几个基因通过箱线图进行展示：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">plotVaf(maf=luad)</span><br></pre></td></tr></table></figure>

<p>直接运行，会出现提示：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">t_vaf field is missing, but found t_ref_count &amp; t_alt_count columns. Estimating vaf..</span><br></pre></td></tr></table></figure>

<p>这里程序没有找到默认的<code>t_vaf</code>字段，但会通过<code>t_ref_count</code>和<code>t_alt_count</code>列自动<a href="https://byteofbio.com/archives/7.html" target="_blank" rel="noopener">计算VAF</a>。</p>
<p><img src="/2019/11/24/maftools/1520441678.png" alt="maftools plotVaf"></p>
<h3 id="9-突变基因词云"><a href="#9-突变基因词云" class="headerlink" title="9. 突变基因词云"></a>9. 突变基因词云</h3><p><code>geneCloud</code>可以通过词云的方式按字体大小展示包含突变基因的样本数。这个函数也可以用来展示GISTC输出的CNV数据。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">geneCloud(input=luad, top=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/24/maftools/1521086195.png" alt="maftools geneCloud"></p>
<h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="https://www.bioconductor.org/packages/release/bioc/vignettes/maftools/inst/doc/maftools.html" target="_blank" rel="noopener">https://www.bioconductor.org/packages/release/bioc/vignettes/maftools/inst/doc/maftools.html</a></li>
<li><a href="https://docs.gdc.cancer.gov/Data/File_Formats/MAF_Format/" target="_blank" rel="noopener">https://docs.gdc.cancer.gov/Data/File_Formats/MAF_Format/</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>DNAseq</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>annovar</tag>
        <tag>maftools</tag>
      </tags>
  </entry>
  <entry>
    <title>wakeonlan_内网穿透</title>
    <url>/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h3 id="第一章：内网穿透"><a href="#第一章：内网穿透" class="headerlink" title="第一章：内网穿透"></a>第一章：内网穿透</h3><p>参考</p>
<p><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a></p>
<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200519212733456.png" alt="image-20200519212733456"></p>
<a id="more"></a>



<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200519212810840.png" alt="image-20200519212810840"></p>
<p><strong>特别注意：树莓派是arm 结构，因此需要使用arm64版本</strong></p>
<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/Snipaste_2020-05-20_16-21-25.png" alt="Snipaste_2020-05-20_16-21-25"></p>
<h4 id="在服务器安装"><a href="#在服务器安装" class="headerlink" title="在服务器安装"></a>在服务器安装</h4><p>下载上述版本进行解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载到一个文件夹下，解压</span><br><span class="line">mkdir ~&#x2F;frp</span><br><span class="line">tar -xvf frp_0.32.1_linux_amd64.tar.gz</span><br><span class="line"># 修改文件frps.ini </span><br><span class="line"># 建议以后放在这个文件夹下sudo mkdir -p &#x2F;usr&#x2F;local&#x2F;frp</span><br><span class="line"># 解压后存放到这个文件夹内</span><br></pre></td></tr></table></figure>



<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200519213812865.png" alt="image-20200519213812865"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup .&#x2F;frps -c .&#x2F;frps.ini &amp; </span><br><span class="line"># 直接打开，后台运行</span><br></pre></td></tr></table></figure>





<p>本地电脑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载到一个文件夹下，解压</span><br><span class="line">tar -xvf frp_0.32.1_linux_amd64.tar.gz</span><br><span class="line"># 我自定义放在这个文件夹下</span><br><span class="line">sudo mkdir -p &#x2F;usr&#x2F;local&#x2F;frp</span><br><span class="line"># 解压后存放到这个文件夹内</span><br><span class="line">sudo mv frp_0.32.1_linux_amd64&#x2F;* &#x2F;usr&#x2F;local&#x2F;frp&#x2F;</span><br><span class="line"># vim frpc.ini</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200519214039830.png" alt="image-20200519214039830"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup .&#x2F;frpc -c .&#x2F;frpc.ini &amp;</span><br></pre></td></tr></table></figure>





<h4 id="就完成了可参考https-blog-csdn-net-u013144287-article-details-78589643"><a href="#就完成了可参考https-blog-csdn-net-u013144287-article-details-78589643" class="headerlink" title="就完成了可参考https://blog.csdn.net/u013144287/article/details/78589643"></a>就完成了可参考<a href="https://blog.csdn.net/u013144287/article/details/78589643" target="_blank" rel="noopener">https://blog.csdn.net/u013144287/article/details/78589643</a></h4><h3 id="第二章：wakeonlan"><a href="#第二章：wakeonlan" class="headerlink" title="第二章：wakeonlan"></a>第二章：wakeonlan</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install wakeonlan</span><br><span class="line">sudo apt install ethtool</span><br></pre></td></tr></table></figure>



<h4 id="第一步：设置bios"><a href="#第一步：设置bios" class="headerlink" title="第一步：设置bios"></a>第一步：设置bios</h4><p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200520082300778.png" alt="image-20200520082300778"></p>
<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200520082316138.png" alt="image-20200520082316138"></p>
<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200520082333807.png" alt="image-20200520082333807"></p>
<h4 id="第二步：安装ethtool"><a href="#第二步：安装ethtool" class="headerlink" title="第二步：安装ethtool"></a>第二步：安装ethtool</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install ethtool</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200520082542601.png" alt="image-20200520082542601"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sudo ethtool eth0|grep wake-on </span><br><span class="line"># 这里的eth0要改名字改为ifconfig得到的应该是网卡名字 不然会报错Cannot get current wake-on-lan settings: No such device</span><br><span class="line">sudo ethtool eth0 |grep Wake-on</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200520082921363.png" alt="image-20200520082921363"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ethtool -s enp24s0 wol g  # 开启</span><br><span class="line">sudo ethtool enp24s0 |grep Wake-on</span><br><span class="line">sudo shutdown 0</span><br><span class="line">wakeonlan -i 192.168.0.108 00:d8:61:71:17:96</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200520095422095.png" alt="image-20200520095422095"></p>
<p>要变成g才可以</p>
<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200520095454645.png" alt="image-20200520095454645"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的树莓派</span><br><span class="line">sudo ethtool -s eth0 wol g  # 开启</span><br><span class="line">sudo ethtool eth0 |grep Wake-on</span><br><span class="line">wakeonlan -i 192.168.0.101  dc:a6:32:61:2f:1b </span><br><span class="line">sudo etherwake dc:a6:32:61:2f:1b</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200520083213589.png" alt="image-20200520083213589"></p>
<h4 id="第三步：解决重大问题（关机后，无法保存设置，也就是wake-on设置会自动消失）"><a href="#第三步：解决重大问题（关机后，无法保存设置，也就是wake-on设置会自动消失）" class="headerlink" title="第三步：解决重大问题（关机后，无法保存设置，也就是wake-on设置会自动消失）"></a>第三步：解决重大问题（关机后，无法保存设置，也就是wake-on设置会自动消失）</h4><p>都是操作系统不允许</p>
<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200520102652009.png" alt="image-20200520102652009"></p>
<h3 id="第三章：具体解决方案"><a href="#第三章：具体解决方案" class="headerlink" title="第三章：具体解决方案"></a>第三章：具体解决方案</h3><h4 id="看了很久找到了解决方式"><a href="#看了很久找到了解决方式" class="headerlink" title="看了很久找到了解决方式"></a>看了很久找到了解决方式</h4><p><a href="https://www.techrepublic.com/article/how-to-enable-wake-on-lan-in-ubuntu-server-18-04/" target="_blank" rel="noopener">https://www.techrepublic.com/article/how-to-enable-wake-on-lan-in-ubuntu-server-18-04/</a></p>
<h5 id="How-to-enable-Wake-On-LAN-in-Ubuntu-Server-18-04"><a href="#How-to-enable-Wake-On-LAN-in-Ubuntu-Server-18-04" class="headerlink" title="How to enable Wake On LAN in Ubuntu Server 18.04"></a>How to enable Wake On LAN in Ubuntu Server 18.04</h5><h4 id="What-you’ll-need"><a href="#What-you’ll-need" class="headerlink" title="What you’ll need"></a>What you’ll need</h4><p>The only things you’ll need to make this work are:</p>
<ul>
<li>An instance of Ubuntu Server 18.04</li>
<li>A user account with sudo privileges</li>
<li>A network interface that supports WOL</li>
</ul>
<h4 id="How-to-install-ethtool"><a href="#How-to-install-ethtool" class="headerlink" title="How to install ethtool"></a>How to install ethtool</h4><p>The tool that makes this possible is ethtool. Chances are, it’s already installed on your server. However, on the off-chance it’s not, let’s install it. Open a terminal window and issue the following command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ethtool -y</span><br></pre></td></tr></table></figure>

<h4 id="How-to-locate-the-interface-name"><a href="#How-to-locate-the-interface-name" class="headerlink" title="How to locate the interface name"></a>How to locate the interface name</h4><p>The next thing you need to do is locate the interface name you want listening for the magic packet. If your machine has both WAN and LAN interfaces, you’ll probably only want to enable this on the LAN side. </p>
<p>To find the interface name, issue the command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>

<p>You should see the interface listed. Look for the name associated with IP address you want to be listening for the magic packet (<strong>Figure A</strong>).</p>
<p><strong>Figure A</strong></p>
<p><a href="https://tr3.cbsistatic.com/hub/i/2019/08/27/04027522-5a05-46bb-8e05-1202f278eaa6/wola.jpg" target="_blank" rel="noopener"><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/wola.jpg" alt="wola.jpg"></a></p>
<p>My LAN-facing interface is ens5.</p>
<p>With the interface name in hand, issue the command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ethtool -s INTERFACE wol g</span><br></pre></td></tr></table></figure>

<p>Where INTERFACE is the name of the interface to be used.</p>
<p>The command will report nothing back–unless it turns out your network interface doesn’t support WOL, at which point it will inform you as such.</p>
<p>Finally, you must know the MAC address of the interface. This can be discovered with the same command used to find the interface name (ip a). </p>
<h4 id="How-to-install-WOL-and-send-the-magic-packet"><a href="#How-to-install-WOL-and-send-the-magic-packet" class="headerlink" title="How to install WOL and send the magic packet"></a>How to install WOL and send the magic packet</h4><p>The easiest way to send the magic packet (from Linux to Linux) is by using another tool, called wakeonlan. Install this with the command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install wakeonlan -y</span><br></pre></td></tr></table></figure>

<p>Once that application is installed, you can then send the magic packet to the listening interface with the command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wakeonlan MAC</span><br></pre></td></tr></table></figure>

<p>Where MAC is the MAC address of the LAN interface with WOL enabled. The command will report that it has sent the magic packet to the MAC address and your remote server should now be awake, allowing you to log in remotely.</p>
<h4 id="Making-it-stick（解决方案，让计算机记住设置）"><a href="#Making-it-stick（解决方案，让计算机记住设置）" class="headerlink" title="Making it stick（解决方案，让计算机记住设置）"></a>Making it stick（解决方案，让计算机记住设置）</h4><p>The problem with this method is that the enabling of WOL on the interface will not stick after a reboot. To make this persistent on Ubuntu Server 18.04, you must write a systemd file. To do this, issue the command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;wol.service</span><br></pre></td></tr></table></figure>

<p>In that file, paste the following:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Configure Wake On LAN</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;oneshot</span><br><span class="line">ExecStart&#x3D;&#x2F;sbin&#x2F;ethtool -s INTERFACE wol g</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;basic.target</span><br></pre></td></tr></table></figure>

<p>Where INTERFACE is the name of the interface to be used.</p>
<p>Save and close the file. Make systemd aware of the new script with the command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>Enable the new service with the command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable wol.service</span><br></pre></td></tr></table></figure>

<p>Finally, start the service with the command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start wol.service</span><br></pre></td></tr></table></figure>

<p>And that’s it. Wake On LAN is now available for the LAN interface. You can wake that server without having to trudge all the way to your data center. Just remember, you have to know the MAC address of the target LAN interface, you cannot do this via IP address. Happy waking.</p>
<h2 id="参考1"><a href="#参考1" class="headerlink" title="参考1"></a>参考1</h2><p><a href="https://www.cyberciti.biz/tips/linux-send-wake-on-lan-wol-magic-packets.html" target="_blank" rel="noopener">https://www.cyberciti.biz/tips/linux-send-wake-on-lan-wol-magic-packets.html</a></p>
<p>Save and close the file. If you are using Debian / Ubuntu Linux, edit /etc/network/interfaces:<br><code># vi /etc/network/interfaces</code><br>Append the following to eth0:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto eth0 </span><br><span class="line">iface eth0 inet static </span><br><span class="line">address 192.168.1.1 </span><br><span class="line">netmask 255.255.255.0 </span><br><span class="line">gateway 192.168.1.254        </span><br><span class="line">post-up &#x2F;sbin&#x2F;ethtool -s eth0 wol g        </span><br><span class="line">post-down &#x2F;sbin&#x2F;ethtool -s eth0 wol g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auto enp24s0 </span><br><span class="line">iface enp24s0 inet static </span><br><span class="line">address 192.168.0.108 </span><br><span class="line">netmask 255.255.255.0 </span><br><span class="line">gateway 192.168.0.255        </span><br><span class="line">post-up &#x2F;sbin&#x2F;ethtool -s enp24s0 wol g        </span><br><span class="line">post-down &#x2F;sbin&#x2F;ethtool -s enp24s0 wol g</span><br></pre></td></tr></table></figure>



<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20200520092109799.png" alt="image-20200520092109799"></p>
<h2 id="参考2"><a href="#参考2" class="headerlink" title="参考2"></a>参考2</h2><h4 id="这里主要是针对ubuntu系统的说明"><a href="#这里主要是针对ubuntu系统的说明" class="headerlink" title="这里主要是针对ubuntu系统的说明"></a>这里主要是针对ubuntu系统的说明</h4><p>1.检查计算机硬件是否支持WOL(wake on lan)功能。<br>1.1.检查主板和电源是否支持WOL:<br>进入BIOS的Power Management Setup，设置PME Event Wake Up(这其实是一种Wake On PCI Card模式)为 Enabled。注意，有些机器可能为Wake On Lan或Wake On PCI Card。Wake On Lan模式可以在完全关机状态下唤醒，而Wake On PCI Card模式要在深度休眠状态下唤醒。造成这样的区别主要是因为主板的设计不一样，现在的计算机一般都是Wake On PCI Card模式的。</p>
<p>1.2.检查网卡是否支持WOL。<br>安装ethtool，并执行以下命令：</p>
<blockquote>
<p>sudo apt-get install ethtool<br>sudo ethtool eth0 |grep Wake-on</p>
</blockquote>
<p>如果显示结果为下面这样，就表示网卡支持WOL：</p>
<blockquote>
<p>Supports Wake-on:pumbg<br>Wake-on : g</p>
</blockquote>
<p>2.远程控制计算机进入深度休眠或完全关机状态</p>
<p>这里主要应用了SSH连接远程计算机，并提交命令请求来达到目的。<br>2.1.使用ubuntu终端登陆远程计算机</p>
<p>关于这一步可以参考ubuntu终端连接远程计算机<br>2.2.登陆远程计算机后，使用如下命令实现深度休眠或关机</p>
<p><strong>深度休眠</strong><br>sudo pm-hibernate</p>
<p><strong>关机</strong><br>sudo shutdown 0</p>
<p>3.唤醒远程计算机<br>3.1.准备工作<br>知道远程计算机的ip地址或域名和MAC地址，在路由上绑定局域网ip地址和MAC地址。如果没有静态ip，可以使用花生壳。详细操作可以google，在这里就不详述了。<br>在本地计算机上安装远程唤醒工具wakeonlan:</p>
<blockquote>
<p>sudo apt-get install wakeonlan</p>
</blockquote>
<p>3.2.唤醒远程计算机</p>
<p>执行下面的命令就可以唤醒远程的计算机了：</p>
<p>#host_address为远程计算机的域名或ip地址，mac_address为远程计算机的mac地址,mac地址是’:’间隔的形式<br><code>wakeonlan -i host_address mac_address</code></p>
<h1 id="centos的情况"><a href="#centos的情况" class="headerlink" title="centos的情况"></a>centos的情况</h1><p>环境说明：<br>两台局域网内的linux主机，本环境的系统为centos 5.3 X86_64<br>控制主机 为：192.168.10.149<br>被控制主机为：192.168.10.150</p>
<p>一，在控制主机上安装远程开机需要的 软件<br>[root@tomcat2 ~]#yum -y install wol<br>或者安装rpm包<br>[root@tomcat2 ~]#rpm -ivh wol-0.7.1-2.1.el3.dag.x86_64.rpm</p>
<p>二，开启被控制主机的远程网卡唤醒功能<br>第一步：登录到被控制服务器192.168.10.150，用ethtool这个命令打印出网卡的信息<br>[root@tomcat1 ~]# ethtool eth0<br>clip_image002 可以看到，ethtool把网卡的信息全部列出，我们只关心其中的这两项:<br>clip_image004<br>如果 wake-on 一项值为 d,表示禁用wake on lan<br>值为 g,表示启用 wake on lan</p>
<p>第二步：用下面的命令来启用wake on lan<br>[root@tomcat1 ~]# ethtool -s eth0 wol g</p>
<p>第三步：确认是否开启了wake on lan功能<br>[root@tomcat1 ~]# ethtool eth0<br>clip_image006<br>clip_image008<br>OK，目标机器的网卡已经支持了远程开机了</p>
<p>三． 获取被控制主机的MAC地址<br>[root@tomcat1 ~]#ifconfig eth0<br>clip_image010 把clip_image012这一项记录下来即可</p>
<p>四．关闭被控制主机 192.168.10.150的系统，然后再控制主机192.168.10.149上远程开机<br>[root@tomcat2 ~]#wol 00:0C:29:5D:06:24<br>稍后就会发现，192.168.10.150已经启动了<br>备注：<br>1,ethtool的 -s 参数是修改指定以太网设备的设置<br>2,wol的取值默认是d,含义是disable<br>修 改后的值为g,含义是Wake on MagicPacket(tm)<br>它还有几个取值，分别是：<br>p Wake on phy activity<br>u Wake on unicast messages<br>m Wake on multicast messages<br>b Wake on broadcast messages<br>a Wake on ARP</p>
<p>3,当机器重启后，eth0的设置又会回复到Wake-on: d 状态,<br>这个问题怎么解决？<br>两个办法：第一个，也是我们的惯性思维;<br>把/sbin/ethtool -s eth0 wol g 这条命令附加到/etc/rc.local这个文件中，<br>则下次开机后会自动执行</p>
<p>第二个: 编辑/etc/sysconfig/network-scripts/ifcfg-eth0<br>（eth0网卡的配置文件），添加上一行：<br>ETHTOOL_OPTS=”wol g”</p>
<p>4,网络唤醒的局限性：<br>它只能在局域网中应用，而不能通过互联 网运行，为什么？<br>因为机器关闭后，完全是靠网卡唤醒机器，此时的机器是关闭的，没有操作系统运行也就谈不上支持tcp/ip协议，当然 也就不能通过互联网运行了.也就是说：如果我们在某个局域网中只有一台机器，就不能使用此功能了.我们必须能登录到局域网中的一台机器上，在此机器上运行 wake on lan 去唤醒目标机器前提条件就是：目标机器和我们登录的机器在同一局域网中</p>
<p>测试网卡WOL在Linux上的功能的步骤：</p>
<p>1.运行ethtool命令查看网卡是否支持Wake On Lan</p>
<p>Supports Wake-on: pumbg<br>Wake-on: d</p>
<p>若Wake-on为d，表示禁用Wake On LAN，需要启用它。<br>如果已经是g就说明目标机器的网卡已经支持Wake On LAN.</p>
<p>2.执行命令：</p>
<p>ethtool -s eth0 wol g   //启用wol</p>
<p>3.使用wol唤醒主机<br>用法：</p>
<p>wol 目标主机MAC</p>
<p>参考 <a href="https://blog.csdn.net/yu132563/article/details/97705307" target="_blank" rel="noopener">在Linux下通过Wake On LAN实现网络唤醒远程开机</a></p>
<p>可以通过一台已经启动的机器通过Wake<br> On LAN去开启唤醒另外一台机器。<br>现在介绍通过一台已经启动的linux机器通过Wake<br> On LAN去唤醒开期另外一台机器。<br>前置条件：<br>操作机器与目标机器在同一局域网内<br>目标机器电源和网线已插好<br>目标机器网卡和主板均支持远程唤醒并在BIOS里已经设置了网络唤醒(WOL)开机。<br>目前一般的机器网卡和主板都支持远程唤醒开机，需要在BIOS里设置将网络唤醒开机开启。<br>开机时进入BIOS，查看CMOS中的“Power<br> Management Setup”，通常里面会有Power On by Onborad Lan，将其设置为“Enable”。<br>如下图，在电源管理中开启Power On by Onborad Lan。不同的主板BIOS设置不太一样。具体根据自己机器实际情况进行设置。<br><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20161117112359964.png" alt="img"></p>
<p>如何在Linux下通过Wake<br> On LAN远程唤醒，具体操作步骤如下：<br>1.在本机安装Wake On LAN。可从官方网站下载。<br>CentOS可以用yum命令安装:<br>yum install wol<br>也可以下载wol的rpm包通过rpm安装。点击这里下载</p>
<p> <img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20161117112712140.png" alt="img"><br>2.登录需要远程唤醒开机的目标机器，运行ethtool命令查看网卡是否支持WakeOn Lan</p>
<p>[root@localhost]# ethtool eth0</p>
<p>看这两行</p>
<p>Supports Wake-on: pumbg</p>
<p>Wake-on: d</p>
<p>若Wake-on为d，表示禁用Wake On LAN，需要启用它。</p>
<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20161117112740672.png" alt="img"></p>
<p>[root@localhost]# ethtool -s eth0 wol g</p>
<p>如果已经是g就说明目标机器的网卡已经支持Wake On LAN。</p>
<p>3.查看目标机器网卡的MAC地址</p>
<p>[root@localhost]# ifconfig</p>
<p><img src="/2020/05/19/wakeonlan-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20161117112802345.png" alt="img"></p>
<p>4.关闭目标机器，在主机运行wol命令<br>wol 00:17:a4:ad:c3:a8<br>这时，目标机器这时就会开启了。可以通过ping命令验证机器是否已经启动了。<br>如果记不住mac地址可以写个简单的shell脚本，直接执行这个脚本就可以了。</p>
<p>#!/bin/bash<br>wol 目标mac地址</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>servers</tag>
        <tag>linux</tag>
        <tag>wakeonlan</tag>
        <tag>内网穿透</tag>
        <tag>frp</tag>
      </tags>
  </entry>
</search>
